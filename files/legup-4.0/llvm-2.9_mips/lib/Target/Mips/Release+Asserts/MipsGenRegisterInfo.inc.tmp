//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern MCRegisterClass MipsMCRegisterClasses[];

namespace Mips {
enum {
  NoRegister,
  A0 = 1,
  A1 = 2,
  A2 = 3,
  A3 = 4,
  AT = 5,
  D0 = 6,
  D1 = 7,
  D2 = 8,
  D3 = 9,
  D4 = 10,
  D5 = 11,
  D6 = 12,
  D7 = 13,
  D8 = 14,
  D9 = 15,
  D10 = 16,
  D11 = 17,
  D12 = 18,
  D13 = 19,
  D14 = 20,
  D15 = 21,
  F0 = 22,
  F1 = 23,
  F2 = 24,
  F3 = 25,
  F4 = 26,
  F5 = 27,
  F6 = 28,
  F7 = 29,
  F8 = 30,
  F9 = 31,
  F10 = 32,
  F11 = 33,
  F12 = 34,
  F13 = 35,
  F14 = 36,
  F15 = 37,
  F16 = 38,
  F17 = 39,
  F18 = 40,
  F19 = 41,
  F20 = 42,
  F21 = 43,
  F22 = 44,
  F23 = 45,
  F24 = 46,
  F25 = 47,
  F26 = 48,
  F27 = 49,
  F28 = 50,
  F29 = 51,
  F30 = 52,
  F31 = 53,
  FCR31 = 54,
  FP = 55,
  GP = 56,
  HI = 57,
  HWR29 = 58,
  K0 = 59,
  K1 = 60,
  LO = 61,
  RA = 62,
  S0 = 63,
  S1 = 64,
  S2 = 65,
  S3 = 66,
  S4 = 67,
  S5 = 68,
  S6 = 69,
  S7 = 70,
  SP = 71,
  T0 = 72,
  T1 = 73,
  T2 = 74,
  T3 = 75,
  T4 = 76,
  T5 = 77,
  T6 = 78,
  T7 = 79,
  T8 = 80,
  T9 = 81,
  V0 = 82,
  V1 = 83,
  ZERO = 84,
  NUM_TARGET_REGS 	// 85
};
}

// Register classes
namespace Mips {
enum {
  AFGR64RegClassID = 0,
  CCRRegClassID = 1,
  CPURegsRegClassID = 2,
  FGR32RegClassID = 3,
  HILORegClassID = 4,
  HWRegsRegClassID = 5
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// MC Register Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

struct MipsGenMCRegisterInfo : public MCRegisterInfo {
  explicit MipsGenMCRegisterInfo(const MCRegisterDesc *D);
};

namespace {
  const unsigned A0_Overlaps[] = { Mips::A0, 0 };
  const unsigned A1_Overlaps[] = { Mips::A1, 0 };
  const unsigned A2_Overlaps[] = { Mips::A2, 0 };
  const unsigned A3_Overlaps[] = { Mips::A3, 0 };
  const unsigned AT_Overlaps[] = { Mips::AT, 0 };
  const unsigned D0_Overlaps[] = { Mips::D0, Mips::F0, Mips::F1, 0 };
  const unsigned D1_Overlaps[] = { Mips::D1, Mips::F2, Mips::F3, 0 };
  const unsigned D2_Overlaps[] = { Mips::D2, Mips::F4, Mips::F5, 0 };
  const unsigned D3_Overlaps[] = { Mips::D3, Mips::F6, Mips::F7, 0 };
  const unsigned D4_Overlaps[] = { Mips::D4, Mips::F8, Mips::F9, 0 };
  const unsigned D5_Overlaps[] = { Mips::D5, Mips::F10, Mips::F11, 0 };
  const unsigned D6_Overlaps[] = { Mips::D6, Mips::F12, Mips::F13, 0 };
  const unsigned D7_Overlaps[] = { Mips::D7, Mips::F14, Mips::F15, 0 };
  const unsigned D8_Overlaps[] = { Mips::D8, Mips::F16, Mips::F17, 0 };
  const unsigned D9_Overlaps[] = { Mips::D9, Mips::F18, Mips::F19, 0 };
  const unsigned D10_Overlaps[] = { Mips::D10, Mips::F20, Mips::F21, 0 };
  const unsigned D11_Overlaps[] = { Mips::D11, Mips::F22, Mips::F23, 0 };
  const unsigned D12_Overlaps[] = { Mips::D12, Mips::F24, Mips::F25, 0 };
  const unsigned D13_Overlaps[] = { Mips::D13, Mips::F26, Mips::F27, 0 };
  const unsigned D14_Overlaps[] = { Mips::D14, Mips::F28, Mips::F29, 0 };
  const unsigned D15_Overlaps[] = { Mips::D15, Mips::F30, Mips::F31, 0 };
  const unsigned F0_Overlaps[] = { Mips::F0, Mips::D0, 0 };
  const unsigned F1_Overlaps[] = { Mips::F1, Mips::D0, 0 };
  const unsigned F2_Overlaps[] = { Mips::F2, Mips::D1, 0 };
  const unsigned F3_Overlaps[] = { Mips::F3, Mips::D1, 0 };
  const unsigned F4_Overlaps[] = { Mips::F4, Mips::D2, 0 };
  const unsigned F5_Overlaps[] = { Mips::F5, Mips::D2, 0 };
  const unsigned F6_Overlaps[] = { Mips::F6, Mips::D3, 0 };
  const unsigned F7_Overlaps[] = { Mips::F7, Mips::D3, 0 };
  const unsigned F8_Overlaps[] = { Mips::F8, Mips::D4, 0 };
  const unsigned F9_Overlaps[] = { Mips::F9, Mips::D4, 0 };
  const unsigned F10_Overlaps[] = { Mips::F10, Mips::D5, 0 };
  const unsigned F11_Overlaps[] = { Mips::F11, Mips::D5, 0 };
  const unsigned F12_Overlaps[] = { Mips::F12, Mips::D6, 0 };
  const unsigned F13_Overlaps[] = { Mips::F13, Mips::D6, 0 };
  const unsigned F14_Overlaps[] = { Mips::F14, Mips::D7, 0 };
  const unsigned F15_Overlaps[] = { Mips::F15, Mips::D7, 0 };
  const unsigned F16_Overlaps[] = { Mips::F16, Mips::D8, 0 };
  const unsigned F17_Overlaps[] = { Mips::F17, Mips::D8, 0 };
  const unsigned F18_Overlaps[] = { Mips::F18, Mips::D9, 0 };
  const unsigned F19_Overlaps[] = { Mips::F19, Mips::D9, 0 };
  const unsigned F20_Overlaps[] = { Mips::F20, Mips::D10, 0 };
  const unsigned F21_Overlaps[] = { Mips::F21, Mips::D10, 0 };
  const unsigned F22_Overlaps[] = { Mips::F22, Mips::D11, 0 };
  const unsigned F23_Overlaps[] = { Mips::F23, Mips::D11, 0 };
  const unsigned F24_Overlaps[] = { Mips::F24, Mips::D12, 0 };
  const unsigned F25_Overlaps[] = { Mips::F25, Mips::D12, 0 };
  const unsigned F26_Overlaps[] = { Mips::F26, Mips::D13, 0 };
  const unsigned F27_Overlaps[] = { Mips::F27, Mips::D13, 0 };
  const unsigned F28_Overlaps[] = { Mips::F28, Mips::D14, 0 };
  const unsigned F29_Overlaps[] = { Mips::F29, Mips::D14, 0 };
  const unsigned F30_Overlaps[] = { Mips::F30, Mips::D15, 0 };
  const unsigned F31_Overlaps[] = { Mips::F31, Mips::D15, 0 };
  const unsigned FCR31_Overlaps[] = { Mips::FCR31, 0 };
  const unsigned FP_Overlaps[] = { Mips::FP, 0 };
  const unsigned GP_Overlaps[] = { Mips::GP, 0 };
  const unsigned HI_Overlaps[] = { Mips::HI, 0 };
  const unsigned HWR29_Overlaps[] = { Mips::HWR29, 0 };
  const unsigned K0_Overlaps[] = { Mips::K0, 0 };
  const unsigned K1_Overlaps[] = { Mips::K1, 0 };
  const unsigned LO_Overlaps[] = { Mips::LO, 0 };
  const unsigned RA_Overlaps[] = { Mips::RA, 0 };
  const unsigned S0_Overlaps[] = { Mips::S0, 0 };
  const unsigned S1_Overlaps[] = { Mips::S1, 0 };
  const unsigned S2_Overlaps[] = { Mips::S2, 0 };
  const unsigned S3_Overlaps[] = { Mips::S3, 0 };
  const unsigned S4_Overlaps[] = { Mips::S4, 0 };
  const unsigned S5_Overlaps[] = { Mips::S5, 0 };
  const unsigned S6_Overlaps[] = { Mips::S6, 0 };
  const unsigned S7_Overlaps[] = { Mips::S7, 0 };
  const unsigned SP_Overlaps[] = { Mips::SP, 0 };
  const unsigned T0_Overlaps[] = { Mips::T0, 0 };
  const unsigned T1_Overlaps[] = { Mips::T1, 0 };
  const unsigned T2_Overlaps[] = { Mips::T2, 0 };
  const unsigned T3_Overlaps[] = { Mips::T3, 0 };
  const unsigned T4_Overlaps[] = { Mips::T4, 0 };
  const unsigned T5_Overlaps[] = { Mips::T5, 0 };
  const unsigned T6_Overlaps[] = { Mips::T6, 0 };
  const unsigned T7_Overlaps[] = { Mips::T7, 0 };
  const unsigned T8_Overlaps[] = { Mips::T8, 0 };
  const unsigned T9_Overlaps[] = { Mips::T9, 0 };
  const unsigned V0_Overlaps[] = { Mips::V0, 0 };
  const unsigned V1_Overlaps[] = { Mips::V1, 0 };
  const unsigned ZERO_Overlaps[] = { Mips::ZERO, 0 };
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned D0_SubRegsSet[] = { Mips::F0, Mips::F1, 0 };
  const unsigned D1_SubRegsSet[] = { Mips::F2, Mips::F3, 0 };
  const unsigned D2_SubRegsSet[] = { Mips::F4, Mips::F5, 0 };
  const unsigned D3_SubRegsSet[] = { Mips::F6, Mips::F7, 0 };
  const unsigned D4_SubRegsSet[] = { Mips::F8, Mips::F9, 0 };
  const unsigned D5_SubRegsSet[] = { Mips::F10, Mips::F11, 0 };
  const unsigned D6_SubRegsSet[] = { Mips::F12, Mips::F13, 0 };
  const unsigned D7_SubRegsSet[] = { Mips::F14, Mips::F15, 0 };
  const unsigned D8_SubRegsSet[] = { Mips::F16, Mips::F17, 0 };
  const unsigned D9_SubRegsSet[] = { Mips::F18, Mips::F19, 0 };
  const unsigned D10_SubRegsSet[] = { Mips::F20, Mips::F21, 0 };
  const unsigned D11_SubRegsSet[] = { Mips::F22, Mips::F23, 0 };
  const unsigned D12_SubRegsSet[] = { Mips::F24, Mips::F25, 0 };
  const unsigned D13_SubRegsSet[] = { Mips::F26, Mips::F27, 0 };
  const unsigned D14_SubRegsSet[] = { Mips::F28, Mips::F29, 0 };
  const unsigned D15_SubRegsSet[] = { Mips::F30, Mips::F31, 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };
  const unsigned F0_SuperRegsSet[] = { Mips::D0, 0 };
  const unsigned F1_SuperRegsSet[] = { Mips::D0, 0 };
  const unsigned F2_SuperRegsSet[] = { Mips::D1, 0 };
  const unsigned F3_SuperRegsSet[] = { Mips::D1, 0 };
  const unsigned F4_SuperRegsSet[] = { Mips::D2, 0 };
  const unsigned F5_SuperRegsSet[] = { Mips::D2, 0 };
  const unsigned F6_SuperRegsSet[] = { Mips::D3, 0 };
  const unsigned F7_SuperRegsSet[] = { Mips::D3, 0 };
  const unsigned F8_SuperRegsSet[] = { Mips::D4, 0 };
  const unsigned F9_SuperRegsSet[] = { Mips::D4, 0 };
  const unsigned F10_SuperRegsSet[] = { Mips::D5, 0 };
  const unsigned F11_SuperRegsSet[] = { Mips::D5, 0 };
  const unsigned F12_SuperRegsSet[] = { Mips::D6, 0 };
  const unsigned F13_SuperRegsSet[] = { Mips::D6, 0 };
  const unsigned F14_SuperRegsSet[] = { Mips::D7, 0 };
  const unsigned F15_SuperRegsSet[] = { Mips::D7, 0 };
  const unsigned F16_SuperRegsSet[] = { Mips::D8, 0 };
  const unsigned F17_SuperRegsSet[] = { Mips::D8, 0 };
  const unsigned F18_SuperRegsSet[] = { Mips::D9, 0 };
  const unsigned F19_SuperRegsSet[] = { Mips::D9, 0 };
  const unsigned F20_SuperRegsSet[] = { Mips::D10, 0 };
  const unsigned F21_SuperRegsSet[] = { Mips::D10, 0 };
  const unsigned F22_SuperRegsSet[] = { Mips::D11, 0 };
  const unsigned F23_SuperRegsSet[] = { Mips::D11, 0 };
  const unsigned F24_SuperRegsSet[] = { Mips::D12, 0 };
  const unsigned F25_SuperRegsSet[] = { Mips::D12, 0 };
  const unsigned F26_SuperRegsSet[] = { Mips::D13, 0 };
  const unsigned F27_SuperRegsSet[] = { Mips::D13, 0 };
  const unsigned F28_SuperRegsSet[] = { Mips::D14, 0 };
  const unsigned F29_SuperRegsSet[] = { Mips::D14, 0 };
  const unsigned F30_SuperRegsSet[] = { Mips::D15, 0 };
  const unsigned F31_SuperRegsSet[] = { Mips::D15, 0 };
}

MCRegisterDesc MipsRegDesc[] = { // Descriptors
  { "NOREG",	0,	0,	0 },
  { "A0",	A0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "A1",	A1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "A2",	A2_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "A3",	A3_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "AT",	AT_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "D0",	D0_Overlaps,	D0_SubRegsSet,	Empty_SuperRegsSet },
  { "D1",	D1_Overlaps,	D1_SubRegsSet,	Empty_SuperRegsSet },
  { "D2",	D2_Overlaps,	D2_SubRegsSet,	Empty_SuperRegsSet },
  { "D3",	D3_Overlaps,	D3_SubRegsSet,	Empty_SuperRegsSet },
  { "D4",	D4_Overlaps,	D4_SubRegsSet,	Empty_SuperRegsSet },
  { "D5",	D5_Overlaps,	D5_SubRegsSet,	Empty_SuperRegsSet },
  { "D6",	D6_Overlaps,	D6_SubRegsSet,	Empty_SuperRegsSet },
  { "D7",	D7_Overlaps,	D7_SubRegsSet,	Empty_SuperRegsSet },
  { "D8",	D8_Overlaps,	D8_SubRegsSet,	Empty_SuperRegsSet },
  { "D9",	D9_Overlaps,	D9_SubRegsSet,	Empty_SuperRegsSet },
  { "D10",	D10_Overlaps,	D10_SubRegsSet,	Empty_SuperRegsSet },
  { "D11",	D11_Overlaps,	D11_SubRegsSet,	Empty_SuperRegsSet },
  { "D12",	D12_Overlaps,	D12_SubRegsSet,	Empty_SuperRegsSet },
  { "D13",	D13_Overlaps,	D13_SubRegsSet,	Empty_SuperRegsSet },
  { "D14",	D14_Overlaps,	D14_SubRegsSet,	Empty_SuperRegsSet },
  { "D15",	D15_Overlaps,	D15_SubRegsSet,	Empty_SuperRegsSet },
  { "F0",	F0_Overlaps,	Empty_SubRegsSet,	F0_SuperRegsSet },
  { "F1",	F1_Overlaps,	Empty_SubRegsSet,	F1_SuperRegsSet },
  { "F2",	F2_Overlaps,	Empty_SubRegsSet,	F2_SuperRegsSet },
  { "F3",	F3_Overlaps,	Empty_SubRegsSet,	F3_SuperRegsSet },
  { "F4",	F4_Overlaps,	Empty_SubRegsSet,	F4_SuperRegsSet },
  { "F5",	F5_Overlaps,	Empty_SubRegsSet,	F5_SuperRegsSet },
  { "F6",	F6_Overlaps,	Empty_SubRegsSet,	F6_SuperRegsSet },
  { "F7",	F7_Overlaps,	Empty_SubRegsSet,	F7_SuperRegsSet },
  { "F8",	F8_Overlaps,	Empty_SubRegsSet,	F8_SuperRegsSet },
  { "F9",	F9_Overlaps,	Empty_SubRegsSet,	F9_SuperRegsSet },
  { "F10",	F10_Overlaps,	Empty_SubRegsSet,	F10_SuperRegsSet },
  { "F11",	F11_Overlaps,	Empty_SubRegsSet,	F11_SuperRegsSet },
  { "F12",	F12_Overlaps,	Empty_SubRegsSet,	F12_SuperRegsSet },
  { "F13",	F13_Overlaps,	Empty_SubRegsSet,	F13_SuperRegsSet },
  { "F14",	F14_Overlaps,	Empty_SubRegsSet,	F14_SuperRegsSet },
  { "F15",	F15_Overlaps,	Empty_SubRegsSet,	F15_SuperRegsSet },
  { "F16",	F16_Overlaps,	Empty_SubRegsSet,	F16_SuperRegsSet },
  { "F17",	F17_Overlaps,	Empty_SubRegsSet,	F17_SuperRegsSet },
  { "F18",	F18_Overlaps,	Empty_SubRegsSet,	F18_SuperRegsSet },
  { "F19",	F19_Overlaps,	Empty_SubRegsSet,	F19_SuperRegsSet },
  { "F20",	F20_Overlaps,	Empty_SubRegsSet,	F20_SuperRegsSet },
  { "F21",	F21_Overlaps,	Empty_SubRegsSet,	F21_SuperRegsSet },
  { "F22",	F22_Overlaps,	Empty_SubRegsSet,	F22_SuperRegsSet },
  { "F23",	F23_Overlaps,	Empty_SubRegsSet,	F23_SuperRegsSet },
  { "F24",	F24_Overlaps,	Empty_SubRegsSet,	F24_SuperRegsSet },
  { "F25",	F25_Overlaps,	Empty_SubRegsSet,	F25_SuperRegsSet },
  { "F26",	F26_Overlaps,	Empty_SubRegsSet,	F26_SuperRegsSet },
  { "F27",	F27_Overlaps,	Empty_SubRegsSet,	F27_SuperRegsSet },
  { "F28",	F28_Overlaps,	Empty_SubRegsSet,	F28_SuperRegsSet },
  { "F29",	F29_Overlaps,	Empty_SubRegsSet,	F29_SuperRegsSet },
  { "F30",	F30_Overlaps,	Empty_SubRegsSet,	F30_SuperRegsSet },
  { "F31",	F31_Overlaps,	Empty_SubRegsSet,	F31_SuperRegsSet },
  { "FCR31",	FCR31_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "FP",	FP_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "GP",	GP_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "HI",	HI_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "HWR29",	HWR29_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "K0",	K0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "K1",	K1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "LO",	LO_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "RA",	RA_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S0",	S0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S1",	S1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S2",	S2_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S3",	S3_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S4",	S4_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S5",	S5_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S6",	S6_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S7",	S7_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "SP",	SP_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T0",	T0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T1",	T1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T2",	T2_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T3",	T3_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T4",	T4_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T5",	T5_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T6",	T6_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T7",	T7_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T8",	T8_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "T9",	T9_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "V0",	V0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "V1",	V1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "ZERO",	ZERO_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
};

namespace {     // Register classes...
  // AFGR64 Register Class...
  static const unsigned AFGR64[] = {
    Mips::D0, Mips::D1, Mips::D6, Mips::D7, Mips::D2, Mips::D3, Mips::D4, Mips::D5, Mips::D8, Mips::D9, Mips::D10, Mips::D11, Mips::D12, Mips::D13, Mips::D14, Mips::D15, 
  };

  // AFGR64 Bit set.
  static const unsigned char AFGR64Bits[] = {
    0xc0, 0xff, 0x3f, 
  };

  // CCR Register Class...
  static const unsigned CCR[] = {
    Mips::FCR31, 
  };

  // CCR Bit set.
  static const unsigned char CCRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // CPURegs Register Class...
  static const unsigned CPURegs[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::T8, Mips::T9, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::ZERO, Mips::AT, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // CPURegs Bit set.
  static const unsigned char CPURegsBits[] = {
    0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xd9, 0xff, 0xff, 0x1f, 
  };

  // FGR32 Register Class...
  static const unsigned FGR32[] = {
    Mips::F0, Mips::F1, Mips::F2, Mips::F3, Mips::F4, Mips::F5, Mips::F6, Mips::F7, Mips::F8, Mips::F9, Mips::F10, Mips::F11, Mips::F12, Mips::F13, Mips::F14, Mips::F15, Mips::F16, Mips::F17, Mips::F18, Mips::F19, Mips::F20, Mips::F21, Mips::F22, Mips::F23, Mips::F24, Mips::F25, Mips::F26, Mips::F27, Mips::F28, Mips::F29, Mips::F30, Mips::F31, 
  };

  // FGR32 Bit set.
  static const unsigned char FGR32Bits[] = {
    0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // HILO Register Class...
  static const unsigned HILO[] = {
    Mips::HI, Mips::LO, 
  };

  // HILO Bit set.
  static const unsigned char HILOBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 
  };

  // HWRegs Register Class...
  static const unsigned HWRegs[] = {
    Mips::HWR29, 
  };

  // HWRegs Bit set.
  static const unsigned char HWRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };

}

MCRegisterClass MipsMCRegisterClasses[] = {
  MCRegisterClass(Mips::AFGR64RegClassID, "AFGR64", 8, 8, 1, 1, AFGR64, AFGR64 + 16, AFGR64Bits, sizeof(AFGR64Bits)),
  MCRegisterClass(Mips::CCRRegClassID, "CCR", 4, 4, 1, 1, CCR, CCR + 1, CCRBits, sizeof(CCRBits)),
  MCRegisterClass(Mips::CPURegsRegClassID, "CPURegs", 4, 4, 1, 1, CPURegs, CPURegs + 32, CPURegsBits, sizeof(CPURegsBits)),
  MCRegisterClass(Mips::FGR32RegClassID, "FGR32", 4, 4, 1, 1, FGR32, FGR32 + 32, FGR32Bits, sizeof(FGR32Bits)),
  MCRegisterClass(Mips::HILORegClassID, "HILO", 4, 4, 1, 1, HILO, HILO + 2, HILOBits, sizeof(HILOBits)),
  MCRegisterClass(Mips::HWRegsRegClassID, "HWRegs", 4, 4, 1, 1, HWRegs, HWRegs + 1, HWRegsBits, sizeof(HWRegsBits)),
};

static inline void InitMipsMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(MipsRegDesc, 85, RA, MipsMCRegisterClasses, 6);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(4, Mips::A0, false );
    RI->mapDwarfRegToLLVMReg(5, Mips::A1, false );
    RI->mapDwarfRegToLLVMReg(6, Mips::A2, false );
    RI->mapDwarfRegToLLVMReg(7, Mips::A3, false );
    RI->mapDwarfRegToLLVMReg(1, Mips::AT, false );
    RI->mapDwarfRegToLLVMReg(32, Mips::F0, false );
    RI->mapDwarfRegToLLVMReg(33, Mips::F1, false );
    RI->mapDwarfRegToLLVMReg(34, Mips::F2, false );
    RI->mapDwarfRegToLLVMReg(35, Mips::F3, false );
    RI->mapDwarfRegToLLVMReg(36, Mips::F4, false );
    RI->mapDwarfRegToLLVMReg(37, Mips::F5, false );
    RI->mapDwarfRegToLLVMReg(38, Mips::F6, false );
    RI->mapDwarfRegToLLVMReg(39, Mips::F7, false );
    RI->mapDwarfRegToLLVMReg(40, Mips::F8, false );
    RI->mapDwarfRegToLLVMReg(41, Mips::F9, false );
    RI->mapDwarfRegToLLVMReg(42, Mips::F10, false );
    RI->mapDwarfRegToLLVMReg(43, Mips::F11, false );
    RI->mapDwarfRegToLLVMReg(44, Mips::F12, false );
    RI->mapDwarfRegToLLVMReg(45, Mips::F13, false );
    RI->mapDwarfRegToLLVMReg(46, Mips::F14, false );
    RI->mapDwarfRegToLLVMReg(47, Mips::F15, false );
    RI->mapDwarfRegToLLVMReg(48, Mips::F16, false );
    RI->mapDwarfRegToLLVMReg(49, Mips::F17, false );
    RI->mapDwarfRegToLLVMReg(50, Mips::F18, false );
    RI->mapDwarfRegToLLVMReg(51, Mips::F19, false );
    RI->mapDwarfRegToLLVMReg(52, Mips::F20, false );
    RI->mapDwarfRegToLLVMReg(53, Mips::F21, false );
    RI->mapDwarfRegToLLVMReg(54, Mips::F22, false );
    RI->mapDwarfRegToLLVMReg(55, Mips::F23, false );
    RI->mapDwarfRegToLLVMReg(56, Mips::F24, false );
    RI->mapDwarfRegToLLVMReg(57, Mips::F25, false );
    RI->mapDwarfRegToLLVMReg(58, Mips::F26, false );
    RI->mapDwarfRegToLLVMReg(59, Mips::F27, false );
    RI->mapDwarfRegToLLVMReg(60, Mips::F28, false );
    RI->mapDwarfRegToLLVMReg(61, Mips::F29, false );
    RI->mapDwarfRegToLLVMReg(62, Mips::F30, false );
    RI->mapDwarfRegToLLVMReg(63, Mips::F31, false );
    RI->mapDwarfRegToLLVMReg(30, Mips::FP, false );
    RI->mapDwarfRegToLLVMReg(28, Mips::GP, false );
    RI->mapDwarfRegToLLVMReg(64, Mips::HI, false );
    RI->mapDwarfRegToLLVMReg(26, Mips::K0, false );
    RI->mapDwarfRegToLLVMReg(27, Mips::K1, false );
    RI->mapDwarfRegToLLVMReg(65, Mips::LO, false );
    RI->mapDwarfRegToLLVMReg(31, Mips::RA, false );
    RI->mapDwarfRegToLLVMReg(16, Mips::S0, false );
    RI->mapDwarfRegToLLVMReg(17, Mips::S1, false );
    RI->mapDwarfRegToLLVMReg(18, Mips::S2, false );
    RI->mapDwarfRegToLLVMReg(19, Mips::S3, false );
    RI->mapDwarfRegToLLVMReg(20, Mips::S4, false );
    RI->mapDwarfRegToLLVMReg(21, Mips::S5, false );
    RI->mapDwarfRegToLLVMReg(22, Mips::S6, false );
    RI->mapDwarfRegToLLVMReg(23, Mips::S7, false );
    RI->mapDwarfRegToLLVMReg(29, Mips::SP, false );
    RI->mapDwarfRegToLLVMReg(8, Mips::T0, false );
    RI->mapDwarfRegToLLVMReg(9, Mips::T1, false );
    RI->mapDwarfRegToLLVMReg(10, Mips::T2, false );
    RI->mapDwarfRegToLLVMReg(11, Mips::T3, false );
    RI->mapDwarfRegToLLVMReg(12, Mips::T4, false );
    RI->mapDwarfRegToLLVMReg(13, Mips::T5, false );
    RI->mapDwarfRegToLLVMReg(14, Mips::T6, false );
    RI->mapDwarfRegToLLVMReg(15, Mips::T7, false );
    RI->mapDwarfRegToLLVMReg(24, Mips::T8, false );
    RI->mapDwarfRegToLLVMReg(25, Mips::T9, false );
    RI->mapDwarfRegToLLVMReg(2, Mips::V0, false );
    RI->mapDwarfRegToLLVMReg(3, Mips::V1, false );
    RI->mapDwarfRegToLLVMReg(0, Mips::ZERO, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(4, Mips::A0, true );
    RI->mapDwarfRegToLLVMReg(5, Mips::A1, true );
    RI->mapDwarfRegToLLVMReg(6, Mips::A2, true );
    RI->mapDwarfRegToLLVMReg(7, Mips::A3, true );
    RI->mapDwarfRegToLLVMReg(1, Mips::AT, true );
    RI->mapDwarfRegToLLVMReg(32, Mips::F0, true );
    RI->mapDwarfRegToLLVMReg(33, Mips::F1, true );
    RI->mapDwarfRegToLLVMReg(34, Mips::F2, true );
    RI->mapDwarfRegToLLVMReg(35, Mips::F3, true );
    RI->mapDwarfRegToLLVMReg(36, Mips::F4, true );
    RI->mapDwarfRegToLLVMReg(37, Mips::F5, true );
    RI->mapDwarfRegToLLVMReg(38, Mips::F6, true );
    RI->mapDwarfRegToLLVMReg(39, Mips::F7, true );
    RI->mapDwarfRegToLLVMReg(40, Mips::F8, true );
    RI->mapDwarfRegToLLVMReg(41, Mips::F9, true );
    RI->mapDwarfRegToLLVMReg(42, Mips::F10, true );
    RI->mapDwarfRegToLLVMReg(43, Mips::F11, true );
    RI->mapDwarfRegToLLVMReg(44, Mips::F12, true );
    RI->mapDwarfRegToLLVMReg(45, Mips::F13, true );
    RI->mapDwarfRegToLLVMReg(46, Mips::F14, true );
    RI->mapDwarfRegToLLVMReg(47, Mips::F15, true );
    RI->mapDwarfRegToLLVMReg(48, Mips::F16, true );
    RI->mapDwarfRegToLLVMReg(49, Mips::F17, true );
    RI->mapDwarfRegToLLVMReg(50, Mips::F18, true );
    RI->mapDwarfRegToLLVMReg(51, Mips::F19, true );
    RI->mapDwarfRegToLLVMReg(52, Mips::F20, true );
    RI->mapDwarfRegToLLVMReg(53, Mips::F21, true );
    RI->mapDwarfRegToLLVMReg(54, Mips::F22, true );
    RI->mapDwarfRegToLLVMReg(55, Mips::F23, true );
    RI->mapDwarfRegToLLVMReg(56, Mips::F24, true );
    RI->mapDwarfRegToLLVMReg(57, Mips::F25, true );
    RI->mapDwarfRegToLLVMReg(58, Mips::F26, true );
    RI->mapDwarfRegToLLVMReg(59, Mips::F27, true );
    RI->mapDwarfRegToLLVMReg(60, Mips::F28, true );
    RI->mapDwarfRegToLLVMReg(61, Mips::F29, true );
    RI->mapDwarfRegToLLVMReg(62, Mips::F30, true );
    RI->mapDwarfRegToLLVMReg(63, Mips::F31, true );
    RI->mapDwarfRegToLLVMReg(30, Mips::FP, true );
    RI->mapDwarfRegToLLVMReg(28, Mips::GP, true );
    RI->mapDwarfRegToLLVMReg(64, Mips::HI, true );
    RI->mapDwarfRegToLLVMReg(26, Mips::K0, true );
    RI->mapDwarfRegToLLVMReg(27, Mips::K1, true );
    RI->mapDwarfRegToLLVMReg(65, Mips::LO, true );
    RI->mapDwarfRegToLLVMReg(31, Mips::RA, true );
    RI->mapDwarfRegToLLVMReg(16, Mips::S0, true );
    RI->mapDwarfRegToLLVMReg(17, Mips::S1, true );
    RI->mapDwarfRegToLLVMReg(18, Mips::S2, true );
    RI->mapDwarfRegToLLVMReg(19, Mips::S3, true );
    RI->mapDwarfRegToLLVMReg(20, Mips::S4, true );
    RI->mapDwarfRegToLLVMReg(21, Mips::S5, true );
    RI->mapDwarfRegToLLVMReg(22, Mips::S6, true );
    RI->mapDwarfRegToLLVMReg(23, Mips::S7, true );
    RI->mapDwarfRegToLLVMReg(29, Mips::SP, true );
    RI->mapDwarfRegToLLVMReg(8, Mips::T0, true );
    RI->mapDwarfRegToLLVMReg(9, Mips::T1, true );
    RI->mapDwarfRegToLLVMReg(10, Mips::T2, true );
    RI->mapDwarfRegToLLVMReg(11, Mips::T3, true );
    RI->mapDwarfRegToLLVMReg(12, Mips::T4, true );
    RI->mapDwarfRegToLLVMReg(13, Mips::T5, true );
    RI->mapDwarfRegToLLVMReg(14, Mips::T6, true );
    RI->mapDwarfRegToLLVMReg(15, Mips::T7, true );
    RI->mapDwarfRegToLLVMReg(24, Mips::T8, true );
    RI->mapDwarfRegToLLVMReg(25, Mips::T9, true );
    RI->mapDwarfRegToLLVMReg(2, Mips::V0, true );
    RI->mapDwarfRegToLLVMReg(3, Mips::V1, true );
    RI->mapDwarfRegToLLVMReg(0, Mips::ZERO, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Mips::A0, 4, false );
    RI->mapLLVMRegToDwarfReg(Mips::A1, 5, false );
    RI->mapLLVMRegToDwarfReg(Mips::A2, 6, false );
    RI->mapLLVMRegToDwarfReg(Mips::A3, 7, false );
    RI->mapLLVMRegToDwarfReg(Mips::AT, 1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D0, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D1, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D2, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D3, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D4, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D5, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D6, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D7, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D8, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D9, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D10, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D11, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D12, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D13, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D14, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D15, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::F0, 32, false );
    RI->mapLLVMRegToDwarfReg(Mips::F1, 33, false );
    RI->mapLLVMRegToDwarfReg(Mips::F2, 34, false );
    RI->mapLLVMRegToDwarfReg(Mips::F3, 35, false );
    RI->mapLLVMRegToDwarfReg(Mips::F4, 36, false );
    RI->mapLLVMRegToDwarfReg(Mips::F5, 37, false );
    RI->mapLLVMRegToDwarfReg(Mips::F6, 38, false );
    RI->mapLLVMRegToDwarfReg(Mips::F7, 39, false );
    RI->mapLLVMRegToDwarfReg(Mips::F8, 40, false );
    RI->mapLLVMRegToDwarfReg(Mips::F9, 41, false );
    RI->mapLLVMRegToDwarfReg(Mips::F10, 42, false );
    RI->mapLLVMRegToDwarfReg(Mips::F11, 43, false );
    RI->mapLLVMRegToDwarfReg(Mips::F12, 44, false );
    RI->mapLLVMRegToDwarfReg(Mips::F13, 45, false );
    RI->mapLLVMRegToDwarfReg(Mips::F14, 46, false );
    RI->mapLLVMRegToDwarfReg(Mips::F15, 47, false );
    RI->mapLLVMRegToDwarfReg(Mips::F16, 48, false );
    RI->mapLLVMRegToDwarfReg(Mips::F17, 49, false );
    RI->mapLLVMRegToDwarfReg(Mips::F18, 50, false );
    RI->mapLLVMRegToDwarfReg(Mips::F19, 51, false );
    RI->mapLLVMRegToDwarfReg(Mips::F20, 52, false );
    RI->mapLLVMRegToDwarfReg(Mips::F21, 53, false );
    RI->mapLLVMRegToDwarfReg(Mips::F22, 54, false );
    RI->mapLLVMRegToDwarfReg(Mips::F23, 55, false );
    RI->mapLLVMRegToDwarfReg(Mips::F24, 56, false );
    RI->mapLLVMRegToDwarfReg(Mips::F25, 57, false );
    RI->mapLLVMRegToDwarfReg(Mips::F26, 58, false );
    RI->mapLLVMRegToDwarfReg(Mips::F27, 59, false );
    RI->mapLLVMRegToDwarfReg(Mips::F28, 60, false );
    RI->mapLLVMRegToDwarfReg(Mips::F29, 61, false );
    RI->mapLLVMRegToDwarfReg(Mips::F30, 62, false );
    RI->mapLLVMRegToDwarfReg(Mips::F31, 63, false );
    RI->mapLLVMRegToDwarfReg(Mips::FCR31, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::FP, 30, false );
    RI->mapLLVMRegToDwarfReg(Mips::GP, 28, false );
    RI->mapLLVMRegToDwarfReg(Mips::HI, 64, false );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::K0, 26, false );
    RI->mapLLVMRegToDwarfReg(Mips::K1, 27, false );
    RI->mapLLVMRegToDwarfReg(Mips::LO, 65, false );
    RI->mapLLVMRegToDwarfReg(Mips::RA, 31, false );
    RI->mapLLVMRegToDwarfReg(Mips::S0, 16, false );
    RI->mapLLVMRegToDwarfReg(Mips::S1, 17, false );
    RI->mapLLVMRegToDwarfReg(Mips::S2, 18, false );
    RI->mapLLVMRegToDwarfReg(Mips::S3, 19, false );
    RI->mapLLVMRegToDwarfReg(Mips::S4, 20, false );
    RI->mapLLVMRegToDwarfReg(Mips::S5, 21, false );
    RI->mapLLVMRegToDwarfReg(Mips::S6, 22, false );
    RI->mapLLVMRegToDwarfReg(Mips::S7, 23, false );
    RI->mapLLVMRegToDwarfReg(Mips::SP, 29, false );
    RI->mapLLVMRegToDwarfReg(Mips::T0, 8, false );
    RI->mapLLVMRegToDwarfReg(Mips::T1, 9, false );
    RI->mapLLVMRegToDwarfReg(Mips::T2, 10, false );
    RI->mapLLVMRegToDwarfReg(Mips::T3, 11, false );
    RI->mapLLVMRegToDwarfReg(Mips::T4, 12, false );
    RI->mapLLVMRegToDwarfReg(Mips::T5, 13, false );
    RI->mapLLVMRegToDwarfReg(Mips::T6, 14, false );
    RI->mapLLVMRegToDwarfReg(Mips::T7, 15, false );
    RI->mapLLVMRegToDwarfReg(Mips::T8, 24, false );
    RI->mapLLVMRegToDwarfReg(Mips::T9, 25, false );
    RI->mapLLVMRegToDwarfReg(Mips::V0, 2, false );
    RI->mapLLVMRegToDwarfReg(Mips::V1, 3, false );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO, 0, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Mips::A0, 4, true );
    RI->mapLLVMRegToDwarfReg(Mips::A1, 5, true );
    RI->mapLLVMRegToDwarfReg(Mips::A2, 6, true );
    RI->mapLLVMRegToDwarfReg(Mips::A3, 7, true );
    RI->mapLLVMRegToDwarfReg(Mips::AT, 1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D0, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D1, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D2, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D3, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D4, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D5, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D6, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D7, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D8, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D9, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D10, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D11, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D12, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D13, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D14, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D15, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::F0, 32, true );
    RI->mapLLVMRegToDwarfReg(Mips::F1, 33, true );
    RI->mapLLVMRegToDwarfReg(Mips::F2, 34, true );
    RI->mapLLVMRegToDwarfReg(Mips::F3, 35, true );
    RI->mapLLVMRegToDwarfReg(Mips::F4, 36, true );
    RI->mapLLVMRegToDwarfReg(Mips::F5, 37, true );
    RI->mapLLVMRegToDwarfReg(Mips::F6, 38, true );
    RI->mapLLVMRegToDwarfReg(Mips::F7, 39, true );
    RI->mapLLVMRegToDwarfReg(Mips::F8, 40, true );
    RI->mapLLVMRegToDwarfReg(Mips::F9, 41, true );
    RI->mapLLVMRegToDwarfReg(Mips::F10, 42, true );
    RI->mapLLVMRegToDwarfReg(Mips::F11, 43, true );
    RI->mapLLVMRegToDwarfReg(Mips::F12, 44, true );
    RI->mapLLVMRegToDwarfReg(Mips::F13, 45, true );
    RI->mapLLVMRegToDwarfReg(Mips::F14, 46, true );
    RI->mapLLVMRegToDwarfReg(Mips::F15, 47, true );
    RI->mapLLVMRegToDwarfReg(Mips::F16, 48, true );
    RI->mapLLVMRegToDwarfReg(Mips::F17, 49, true );
    RI->mapLLVMRegToDwarfReg(Mips::F18, 50, true );
    RI->mapLLVMRegToDwarfReg(Mips::F19, 51, true );
    RI->mapLLVMRegToDwarfReg(Mips::F20, 52, true );
    RI->mapLLVMRegToDwarfReg(Mips::F21, 53, true );
    RI->mapLLVMRegToDwarfReg(Mips::F22, 54, true );
    RI->mapLLVMRegToDwarfReg(Mips::F23, 55, true );
    RI->mapLLVMRegToDwarfReg(Mips::F24, 56, true );
    RI->mapLLVMRegToDwarfReg(Mips::F25, 57, true );
    RI->mapLLVMRegToDwarfReg(Mips::F26, 58, true );
    RI->mapLLVMRegToDwarfReg(Mips::F27, 59, true );
    RI->mapLLVMRegToDwarfReg(Mips::F28, 60, true );
    RI->mapLLVMRegToDwarfReg(Mips::F29, 61, true );
    RI->mapLLVMRegToDwarfReg(Mips::F30, 62, true );
    RI->mapLLVMRegToDwarfReg(Mips::F31, 63, true );
    RI->mapLLVMRegToDwarfReg(Mips::FCR31, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::FP, 30, true );
    RI->mapLLVMRegToDwarfReg(Mips::GP, 28, true );
    RI->mapLLVMRegToDwarfReg(Mips::HI, 64, true );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::K0, 26, true );
    RI->mapLLVMRegToDwarfReg(Mips::K1, 27, true );
    RI->mapLLVMRegToDwarfReg(Mips::LO, 65, true );
    RI->mapLLVMRegToDwarfReg(Mips::RA, 31, true );
    RI->mapLLVMRegToDwarfReg(Mips::S0, 16, true );
    RI->mapLLVMRegToDwarfReg(Mips::S1, 17, true );
    RI->mapLLVMRegToDwarfReg(Mips::S2, 18, true );
    RI->mapLLVMRegToDwarfReg(Mips::S3, 19, true );
    RI->mapLLVMRegToDwarfReg(Mips::S4, 20, true );
    RI->mapLLVMRegToDwarfReg(Mips::S5, 21, true );
    RI->mapLLVMRegToDwarfReg(Mips::S6, 22, true );
    RI->mapLLVMRegToDwarfReg(Mips::S7, 23, true );
    RI->mapLLVMRegToDwarfReg(Mips::SP, 29, true );
    RI->mapLLVMRegToDwarfReg(Mips::T0, 8, true );
    RI->mapLLVMRegToDwarfReg(Mips::T1, 9, true );
    RI->mapLLVMRegToDwarfReg(Mips::T2, 10, true );
    RI->mapLLVMRegToDwarfReg(Mips::T3, 11, true );
    RI->mapLLVMRegToDwarfReg(Mips::T4, 12, true );
    RI->mapLLVMRegToDwarfReg(Mips::T5, 13, true );
    RI->mapLLVMRegToDwarfReg(Mips::T6, 14, true );
    RI->mapLLVMRegToDwarfReg(Mips::T7, 15, true );
    RI->mapLLVMRegToDwarfReg(Mips::T8, 24, true );
    RI->mapLLVMRegToDwarfReg(Mips::T9, 25, true );
    RI->mapLLVMRegToDwarfReg(Mips::V0, 2, true );
    RI->mapLLVMRegToDwarfReg(Mips::V1, 3, true );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO, 0, true );
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Header Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"
#include <string>

namespace llvm {

struct MipsGenRegisterInfo : public TargetRegisterInfo {
  explicit MipsGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  unsigned getSubReg(unsigned RegNo, unsigned Index) const;
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const;
  unsigned composeSubRegIndices(unsigned, unsigned) const;
};


// Subregister indices
namespace Mips {
enum {
  NoSubRegister,
  sub_fpeven,	// 1
  sub_fpodd,	// 2
  NUM_TARGET_NAMED_SUBREGS = 3
};
}
namespace Mips { // Register classes
  struct AFGR64Class : public TargetRegisterClass {
    AFGR64Class();
  };
  extern AFGR64Class	AFGR64RegClass;
  static TargetRegisterClass * const AFGR64RegisterClass = &AFGR64RegClass;
  struct CCRClass : public TargetRegisterClass {
    CCRClass();
  };
  extern CCRClass	CCRRegClass;
  static TargetRegisterClass * const CCRRegisterClass = &CCRRegClass;
  struct CPURegsClass : public TargetRegisterClass {
    CPURegsClass();
  };
  extern CPURegsClass	CPURegsRegClass;
  static TargetRegisterClass * const CPURegsRegisterClass = &CPURegsRegClass;
  struct FGR32Class : public TargetRegisterClass {
    FGR32Class();
  };
  extern FGR32Class	FGR32RegClass;
  static TargetRegisterClass * const FGR32RegisterClass = &FGR32RegClass;
  struct HILOClass : public TargetRegisterClass {
    HILOClass();
  };
  extern HILOClass	HILORegClass;
  static TargetRegisterClass * const HILORegisterClass = &HILORegClass;
  struct HWRegsClass : public TargetRegisterClass {
    HWRegsClass();
  };
  extern HWRegsClass	HWRegsRegClass;
  static TargetRegisterClass * const HWRegsRegisterClass = &HWRegsRegClass;
} // end of namespace Mips

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register and Register Classes Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern MCRegisterClass MipsMCRegisterClasses[];
namespace {     // Register classes...
  // AFGR64VTs Register Class Value Types...
  static const EVT AFGR64VTs[] = {
    MVT::f64, MVT::Other
  };

  // CCRVTs Register Class Value Types...
  static const EVT CCRVTs[] = {
    MVT::i32, MVT::Other
  };

  // CPURegsVTs Register Class Value Types...
  static const EVT CPURegsVTs[] = {
    MVT::i32, MVT::Other
  };

  // FGR32VTs Register Class Value Types...
  static const EVT FGR32VTs[] = {
    MVT::f32, MVT::Other
  };

  // HILOVTs Register Class Value Types...
  static const EVT HILOVTs[] = {
    MVT::i32, MVT::Other
  };

  // HWRegsVTs Register Class Value Types...
  static const EVT HWRegsVTs[] = {
    MVT::i32, MVT::Other
  };

}  // end anonymous namespace

namespace Mips {   // Register class instances
  AFGR64Class	AFGR64RegClass;
  CCRClass	CCRRegClass;
  CPURegsClass	CPURegsRegClass;
  FGR32Class	FGR32RegClass;
  HILOClass	HILORegClass;
  HWRegsClass	HWRegsRegClass;

  // AFGR64 Sub-register Classes...
  static const TargetRegisterClass* const AFGR64SubRegClasses[] = {
    &Mips::FGR32RegClass, &Mips::FGR32RegClass
  };

  // CCR Sub-register Classes...
  static const TargetRegisterClass* const CCRSubRegClasses[] = {
    0, 0
  };

  // CPURegs Sub-register Classes...
  static const TargetRegisterClass* const CPURegsSubRegClasses[] = {
    0, 0
  };

  // FGR32 Sub-register Classes...
  static const TargetRegisterClass* const FGR32SubRegClasses[] = {
    0, 0
  };

  // HILO Sub-register Classes...
  static const TargetRegisterClass* const HILOSubRegClasses[] = {
    0, 0
  };

  // HWRegs Sub-register Classes...
  static const TargetRegisterClass* const HWRegsSubRegClasses[] = {
    0, 0
  };

  // AFGR64 Super-register Classes...
  static const TargetRegisterClass* const AFGR64SuperRegClasses[] = {
    NULL
  };

  // CCR Super-register Classes...
  static const TargetRegisterClass* const CCRSuperRegClasses[] = {
    NULL
  };

  // CPURegs Super-register Classes...
  static const TargetRegisterClass* const CPURegsSuperRegClasses[] = {
    NULL
  };

  // FGR32 Super-register Classes...
  static const TargetRegisterClass* const FGR32SuperRegClasses[] = {
    &Mips::AFGR64RegClass, NULL
  };

  // HILO Super-register Classes...
  static const TargetRegisterClass* const HILOSuperRegClasses[] = {
    NULL
  };

  // HWRegs Super-register Classes...
  static const TargetRegisterClass* const HWRegsSuperRegClasses[] = {
    NULL
  };

  // AFGR64 Register Class sub-classes...
  static const TargetRegisterClass* const AFGR64Subclasses[] = {
    NULL
  };

  // CCR Register Class sub-classes...
  static const TargetRegisterClass* const CCRSubclasses[] = {
    NULL
  };

  // CPURegs Register Class sub-classes...
  static const TargetRegisterClass* const CPURegsSubclasses[] = {
    NULL
  };

  // FGR32 Register Class sub-classes...
  static const TargetRegisterClass* const FGR32Subclasses[] = {
    NULL
  };

  // HILO Register Class sub-classes...
  static const TargetRegisterClass* const HILOSubclasses[] = {
    NULL
  };

  // HWRegs Register Class sub-classes...
  static const TargetRegisterClass* const HWRegsSubclasses[] = {
    NULL
  };

  // AFGR64 Register Class super-classes...
  static const TargetRegisterClass* const AFGR64Superclasses[] = {
    NULL
  };

  // CCR Register Class super-classes...
  static const TargetRegisterClass* const CCRSuperclasses[] = {
    NULL
  };

  // CPURegs Register Class super-classes...
  static const TargetRegisterClass* const CPURegsSuperclasses[] = {
    NULL
  };

  // FGR32 Register Class super-classes...
  static const TargetRegisterClass* const FGR32Superclasses[] = {
    NULL
  };

  // HILO Register Class super-classes...
  static const TargetRegisterClass* const HILOSuperclasses[] = {
    NULL
  };

  // HWRegs Register Class super-classes...
  static const TargetRegisterClass* const HWRegsSuperclasses[] = {
    NULL
  };

AFGR64Class::AFGR64Class()  : TargetRegisterClass(&MipsMCRegisterClasses[AFGR64RegClassID], AFGR64VTs, AFGR64Subclasses, AFGR64Superclasses, AFGR64SubRegClasses, AFGR64SuperRegClasses) {}
CCRClass::CCRClass()  : TargetRegisterClass(&MipsMCRegisterClasses[CCRRegClassID], CCRVTs, CCRSubclasses, CCRSuperclasses, CCRSubRegClasses, CCRSuperRegClasses) {}
CPURegsClass::CPURegsClass()  : TargetRegisterClass(&MipsMCRegisterClasses[CPURegsRegClassID], CPURegsVTs, CPURegsSubclasses, CPURegsSuperclasses, CPURegsSubRegClasses, CPURegsSuperRegClasses) {}
FGR32Class::FGR32Class()  : TargetRegisterClass(&MipsMCRegisterClasses[FGR32RegClassID], FGR32VTs, FGR32Subclasses, FGR32Superclasses, FGR32SubRegClasses, FGR32SuperRegClasses) {}
HILOClass::HILOClass()  : TargetRegisterClass(&MipsMCRegisterClasses[HILORegClassID], HILOVTs, HILOSubclasses, HILOSuperclasses, HILOSubRegClasses, HILOSuperRegClasses) {}
HWRegsClass::HWRegsClass()  : TargetRegisterClass(&MipsMCRegisterClasses[HWRegsRegClassID], HWRegsVTs, HWRegsSubclasses, HWRegsSuperclasses, HWRegsSubRegClasses, HWRegsSuperRegClasses) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Mips::AFGR64RegClass,
    &Mips::CCRRegClass,
    &Mips::CPURegsRegClass,
    &Mips::FGR32RegClass,
    &Mips::HILORegClass,
    &Mips::HWRegsRegClass,
  };
}

  static const TargetRegisterInfoDesc MipsRegInfoDesc[] = { // Extra Descriptors
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
  };

  static const char *const MipsSubRegIndexTable[] = { "sub_fpeven", "sub_fpodd" };


unsigned MipsGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  case Mips::D0:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F0;
    case Mips::sub_fpodd: return Mips::F1;
    };
    break;
  case Mips::D1:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F2;
    case Mips::sub_fpodd: return Mips::F3;
    };
    break;
  case Mips::D2:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F4;
    case Mips::sub_fpodd: return Mips::F5;
    };
    break;
  case Mips::D3:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F6;
    case Mips::sub_fpodd: return Mips::F7;
    };
    break;
  case Mips::D4:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F8;
    case Mips::sub_fpodd: return Mips::F9;
    };
    break;
  case Mips::D5:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F10;
    case Mips::sub_fpodd: return Mips::F11;
    };
    break;
  case Mips::D6:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F12;
    case Mips::sub_fpodd: return Mips::F13;
    };
    break;
  case Mips::D7:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F14;
    case Mips::sub_fpodd: return Mips::F15;
    };
    break;
  case Mips::D8:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F16;
    case Mips::sub_fpodd: return Mips::F17;
    };
    break;
  case Mips::D9:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F18;
    case Mips::sub_fpodd: return Mips::F19;
    };
    break;
  case Mips::D10:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F20;
    case Mips::sub_fpodd: return Mips::F21;
    };
    break;
  case Mips::D11:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F22;
    case Mips::sub_fpodd: return Mips::F23;
    };
    break;
  case Mips::D12:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F24;
    case Mips::sub_fpodd: return Mips::F25;
    };
    break;
  case Mips::D13:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F26;
    case Mips::sub_fpodd: return Mips::F27;
    };
    break;
  case Mips::D14:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F28;
    case Mips::sub_fpodd: return Mips::F29;
    };
    break;
  case Mips::D15:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F30;
    case Mips::sub_fpodd: return Mips::F31;
    };
    break;
  };
  return 0;
}

unsigned MipsGenRegisterInfo::getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
  switch (RegNo) {
  default:
    return 0;
  case Mips::D0:
    if (SubRegNo == Mips::F0)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F1)  return Mips::sub_fpodd;
    return 0;
  case Mips::D1:
    if (SubRegNo == Mips::F2)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F3)  return Mips::sub_fpodd;
    return 0;
  case Mips::D2:
    if (SubRegNo == Mips::F4)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F5)  return Mips::sub_fpodd;
    return 0;
  case Mips::D3:
    if (SubRegNo == Mips::F6)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F7)  return Mips::sub_fpodd;
    return 0;
  case Mips::D4:
    if (SubRegNo == Mips::F8)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F9)  return Mips::sub_fpodd;
    return 0;
  case Mips::D5:
    if (SubRegNo == Mips::F10)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F11)  return Mips::sub_fpodd;
    return 0;
  case Mips::D6:
    if (SubRegNo == Mips::F12)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F13)  return Mips::sub_fpodd;
    return 0;
  case Mips::D7:
    if (SubRegNo == Mips::F14)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F15)  return Mips::sub_fpodd;
    return 0;
  case Mips::D8:
    if (SubRegNo == Mips::F16)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F17)  return Mips::sub_fpodd;
    return 0;
  case Mips::D9:
    if (SubRegNo == Mips::F18)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F19)  return Mips::sub_fpodd;
    return 0;
  case Mips::D10:
    if (SubRegNo == Mips::F20)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F21)  return Mips::sub_fpodd;
    return 0;
  case Mips::D11:
    if (SubRegNo == Mips::F22)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F23)  return Mips::sub_fpodd;
    return 0;
  case Mips::D12:
    if (SubRegNo == Mips::F24)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F25)  return Mips::sub_fpodd;
    return 0;
  case Mips::D13:
    if (SubRegNo == Mips::F26)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F27)  return Mips::sub_fpodd;
    return 0;
  case Mips::D14:
    if (SubRegNo == Mips::F28)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F29)  return Mips::sub_fpodd;
    return 0;
  case Mips::D15:
    if (SubRegNo == Mips::F30)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F31)  return Mips::sub_fpodd;
    return 0;
  };
  return 0;
}

unsigned MipsGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  }
}

extern MCRegisterDesc MipsRegDesc[];
MipsGenRegisterInfo::MipsGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(MipsRegInfoDesc, RegisterClasses, RegisterClasses+6,
                 MipsSubRegIndexTable) {
  InitMCRegisterInfo(MipsRegDesc, 85, RA, MipsMCRegisterClasses, 6);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(4, Mips::A0, false );
    mapDwarfRegToLLVMReg(5, Mips::A1, false );
    mapDwarfRegToLLVMReg(6, Mips::A2, false );
    mapDwarfRegToLLVMReg(7, Mips::A3, false );
    mapDwarfRegToLLVMReg(1, Mips::AT, false );
    mapDwarfRegToLLVMReg(32, Mips::F0, false );
    mapDwarfRegToLLVMReg(33, Mips::F1, false );
    mapDwarfRegToLLVMReg(34, Mips::F2, false );
    mapDwarfRegToLLVMReg(35, Mips::F3, false );
    mapDwarfRegToLLVMReg(36, Mips::F4, false );
    mapDwarfRegToLLVMReg(37, Mips::F5, false );
    mapDwarfRegToLLVMReg(38, Mips::F6, false );
    mapDwarfRegToLLVMReg(39, Mips::F7, false );
    mapDwarfRegToLLVMReg(40, Mips::F8, false );
    mapDwarfRegToLLVMReg(41, Mips::F9, false );
    mapDwarfRegToLLVMReg(42, Mips::F10, false );
    mapDwarfRegToLLVMReg(43, Mips::F11, false );
    mapDwarfRegToLLVMReg(44, Mips::F12, false );
    mapDwarfRegToLLVMReg(45, Mips::F13, false );
    mapDwarfRegToLLVMReg(46, Mips::F14, false );
    mapDwarfRegToLLVMReg(47, Mips::F15, false );
    mapDwarfRegToLLVMReg(48, Mips::F16, false );
    mapDwarfRegToLLVMReg(49, Mips::F17, false );
    mapDwarfRegToLLVMReg(50, Mips::F18, false );
    mapDwarfRegToLLVMReg(51, Mips::F19, false );
    mapDwarfRegToLLVMReg(52, Mips::F20, false );
    mapDwarfRegToLLVMReg(53, Mips::F21, false );
    mapDwarfRegToLLVMReg(54, Mips::F22, false );
    mapDwarfRegToLLVMReg(55, Mips::F23, false );
    mapDwarfRegToLLVMReg(56, Mips::F24, false );
    mapDwarfRegToLLVMReg(57, Mips::F25, false );
    mapDwarfRegToLLVMReg(58, Mips::F26, false );
    mapDwarfRegToLLVMReg(59, Mips::F27, false );
    mapDwarfRegToLLVMReg(60, Mips::F28, false );
    mapDwarfRegToLLVMReg(61, Mips::F29, false );
    mapDwarfRegToLLVMReg(62, Mips::F30, false );
    mapDwarfRegToLLVMReg(63, Mips::F31, false );
    mapDwarfRegToLLVMReg(30, Mips::FP, false );
    mapDwarfRegToLLVMReg(28, Mips::GP, false );
    mapDwarfRegToLLVMReg(64, Mips::HI, false );
    mapDwarfRegToLLVMReg(26, Mips::K0, false );
    mapDwarfRegToLLVMReg(27, Mips::K1, false );
    mapDwarfRegToLLVMReg(65, Mips::LO, false );
    mapDwarfRegToLLVMReg(31, Mips::RA, false );
    mapDwarfRegToLLVMReg(16, Mips::S0, false );
    mapDwarfRegToLLVMReg(17, Mips::S1, false );
    mapDwarfRegToLLVMReg(18, Mips::S2, false );
    mapDwarfRegToLLVMReg(19, Mips::S3, false );
    mapDwarfRegToLLVMReg(20, Mips::S4, false );
    mapDwarfRegToLLVMReg(21, Mips::S5, false );
    mapDwarfRegToLLVMReg(22, Mips::S6, false );
    mapDwarfRegToLLVMReg(23, Mips::S7, false );
    mapDwarfRegToLLVMReg(29, Mips::SP, false );
    mapDwarfRegToLLVMReg(8, Mips::T0, false );
    mapDwarfRegToLLVMReg(9, Mips::T1, false );
    mapDwarfRegToLLVMReg(10, Mips::T2, false );
    mapDwarfRegToLLVMReg(11, Mips::T3, false );
    mapDwarfRegToLLVMReg(12, Mips::T4, false );
    mapDwarfRegToLLVMReg(13, Mips::T5, false );
    mapDwarfRegToLLVMReg(14, Mips::T6, false );
    mapDwarfRegToLLVMReg(15, Mips::T7, false );
    mapDwarfRegToLLVMReg(24, Mips::T8, false );
    mapDwarfRegToLLVMReg(25, Mips::T9, false );
    mapDwarfRegToLLVMReg(2, Mips::V0, false );
    mapDwarfRegToLLVMReg(3, Mips::V1, false );
    mapDwarfRegToLLVMReg(0, Mips::ZERO, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(4, Mips::A0, true );
    mapDwarfRegToLLVMReg(5, Mips::A1, true );
    mapDwarfRegToLLVMReg(6, Mips::A2, true );
    mapDwarfRegToLLVMReg(7, Mips::A3, true );
    mapDwarfRegToLLVMReg(1, Mips::AT, true );
    mapDwarfRegToLLVMReg(32, Mips::F0, true );
    mapDwarfRegToLLVMReg(33, Mips::F1, true );
    mapDwarfRegToLLVMReg(34, Mips::F2, true );
    mapDwarfRegToLLVMReg(35, Mips::F3, true );
    mapDwarfRegToLLVMReg(36, Mips::F4, true );
    mapDwarfRegToLLVMReg(37, Mips::F5, true );
    mapDwarfRegToLLVMReg(38, Mips::F6, true );
    mapDwarfRegToLLVMReg(39, Mips::F7, true );
    mapDwarfRegToLLVMReg(40, Mips::F8, true );
    mapDwarfRegToLLVMReg(41, Mips::F9, true );
    mapDwarfRegToLLVMReg(42, Mips::F10, true );
    mapDwarfRegToLLVMReg(43, Mips::F11, true );
    mapDwarfRegToLLVMReg(44, Mips::F12, true );
    mapDwarfRegToLLVMReg(45, Mips::F13, true );
    mapDwarfRegToLLVMReg(46, Mips::F14, true );
    mapDwarfRegToLLVMReg(47, Mips::F15, true );
    mapDwarfRegToLLVMReg(48, Mips::F16, true );
    mapDwarfRegToLLVMReg(49, Mips::F17, true );
    mapDwarfRegToLLVMReg(50, Mips::F18, true );
    mapDwarfRegToLLVMReg(51, Mips::F19, true );
    mapDwarfRegToLLVMReg(52, Mips::F20, true );
    mapDwarfRegToLLVMReg(53, Mips::F21, true );
    mapDwarfRegToLLVMReg(54, Mips::F22, true );
    mapDwarfRegToLLVMReg(55, Mips::F23, true );
    mapDwarfRegToLLVMReg(56, Mips::F24, true );
    mapDwarfRegToLLVMReg(57, Mips::F25, true );
    mapDwarfRegToLLVMReg(58, Mips::F26, true );
    mapDwarfRegToLLVMReg(59, Mips::F27, true );
    mapDwarfRegToLLVMReg(60, Mips::F28, true );
    mapDwarfRegToLLVMReg(61, Mips::F29, true );
    mapDwarfRegToLLVMReg(62, Mips::F30, true );
    mapDwarfRegToLLVMReg(63, Mips::F31, true );
    mapDwarfRegToLLVMReg(30, Mips::FP, true );
    mapDwarfRegToLLVMReg(28, Mips::GP, true );
    mapDwarfRegToLLVMReg(64, Mips::HI, true );
    mapDwarfRegToLLVMReg(26, Mips::K0, true );
    mapDwarfRegToLLVMReg(27, Mips::K1, true );
    mapDwarfRegToLLVMReg(65, Mips::LO, true );
    mapDwarfRegToLLVMReg(31, Mips::RA, true );
    mapDwarfRegToLLVMReg(16, Mips::S0, true );
    mapDwarfRegToLLVMReg(17, Mips::S1, true );
    mapDwarfRegToLLVMReg(18, Mips::S2, true );
    mapDwarfRegToLLVMReg(19, Mips::S3, true );
    mapDwarfRegToLLVMReg(20, Mips::S4, true );
    mapDwarfRegToLLVMReg(21, Mips::S5, true );
    mapDwarfRegToLLVMReg(22, Mips::S6, true );
    mapDwarfRegToLLVMReg(23, Mips::S7, true );
    mapDwarfRegToLLVMReg(29, Mips::SP, true );
    mapDwarfRegToLLVMReg(8, Mips::T0, true );
    mapDwarfRegToLLVMReg(9, Mips::T1, true );
    mapDwarfRegToLLVMReg(10, Mips::T2, true );
    mapDwarfRegToLLVMReg(11, Mips::T3, true );
    mapDwarfRegToLLVMReg(12, Mips::T4, true );
    mapDwarfRegToLLVMReg(13, Mips::T5, true );
    mapDwarfRegToLLVMReg(14, Mips::T6, true );
    mapDwarfRegToLLVMReg(15, Mips::T7, true );
    mapDwarfRegToLLVMReg(24, Mips::T8, true );
    mapDwarfRegToLLVMReg(25, Mips::T9, true );
    mapDwarfRegToLLVMReg(2, Mips::V0, true );
    mapDwarfRegToLLVMReg(3, Mips::V1, true );
    mapDwarfRegToLLVMReg(0, Mips::ZERO, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Mips::A0, 4, false );
    mapLLVMRegToDwarfReg(Mips::A1, 5, false );
    mapLLVMRegToDwarfReg(Mips::A2, 6, false );
    mapLLVMRegToDwarfReg(Mips::A3, 7, false );
    mapLLVMRegToDwarfReg(Mips::AT, 1, false );
    mapLLVMRegToDwarfReg(Mips::D0, -1, false );
    mapLLVMRegToDwarfReg(Mips::D1, -1, false );
    mapLLVMRegToDwarfReg(Mips::D2, -1, false );
    mapLLVMRegToDwarfReg(Mips::D3, -1, false );
    mapLLVMRegToDwarfReg(Mips::D4, -1, false );
    mapLLVMRegToDwarfReg(Mips::D5, -1, false );
    mapLLVMRegToDwarfReg(Mips::D6, -1, false );
    mapLLVMRegToDwarfReg(Mips::D7, -1, false );
    mapLLVMRegToDwarfReg(Mips::D8, -1, false );
    mapLLVMRegToDwarfReg(Mips::D9, -1, false );
    mapLLVMRegToDwarfReg(Mips::D10, -1, false );
    mapLLVMRegToDwarfReg(Mips::D11, -1, false );
    mapLLVMRegToDwarfReg(Mips::D12, -1, false );
    mapLLVMRegToDwarfReg(Mips::D13, -1, false );
    mapLLVMRegToDwarfReg(Mips::D14, -1, false );
    mapLLVMRegToDwarfReg(Mips::D15, -1, false );
    mapLLVMRegToDwarfReg(Mips::F0, 32, false );
    mapLLVMRegToDwarfReg(Mips::F1, 33, false );
    mapLLVMRegToDwarfReg(Mips::F2, 34, false );
    mapLLVMRegToDwarfReg(Mips::F3, 35, false );
    mapLLVMRegToDwarfReg(Mips::F4, 36, false );
    mapLLVMRegToDwarfReg(Mips::F5, 37, false );
    mapLLVMRegToDwarfReg(Mips::F6, 38, false );
    mapLLVMRegToDwarfReg(Mips::F7, 39, false );
    mapLLVMRegToDwarfReg(Mips::F8, 40, false );
    mapLLVMRegToDwarfReg(Mips::F9, 41, false );
    mapLLVMRegToDwarfReg(Mips::F10, 42, false );
    mapLLVMRegToDwarfReg(Mips::F11, 43, false );
    mapLLVMRegToDwarfReg(Mips::F12, 44, false );
    mapLLVMRegToDwarfReg(Mips::F13, 45, false );
    mapLLVMRegToDwarfReg(Mips::F14, 46, false );
    mapLLVMRegToDwarfReg(Mips::F15, 47, false );
    mapLLVMRegToDwarfReg(Mips::F16, 48, false );
    mapLLVMRegToDwarfReg(Mips::F17, 49, false );
    mapLLVMRegToDwarfReg(Mips::F18, 50, false );
    mapLLVMRegToDwarfReg(Mips::F19, 51, false );
    mapLLVMRegToDwarfReg(Mips::F20, 52, false );
    mapLLVMRegToDwarfReg(Mips::F21, 53, false );
    mapLLVMRegToDwarfReg(Mips::F22, 54, false );
    mapLLVMRegToDwarfReg(Mips::F23, 55, false );
    mapLLVMRegToDwarfReg(Mips::F24, 56, false );
    mapLLVMRegToDwarfReg(Mips::F25, 57, false );
    mapLLVMRegToDwarfReg(Mips::F26, 58, false );
    mapLLVMRegToDwarfReg(Mips::F27, 59, false );
    mapLLVMRegToDwarfReg(Mips::F28, 60, false );
    mapLLVMRegToDwarfReg(Mips::F29, 61, false );
    mapLLVMRegToDwarfReg(Mips::F30, 62, false );
    mapLLVMRegToDwarfReg(Mips::F31, 63, false );
    mapLLVMRegToDwarfReg(Mips::FCR31, -1, false );
    mapLLVMRegToDwarfReg(Mips::FP, 30, false );
    mapLLVMRegToDwarfReg(Mips::GP, 28, false );
    mapLLVMRegToDwarfReg(Mips::HI, 64, false );
    mapLLVMRegToDwarfReg(Mips::HWR29, -1, false );
    mapLLVMRegToDwarfReg(Mips::K0, 26, false );
    mapLLVMRegToDwarfReg(Mips::K1, 27, false );
    mapLLVMRegToDwarfReg(Mips::LO, 65, false );
    mapLLVMRegToDwarfReg(Mips::RA, 31, false );
    mapLLVMRegToDwarfReg(Mips::S0, 16, false );
    mapLLVMRegToDwarfReg(Mips::S1, 17, false );
    mapLLVMRegToDwarfReg(Mips::S2, 18, false );
    mapLLVMRegToDwarfReg(Mips::S3, 19, false );
    mapLLVMRegToDwarfReg(Mips::S4, 20, false );
    mapLLVMRegToDwarfReg(Mips::S5, 21, false );
    mapLLVMRegToDwarfReg(Mips::S6, 22, false );
    mapLLVMRegToDwarfReg(Mips::S7, 23, false );
    mapLLVMRegToDwarfReg(Mips::SP, 29, false );
    mapLLVMRegToDwarfReg(Mips::T0, 8, false );
    mapLLVMRegToDwarfReg(Mips::T1, 9, false );
    mapLLVMRegToDwarfReg(Mips::T2, 10, false );
    mapLLVMRegToDwarfReg(Mips::T3, 11, false );
    mapLLVMRegToDwarfReg(Mips::T4, 12, false );
    mapLLVMRegToDwarfReg(Mips::T5, 13, false );
    mapLLVMRegToDwarfReg(Mips::T6, 14, false );
    mapLLVMRegToDwarfReg(Mips::T7, 15, false );
    mapLLVMRegToDwarfReg(Mips::T8, 24, false );
    mapLLVMRegToDwarfReg(Mips::T9, 25, false );
    mapLLVMRegToDwarfReg(Mips::V0, 2, false );
    mapLLVMRegToDwarfReg(Mips::V1, 3, false );
    mapLLVMRegToDwarfReg(Mips::ZERO, 0, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Mips::A0, 4, true );
    mapLLVMRegToDwarfReg(Mips::A1, 5, true );
    mapLLVMRegToDwarfReg(Mips::A2, 6, true );
    mapLLVMRegToDwarfReg(Mips::A3, 7, true );
    mapLLVMRegToDwarfReg(Mips::AT, 1, true );
    mapLLVMRegToDwarfReg(Mips::D0, -1, true );
    mapLLVMRegToDwarfReg(Mips::D1, -1, true );
    mapLLVMRegToDwarfReg(Mips::D2, -1, true );
    mapLLVMRegToDwarfReg(Mips::D3, -1, true );
    mapLLVMRegToDwarfReg(Mips::D4, -1, true );
    mapLLVMRegToDwarfReg(Mips::D5, -1, true );
    mapLLVMRegToDwarfReg(Mips::D6, -1, true );
    mapLLVMRegToDwarfReg(Mips::D7, -1, true );
    mapLLVMRegToDwarfReg(Mips::D8, -1, true );
    mapLLVMRegToDwarfReg(Mips::D9, -1, true );
    mapLLVMRegToDwarfReg(Mips::D10, -1, true );
    mapLLVMRegToDwarfReg(Mips::D11, -1, true );
    mapLLVMRegToDwarfReg(Mips::D12, -1, true );
    mapLLVMRegToDwarfReg(Mips::D13, -1, true );
    mapLLVMRegToDwarfReg(Mips::D14, -1, true );
    mapLLVMRegToDwarfReg(Mips::D15, -1, true );
    mapLLVMRegToDwarfReg(Mips::F0, 32, true );
    mapLLVMRegToDwarfReg(Mips::F1, 33, true );
    mapLLVMRegToDwarfReg(Mips::F2, 34, true );
    mapLLVMRegToDwarfReg(Mips::F3, 35, true );
    mapLLVMRegToDwarfReg(Mips::F4, 36, true );
    mapLLVMRegToDwarfReg(Mips::F5, 37, true );
    mapLLVMRegToDwarfReg(Mips::F6, 38, true );
    mapLLVMRegToDwarfReg(Mips::F7, 39, true );
    mapLLVMRegToDwarfReg(Mips::F8, 40, true );
    mapLLVMRegToDwarfReg(Mips::F9, 41, true );
    mapLLVMRegToDwarfReg(Mips::F10, 42, true );
    mapLLVMRegToDwarfReg(Mips::F11, 43, true );
    mapLLVMRegToDwarfReg(Mips::F12, 44, true );
    mapLLVMRegToDwarfReg(Mips::F13, 45, true );
    mapLLVMRegToDwarfReg(Mips::F14, 46, true );
    mapLLVMRegToDwarfReg(Mips::F15, 47, true );
    mapLLVMRegToDwarfReg(Mips::F16, 48, true );
    mapLLVMRegToDwarfReg(Mips::F17, 49, true );
    mapLLVMRegToDwarfReg(Mips::F18, 50, true );
    mapLLVMRegToDwarfReg(Mips::F19, 51, true );
    mapLLVMRegToDwarfReg(Mips::F20, 52, true );
    mapLLVMRegToDwarfReg(Mips::F21, 53, true );
    mapLLVMRegToDwarfReg(Mips::F22, 54, true );
    mapLLVMRegToDwarfReg(Mips::F23, 55, true );
    mapLLVMRegToDwarfReg(Mips::F24, 56, true );
    mapLLVMRegToDwarfReg(Mips::F25, 57, true );
    mapLLVMRegToDwarfReg(Mips::F26, 58, true );
    mapLLVMRegToDwarfReg(Mips::F27, 59, true );
    mapLLVMRegToDwarfReg(Mips::F28, 60, true );
    mapLLVMRegToDwarfReg(Mips::F29, 61, true );
    mapLLVMRegToDwarfReg(Mips::F30, 62, true );
    mapLLVMRegToDwarfReg(Mips::F31, 63, true );
    mapLLVMRegToDwarfReg(Mips::FCR31, -1, true );
    mapLLVMRegToDwarfReg(Mips::FP, 30, true );
    mapLLVMRegToDwarfReg(Mips::GP, 28, true );
    mapLLVMRegToDwarfReg(Mips::HI, 64, true );
    mapLLVMRegToDwarfReg(Mips::HWR29, -1, true );
    mapLLVMRegToDwarfReg(Mips::K0, 26, true );
    mapLLVMRegToDwarfReg(Mips::K1, 27, true );
    mapLLVMRegToDwarfReg(Mips::LO, 65, true );
    mapLLVMRegToDwarfReg(Mips::RA, 31, true );
    mapLLVMRegToDwarfReg(Mips::S0, 16, true );
    mapLLVMRegToDwarfReg(Mips::S1, 17, true );
    mapLLVMRegToDwarfReg(Mips::S2, 18, true );
    mapLLVMRegToDwarfReg(Mips::S3, 19, true );
    mapLLVMRegToDwarfReg(Mips::S4, 20, true );
    mapLLVMRegToDwarfReg(Mips::S5, 21, true );
    mapLLVMRegToDwarfReg(Mips::S6, 22, true );
    mapLLVMRegToDwarfReg(Mips::S7, 23, true );
    mapLLVMRegToDwarfReg(Mips::SP, 29, true );
    mapLLVMRegToDwarfReg(Mips::T0, 8, true );
    mapLLVMRegToDwarfReg(Mips::T1, 9, true );
    mapLLVMRegToDwarfReg(Mips::T2, 10, true );
    mapLLVMRegToDwarfReg(Mips::T3, 11, true );
    mapLLVMRegToDwarfReg(Mips::T4, 12, true );
    mapLLVMRegToDwarfReg(Mips::T5, 13, true );
    mapLLVMRegToDwarfReg(Mips::T6, 14, true );
    mapLLVMRegToDwarfReg(Mips::T7, 15, true );
    mapLLVMRegToDwarfReg(Mips::T8, 24, true );
    mapLLVMRegToDwarfReg(Mips::T9, 25, true );
    mapLLVMRegToDwarfReg(Mips::V0, 2, true );
    mapLLVMRegToDwarfReg(Mips::V1, 3, true );
    mapLLVMRegToDwarfReg(Mips::ZERO, 0, true );
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

