//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Dec  8 15:13:20 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @correctOutput = internal unnamed_addr constant [100 x i32] [i32 3, i32 5, i32 11, i32 13, i32 14, i32 21, i32 24, i32 27, i32 29, i32 37, i32 45, i32 46, i32 50, i32 56, i32 56, i32 62, i32 62, i32 6...
`define TAG_g_correctOutput `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_correctOutput_a {`TAG_g_correctOutput, 23'd0}
// @input = internal unnamed_addr constant [100 x i32] [i32 283, i32 286, i32 177, i32 115, i32 293, i32 235, i32 286, i32 192, i32 249, i32 121, i32 62, i32 127, i32 290, i32 259, i32 263, i32 226, i32 ...
`define TAG_g_input_var0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_input_var0_a {`TAG_g_input_var0, 23'd0}
// @y = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_y `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_y_a {`TAG_g_y, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] input_var0_address_a;
reg [6:0] input_var0_address_b;
reg input_var0_write_enable_a;
reg input_var0_write_enable_b;
reg [31:0] input_var0_in_a;
reg [31:0] input_var0_in_b;
wire [31:0] input_var0_out_a;
wire [31:0] input_var0_out_b;

// @input = internal unnamed_addr constant [100 x i32] [i32 283, i32 286, i32 177, i32 115, i32 293, i32 235, i32 286, i32 192, i32 249, i32 121, i32 62, i32 127, i32 290, i32 259, i32 263, i32 226, i32 ...
rom_dual_port input_var0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( input_var0_address_a ),
	.address_b( input_var0_address_b ),
	.q_a( input_var0_out_a ),
	.q_b( input_var0_out_b)
);
defparam input_var0.width_a = 32;
defparam input_var0.width_b = 32;
defparam input_var0.widthad_a = 7;
defparam input_var0.widthad_b = 7;
defparam input_var0.numwords_a = 100;
defparam input_var0.numwords_b = 100;
defparam input_var0.latency = ram_latency;
defparam input_var0.init_file = "input_var0.mif";

reg [6:0] correctOutput_address_a;
reg [6:0] correctOutput_address_b;
reg correctOutput_write_enable_a;
reg correctOutput_write_enable_b;
reg [31:0] correctOutput_in_a;
reg [31:0] correctOutput_in_b;
wire [31:0] correctOutput_out_a;
wire [31:0] correctOutput_out_b;

// @correctOutput = internal unnamed_addr constant [100 x i32] [i32 3, i32 5, i32 11, i32 13, i32 14, i32 21, i32 24, i32 27, i32 29, i32 37, i32 45, i32 46, i32 50, i32 56, i32 56, i32 62, i32 62, i32 6...
rom_dual_port correctOutput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( correctOutput_address_a ),
	.address_b( correctOutput_address_b ),
	.q_a( correctOutput_out_a ),
	.q_b( correctOutput_out_b)
);
defparam correctOutput.width_a = 32;
defparam correctOutput.width_b = 32;
defparam correctOutput.widthad_a = 7;
defparam correctOutput.widthad_b = 7;
defparam correctOutput.numwords_a = 100;
defparam correctOutput.numwords_b = 100;
defparam correctOutput.latency = ram_latency;
defparam correctOutput.init_file = "correctOutput.mif";

reg [6:0] y_address_a;
reg [6:0] y_address_b;
reg y_write_enable_a;
reg y_write_enable_b;
reg [31:0] y_in_a;
reg [31:0] y_in_b;
wire [31:0] y_out_a;
wire [31:0] y_out_b;

// @y = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port y (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( y_address_a ),
	.address_b( y_address_b ),
	.wren_a( y_write_enable_a ),
	.wren_b( y_write_enable_b ),
	.data_a( y_in_a ),
	.data_b( y_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( y_out_a ),
	.q_b( y_out_b)
);
defparam y.width_a = 32;
defparam y.width_b = 32;
defparam y.widthad_a = 7;
defparam y.widthad_b = 7;
defparam y.width_be_a = 1;
defparam y.width_be_b = 1;
defparam y.numwords_a = 100;
defparam y.numwords_b = 100;
defparam y.latency = ram_latency;
defparam y.init_file = "y.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_input_var0_a;
assign select_input_var0_a = (tag_a == `TAG_g_input_var0);
reg [ram_latency:0] select_input_var0_reg_a;
wire [31:0] memory_controller_input_var0_out_a;
assign memory_controller_input_var0_out_a = {32{ select_input_var0_reg_a[ram_latency]}} & input_var0_out_a;

wire select_correctOutput_a;
assign select_correctOutput_a = (tag_a == `TAG_g_correctOutput);
reg [ram_latency:0] select_correctOutput_reg_a;
wire [31:0] memory_controller_correctOutput_out_a;
assign memory_controller_correctOutput_out_a = {32{ select_correctOutput_reg_a[ram_latency]}} & correctOutput_out_a;

wire select_y_a;
assign select_y_a = (tag_a == `TAG_g_y);
reg [ram_latency:0] select_y_reg_a;
wire [31:0] memory_controller_y_out_a;
assign memory_controller_y_out_a = {32{ select_y_reg_a[ram_latency]}} & y_out_a;

always @(*)
begin
	input_var0_address_a = memory_controller_address_a [7-1+2:2] & {7{select_input_var0_a}};
	input_var0_write_enable_a = memory_controller_write_enable_a & select_input_var0_a;
	input_var0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	correctOutput_address_a = memory_controller_address_a [7-1+2:2] & {7{select_correctOutput_a}};
	correctOutput_write_enable_a = memory_controller_write_enable_a & select_correctOutput_a;
	correctOutput_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	y_address_a = memory_controller_address_a [7-1+2:2] & {7{select_y_a}};
	y_write_enable_a = memory_controller_write_enable_a & select_y_a;
	y_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_input_var0_reg_a[ram_latency]}} | {2{select_correctOutput_reg_a[ram_latency]}} | {2{select_y_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_input_var0_out_a | memory_controller_correctOutput_out_a | memory_controller_y_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_input_var0_reg_a[j+1] <= select_input_var0_reg_a[j];
select_correctOutput_reg_a[j+1] <= select_correctOutput_reg_a[j];
select_y_reg_a[j+1] <= select_y_reg_a[j];
end
always @(*)
begin
select_input_var0_reg_a[0] <= select_input_var0_a;
select_correctOutput_reg_a[0] <= select_correctOutput_a;
select_y_reg_a[0] <= select_y_a;
end

reg [2:0] select_not_struct_b;

wire select_input_var0_b;
assign select_input_var0_b = (tag_b == `TAG_g_input_var0);
reg [ram_latency:0] select_input_var0_reg_b;
wire [31:0] memory_controller_input_var0_out_b;
assign memory_controller_input_var0_out_b = {32{ select_input_var0_reg_b[ram_latency]}} & input_var0_out_b;

wire select_correctOutput_b;
assign select_correctOutput_b = (tag_b == `TAG_g_correctOutput);
reg [ram_latency:0] select_correctOutput_reg_b;
wire [31:0] memory_controller_correctOutput_out_b;
assign memory_controller_correctOutput_out_b = {32{ select_correctOutput_reg_b[ram_latency]}} & correctOutput_out_b;

wire select_y_b;
assign select_y_b = (tag_b == `TAG_g_y);
reg [ram_latency:0] select_y_reg_b;
wire [31:0] memory_controller_y_out_b;
assign memory_controller_y_out_b = {32{ select_y_reg_b[ram_latency]}} & y_out_b;

always @(*)
begin
	input_var0_address_b = memory_controller_address_b [7-1+2:2] & {7{select_input_var0_b}};
	input_var0_write_enable_b = memory_controller_write_enable_b & select_input_var0_b;
	input_var0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	correctOutput_address_b = memory_controller_address_b [7-1+2:2] & {7{select_correctOutput_b}};
	correctOutput_write_enable_b = memory_controller_write_enable_b & select_correctOutput_b;
	correctOutput_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	y_address_b = memory_controller_address_b [7-1+2:2] & {7{select_y_b}};
	y_write_enable_b = memory_controller_write_enable_b & select_y_b;
	y_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_input_var0_reg_b[ram_latency]}} | {2{select_correctOutput_reg_b[ram_latency]}} | {2{select_y_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_input_var0_out_b | memory_controller_correctOutput_out_b | memory_controller_y_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_input_var0_reg_b[j+1] <= select_input_var0_reg_b[j];
select_correctOutput_reg_b[j+1] <= select_correctOutput_reg_b[j];
select_y_reg_b[j+1] <= select_y_reg_b[j];
end
always @(*)
begin
select_input_var0_reg_b[0] <= select_input_var0_b;
select_correctOutput_reg_b[0] <= select_correctOutput_b;
select_y_reg_b[0] <= select_y_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB_lrph7i_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB_lrph7i_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB_lrph7i_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB_lrph7i_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_lrphipreheader_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB_loopexitiloopexit_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB_loopexiti_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_sortexitpreheader_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB_lrphi_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB_lrphi_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_lrphi_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_lrphi_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB_lrphi_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB_lrphi_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_lrphi_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB_lrphi_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB_lrphi_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__crit_edge9ipreheader_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__crit_edge9i_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_sortexit_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB_sortexit_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB_sortexit_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__21_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__23_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__23_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__23_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__27_35 = 6'd35;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_lrph7i_i05i;
reg [31:0] main_lrph7i_i05i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph7i_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph7i_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph7i_scevgep11;
reg [31:0] main_lrph7i_1;
reg [31:0] main_lrph7i_2;
reg [31:0] main_lrph7i_2_reg;
reg  main_lrph7i_exitcond9;
reg  main_lrph7i_exitcond9_reg;
reg  main_loopexiti_exitcond5;
reg [31:0] main_lrphi_3;
reg [31:0] main_lrphi_3_reg;
reg [31:0] main_lrphi_4;
reg [31:0] main_lrphi_4_reg;
reg [31:0] main_lrphi_5;
reg [31:0] main_lrphi_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep7_reg;
reg [31:0] main_lrphi_6;
reg [31:0] main_lrphi_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep8;
reg [31:0] main_lrphi_7;
reg [31:0] main_lrphi_7_reg;
reg [31:0] main_lrphi_prei;
reg [31:0] main_lrphi_prei_reg;
reg [31:0] main_lrphi_8;
reg  main_lrphi_9;
reg [31:0] main_lrphi_d0position0i3;
reg [31:0] main_lrphi_d0position0i3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_10_reg;
reg [31:0] main_lrphi_11;
reg  main_lrphi_exitcondi4;
reg  main_lrphi_exitcondi4_reg;
reg [31:0] main__crit_edge9i_indvar;
reg [31:0] main__crit_edge9i_indvar_reg;
reg [31:0] main__crit_edge9i_d0position0i5;
reg [31:0] main__crit_edge9i_d0position0i5_reg;
reg [31:0] main__crit_edge9i_12;
reg [31:0] main__crit_edge9i_12_reg;
reg [31:0] main__crit_edge9i_13;
reg [31:0] main__crit_edge9i_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edge9i_scevgep4;
reg [31:0] main__crit_edge9i_pre10i;
reg [31:0] main__crit_edge9i_pre10i_reg;
reg [31:0] main__crit_edge9i_14;
reg  main__crit_edge9i_15;
reg [31:0] main__crit_edge9i_d0position0i;
reg [31:0] main__crit_edge9i_d0position0i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edge9i_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edge9i_16_reg;
reg [31:0] main__crit_edge9i_17;
reg [31:0] main__crit_edge9i_indvarnext;
reg [31:0] main__crit_edge9i_indvarnext_reg;
reg  main__crit_edge9i_exitcond3;
reg  main__crit_edge9i_exitcond3_reg;
reg [31:0] main_sortexit_i02;
reg [31:0] main_sortexit_i02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sortexit_scevgep2;
reg [31:0] main_sortexit_18;
reg [31:0] main_sortexit_20;
reg [31:0] main_sortexit_20_reg;
reg  main_sortexit_exitcond;
reg  main_sortexit_exitcond_reg;
reg [31:0] main_23_i11;
reg [31:0] main_23_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_23_scevgep;
reg [31:0] main_23_24;
reg [31:0] main_23_26;
reg [31:0] main_23_26_reg;
reg  main_23_exitcond1;
reg  main_23_exitcond1_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sort.exit*/
	/*   %19 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %18) #1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_30)) begin
		$write("%d	", $signed(main_sortexit_18));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_sortexit_18) === 1'bX) finish <= 0;
	end
	/* main: %21*/
	/*   %22 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		$write("\n\n-----------\n");
	end
	/* main: %23*/
	/*   %25 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %24) #1*/
	if ((cur_state == LEGUP_F_main_BB__23_34)) begin
		$write("%d	", $signed(main_23_24));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_23_24) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_lrph7i_1;
LEGUP_F_main_BB__21_31:
		next_state = LEGUP_F_main_BB__23_32;
LEGUP_F_main_BB__23_32:
		next_state = LEGUP_F_main_BB__23_33;
LEGUP_F_main_BB__23_33:
		next_state = LEGUP_F_main_BB__23_34;
LEGUP_F_main_BB__23_34:
	if ((main_23_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__27_35;
	else if ((main_23_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__23_32;
LEGUP_F_main_BB__27_35:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edge9i_19:
		next_state = LEGUP_F_main_BB__crit_edge9i_20;
LEGUP_F_main_BB__crit_edge9i_20:
		next_state = LEGUP_F_main_BB__crit_edge9i_21;
LEGUP_F_main_BB__crit_edge9i_21:
		next_state = LEGUP_F_main_BB__crit_edge9i_22;
LEGUP_F_main_BB__crit_edge9i_22:
		next_state = LEGUP_F_main_BB__crit_edge9i_23;
LEGUP_F_main_BB__crit_edge9i_23:
		next_state = LEGUP_F_main_BB__crit_edge9i_24;
LEGUP_F_main_BB__crit_edge9i_24:
		next_state = LEGUP_F_main_BB__crit_edge9i_25;
LEGUP_F_main_BB__crit_edge9i_25:
		next_state = LEGUP_F_main_BB__crit_edge9i_26;
LEGUP_F_main_BB__crit_edge9i_26:
		next_state = LEGUP_F_main_BB__crit_edge9i_27;
LEGUP_F_main_BB__crit_edge9i_27:
	if ((main__crit_edge9i_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitiloopexit_6;
	else if ((main__crit_edge9i_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge9i_19;
LEGUP_F_main_BB__crit_edge9ipreheader_18:
		next_state = LEGUP_F_main_BB__crit_edge9i_19;
LEGUP_F_main_BB_loopexiti_7:
	if ((main_loopexiti_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB_sortexitpreheader_8;
	else if ((main_loopexiti_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi_9;
LEGUP_F_main_BB_loopexitiloopexit_6:
		next_state = LEGUP_F_main_BB_loopexiti_7;
LEGUP_F_main_BB_lrph7i_1:
		next_state = LEGUP_F_main_BB_lrph7i_2;
LEGUP_F_main_BB_lrph7i_2:
		next_state = LEGUP_F_main_BB_lrph7i_3;
LEGUP_F_main_BB_lrph7i_3:
		next_state = LEGUP_F_main_BB_lrph7i_4;
LEGUP_F_main_BB_lrph7i_4:
	if ((main_lrph7i_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_5;
	else if ((main_lrph7i_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph7i_1;
LEGUP_F_main_BB_lrphi_10:
		next_state = LEGUP_F_main_BB_lrphi_11;
LEGUP_F_main_BB_lrphi_11:
		next_state = LEGUP_F_main_BB_lrphi_12;
LEGUP_F_main_BB_lrphi_12:
		next_state = LEGUP_F_main_BB_lrphi_13;
LEGUP_F_main_BB_lrphi_13:
		next_state = LEGUP_F_main_BB_lrphi_14;
LEGUP_F_main_BB_lrphi_14:
		next_state = LEGUP_F_main_BB_lrphi_15;
LEGUP_F_main_BB_lrphi_15:
		next_state = LEGUP_F_main_BB_lrphi_16;
LEGUP_F_main_BB_lrphi_16:
		next_state = LEGUP_F_main_BB_lrphi_17;
LEGUP_F_main_BB_lrphi_17:
	if ((main_lrphi_exitcondi4_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexiti_7;
	else if ((main_lrphi_exitcondi4_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge9ipreheader_18;
LEGUP_F_main_BB_lrphi_9:
		next_state = LEGUP_F_main_BB_lrphi_10;
LEGUP_F_main_BB_lrphipreheader_5:
		next_state = LEGUP_F_main_BB_lrphi_9;
LEGUP_F_main_BB_sortexit_28:
		next_state = LEGUP_F_main_BB_sortexit_29;
LEGUP_F_main_BB_sortexit_29:
		next_state = LEGUP_F_main_BB_sortexit_30;
LEGUP_F_main_BB_sortexit_30:
	if ((main_sortexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__21_31;
	else if ((main_sortexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_sortexit_28;
LEGUP_F_main_BB_sortexitpreheader_8:
		next_state = LEGUP_F_main_BB_sortexit_28;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %i.05.i = phi i32 [ %2, %.lr.ph7.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_lrph7i_i05i = 32'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   %i.05.i = phi i32 [ %2, %.lr.ph7.i ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrph7i_4) & (memory_controller_waitrequest == 1'd0)) & (main_lrph7i_exitcond9_reg == 1'd0))) */ begin
		main_lrph7i_i05i = main_lrph7i_2_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph7.i*/
	/*   %i.05.i = phi i32 [ %2, %.lr.ph7.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_lrph7i_i05i_reg <= main_lrph7i_i05i;
		if (start == 1'b0 && ^(main_lrph7i_i05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph7i_i05i_reg"); $finish; end
	end
	/* main: %.lr.ph7.i*/
	/*   %i.05.i = phi i32 [ %2, %.lr.ph7.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph7i_4) & (memory_controller_waitrequest == 1'd0)) & (main_lrph7i_exitcond9_reg == 1'd0))) begin
		main_lrph7i_i05i_reg <= main_lrph7i_i05i;
		if (start == 1'b0 && ^(main_lrph7i_i05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph7i_i05i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %scevgep10 = getelementptr [100 x i32]* @y, i32 0, i32 %i.05.i*/
		main_lrph7i_scevgep10 = (`TAG_g_y_a + (4 * main_lrph7i_i05i_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph7.i*/
	/*   %scevgep10 = getelementptr [100 x i32]* @y, i32 0, i32 %i.05.i*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		main_lrph7i_scevgep10_reg <= main_lrph7i_scevgep10;
		if (start == 1'b0 && ^(main_lrph7i_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph7i_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %scevgep11 = getelementptr [100 x i32]* @input, i32 0, i32 %i.05.i*/
		main_lrph7i_scevgep11 = (`TAG_g_input_var0_a + (4 * main_lrph7i_i05i_reg));
end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %1 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_lrph7i_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %2 = add nsw i32 %i.05.i, 1*/
		main_lrph7i_2 = (main_lrph7i_i05i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph7.i*/
	/*   %2 = add nsw i32 %i.05.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		main_lrph7i_2_reg <= main_lrph7i_2;
		if (start == 1'b0 && ^(main_lrph7i_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph7i_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph7.i*/
	/*   %exitcond9 = icmp eq i32 %2, 100*/
		main_lrph7i_exitcond9 = (main_lrph7i_2 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.lr.ph7.i*/
	/*   %exitcond9 = icmp eq i32 %2, 100*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		main_lrph7i_exitcond9_reg <= main_lrph7i_exitcond9;
		if (start == 1'b0 && ^(main_lrph7i_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph7i_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %exitcond5 = icmp eq i32 %7, 99*/
		main_loopexiti_exitcond5 = (main_lrphi_7_reg == 32'd99);
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %3 = phi i32 [ %7, %.loopexit.i ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_3 = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %3 = phi i32 [ %7, %.loopexit.i ], [ 0, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_loopexiti_7) & (memory_controller_waitrequest == 1'd0)) & (main_loopexiti_exitcond5 == 1'd0))) */ begin
		main_lrphi_3 = main_lrphi_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %3 = phi i32 [ %7, %.loopexit.i ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_3_reg <= main_lrphi_3;
		if (start == 1'b0 && ^(main_lrphi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_3_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %3 = phi i32 [ %7, %.loopexit.i ], [ 0, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_loopexiti_7) & (memory_controller_waitrequest == 1'd0)) & (main_loopexiti_exitcond5 == 1'd0))) begin
		main_lrphi_3_reg <= main_lrphi_3;
		if (start == 1'b0 && ^(main_lrphi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %4 = add i32 %3, 2*/
		main_lrphi_4 = (main_lrphi_3_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %4 = add i32 %3, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_4_reg <= main_lrphi_4;
		if (start == 1'b0 && ^(main_lrphi_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %5 = sub i32 98, %3*/
		main_lrphi_5 = (32'd98 - main_lrphi_3_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %5 = sub i32 98, %3*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_5_reg <= main_lrphi_5;
		if (start == 1'b0 && ^(main_lrphi_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @y, i32 0, i32 %3*/
		main_lrphi_scevgep7 = (`TAG_g_y_a + (4 * main_lrphi_3_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @y, i32 0, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_scevgep7_reg <= main_lrphi_scevgep7;
		if (start == 1'b0 && ^(main_lrphi_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %6 = add i32 %3, 1*/
		main_lrphi_6 = (main_lrphi_3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %6 = add i32 %3, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_6_reg <= main_lrphi_6;
		if (start == 1'b0 && ^(main_lrphi_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep8 = getelementptr [100 x i32]* @y, i32 0, i32 %6*/
		main_lrphi_scevgep8 = (`TAG_g_y_a + (4 * main_lrphi_6_reg));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %7 = add nsw i32 %3, 1*/
		main_lrphi_7 = (main_lrphi_3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %7 = add nsw i32 %3, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_7_reg <= main_lrphi_7;
		if (start == 1'b0 && ^(main_lrphi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
		main_lrphi_prei = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_11)) begin
		main_lrphi_prei_reg <= main_lrphi_prei;
		if (start == 1'b0 && ^(main_lrphi_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %8 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_lrphi_8 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %9 = icmp sgt i32 %.pre.i, %8*/
		main_lrphi_9 = ($signed(main_lrphi_prei_reg) > $signed(main_lrphi_8));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %d.0.position.0.i3 = select i1 %9, i32 %6, i32 %3*/
		main_lrphi_d0position0i3 = (main_lrphi_9 ? main_lrphi_6_reg : main_lrphi_3_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %d.0.position.0.i3 = select i1 %9, i32 %6, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_12)) begin
		main_lrphi_d0position0i3_reg <= main_lrphi_d0position0i3;
		if (start == 1'b0 && ^(main_lrphi_d0position0i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_d0position0i3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %10 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %d.0.position.0.i3*/
		main_lrphi_10 = (`TAG_g_y_a + (4 * main_lrphi_d0position0i3_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %10 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %d.0.position.0.i3*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_13)) begin
		main_lrphi_10_reg <= main_lrphi_10;
		if (start == 1'b0 && ^(main_lrphi_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %11 = load i32* %10, align 4, !tbaa !1*/
		main_lrphi_11 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond.i4 = icmp eq i32 %4, 100*/
		main_lrphi_exitcondi4 = (main_lrphi_4 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond.i4 = icmp eq i32 %4, 100*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		main_lrphi_exitcondi4_reg <= main_lrphi_exitcondi4;
		if (start == 1'b0 && ^(main_lrphi_exitcondi4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_exitcondi4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %indvar = phi i32 [ 0, %._crit_edge9.i.preheader ], [ %indvar.next, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_indvar = 32'd0;
	end
	/* main: %._crit_edge9.i*/
	/*   %indvar = phi i32 [ 0, %._crit_edge9.i.preheader ], [ %indvar.next, %._crit_edge9.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) */ begin
		main__crit_edge9i_indvar = main__crit_edge9i_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %indvar = phi i32 [ 0, %._crit_edge9.i.preheader ], [ %indvar.next, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_indvar_reg <= main__crit_edge9i_indvar;
		if (start == 1'b0 && ^(main__crit_edge9i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_indvar_reg"); $finish; end
	end
	/* main: %._crit_edge9.i*/
	/*   %indvar = phi i32 [ 0, %._crit_edge9.i.preheader ], [ %indvar.next, %._crit_edge9.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) begin
		main__crit_edge9i_indvar_reg <= main__crit_edge9i_indvar;
		if (start == 1'b0 && ^(main__crit_edge9i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i5 = phi i32 [ %d.0.position.0.i3, %._crit_edge9.i.preheader ], [ %d.0.position.0.i, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_d0position0i5 = main_lrphi_d0position0i3_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i5 = phi i32 [ %d.0.position.0.i3, %._crit_edge9.i.preheader ], [ %d.0.position.0.i, %._crit_edge9.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) */ begin
		main__crit_edge9i_d0position0i5 = main__crit_edge9i_d0position0i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i5 = phi i32 [ %d.0.position.0.i3, %._crit_edge9.i.preheader ], [ %d.0.position.0.i, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_d0position0i5_reg <= main__crit_edge9i_d0position0i5;
		if (start == 1'b0 && ^(main__crit_edge9i_d0position0i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_d0position0i5_reg"); $finish; end
	end
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i5 = phi i32 [ %d.0.position.0.i3, %._crit_edge9.i.preheader ], [ %d.0.position.0.i, %._crit_edge9.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) begin
		main__crit_edge9i_d0position0i5_reg <= main__crit_edge9i_d0position0i5;
		if (start == 1'b0 && ^(main__crit_edge9i_d0position0i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_d0position0i5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %12 = phi i32 [ %.pre.i, %._crit_edge9.i.preheader ], [ %.pre10.i, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_12 = main_lrphi_prei_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   %12 = phi i32 [ %.pre.i, %._crit_edge9.i.preheader ], [ %.pre10.i, %._crit_edge9.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) */ begin
		main__crit_edge9i_12 = main__crit_edge9i_pre10i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %12 = phi i32 [ %.pre.i, %._crit_edge9.i.preheader ], [ %.pre10.i, %._crit_edge9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge9ipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge9i_12_reg <= main__crit_edge9i_12;
		if (start == 1'b0 && ^(main__crit_edge9i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_12_reg"); $finish; end
	end
	/* main: %._crit_edge9.i*/
	/*   %12 = phi i32 [ %.pre.i, %._crit_edge9.i.preheader ], [ %.pre10.i, %._crit_edge9.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge9i_27) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge9i_exitcond3_reg == 1'd0))) begin
		main__crit_edge9i_12_reg <= main__crit_edge9i_12;
		if (start == 1'b0 && ^(main__crit_edge9i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %13 = add i32 %4, %indvar*/
		main__crit_edge9i_13 = (main_lrphi_4_reg + main__crit_edge9i_indvar_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %13 = add i32 %4, %indvar*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		main__crit_edge9i_13_reg <= main__crit_edge9i_13;
		if (start == 1'b0 && ^(main__crit_edge9i_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %scevgep4 = getelementptr [100 x i32]* @y, i32 0, i32 %13*/
		main__crit_edge9i_scevgep4 = (`TAG_g_y_a + (4 * main__crit_edge9i_13_reg));
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
		main__crit_edge9i_pre10i = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_21)) begin
		main__crit_edge9i_pre10i_reg <= main__crit_edge9i_pre10i;
		if (start == 1'b0 && ^(main__crit_edge9i_pre10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_pre10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %14 = load i32* %scevgep4, align 4, !tbaa !1*/
		main__crit_edge9i_14 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %15 = icmp sgt i32 %12, %14*/
		main__crit_edge9i_15 = ($signed(main__crit_edge9i_12_reg) > $signed(main__crit_edge9i_14));
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i = select i1 %15, i32 %13, i32 %d.0.position.0.i5*/
		main__crit_edge9i_d0position0i = (main__crit_edge9i_15 ? main__crit_edge9i_13_reg : main__crit_edge9i_d0position0i5_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %d.0.position.0.i = select i1 %15, i32 %13, i32 %d.0.position.0.i5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_22)) begin
		main__crit_edge9i_d0position0i_reg <= main__crit_edge9i_d0position0i;
		if (start == 1'b0 && ^(main__crit_edge9i_d0position0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_d0position0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %16 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %d.0.position.0.i*/
		main__crit_edge9i_16 = (`TAG_g_y_a + (4 * main__crit_edge9i_d0position0i_reg));
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %16 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %d.0.position.0.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_23)) begin
		main__crit_edge9i_16_reg <= main__crit_edge9i_16;
		if (start == 1'b0 && ^(main__crit_edge9i_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
		main__crit_edge9i_17 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main__crit_edge9i_indvarnext = (main__crit_edge9i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		main__crit_edge9i_indvarnext_reg <= main__crit_edge9i_indvarnext;
		if (start == 1'b0 && ^(main__crit_edge9i_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge9.i*/
	/*   %exitcond3 = icmp eq i32 %indvar.next, %5*/
		main__crit_edge9i_exitcond3 = (main__crit_edge9i_indvarnext == main_lrphi_5_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge9.i*/
	/*   %exitcond3 = icmp eq i32 %indvar.next, %5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		main__crit_edge9i_exitcond3_reg <= main__crit_edge9i_exitcond3;
		if (start == 1'b0 && ^(main__crit_edge9i_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge9i_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %20, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_sortexitpreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_sortexit_i02 = 32'd0;
	end
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %20, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_sortexit_30) & (memory_controller_waitrequest == 1'd0)) & (main_sortexit_exitcond_reg == 1'd0))) */ begin
		main_sortexit_i02 = main_sortexit_20_reg;
	end
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %20, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_sortexitpreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_sortexit_i02_reg <= main_sortexit_i02;
		if (start == 1'b0 && ^(main_sortexit_i02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_i02_reg"); $finish; end
	end
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %20, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_sortexit_30) & (memory_controller_waitrequest == 1'd0)) & (main_sortexit_exitcond_reg == 1'd0))) begin
		main_sortexit_i02_reg <= main_sortexit_i02;
		if (start == 1'b0 && ^(main_sortexit_i02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_i02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %scevgep2 = getelementptr [100 x i32]* @y, i32 0, i32 %i.02*/
		main_sortexit_scevgep2 = (`TAG_g_y_a + (4 * main_sortexit_i02_reg));
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %18 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_sortexit_18 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %20 = add nsw i32 %i.02, 1*/
		main_sortexit_20 = (main_sortexit_i02_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %20 = add nsw i32 %i.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		main_sortexit_20_reg <= main_sortexit_20;
		if (start == 1'b0 && ^(main_sortexit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %exitcond = icmp eq i32 %20, 100*/
		main_sortexit_exitcond = (main_sortexit_20 == 32'd100);
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %exitcond = icmp eq i32 %20, 100*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		main_sortexit_exitcond_reg <= main_sortexit_exitcond;
		if (start == 1'b0 && ^(main_sortexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %i.11 = phi i32 [ 0, %21 ], [ %26, %23 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_23_i11 = 32'd0;
	end
	/* main: %23*/
	/*   %i.11 = phi i32 [ 0, %21 ], [ %26, %23 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__23_34) & (memory_controller_waitrequest == 1'd0)) & (main_23_exitcond1_reg == 1'd0))) */ begin
		main_23_i11 = main_23_26_reg;
	end
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %i.11 = phi i32 [ 0, %21 ], [ %26, %23 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_23_i11_reg <= main_23_i11;
		if (start == 1'b0 && ^(main_23_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_i11_reg"); $finish; end
	end
	/* main: %23*/
	/*   %i.11 = phi i32 [ 0, %21 ], [ %26, %23 ]*/
	if ((((cur_state == LEGUP_F_main_BB__23_34) & (memory_controller_waitrequest == 1'd0)) & (main_23_exitcond1_reg == 1'd0))) begin
		main_23_i11_reg <= main_23_i11;
		if (start == 1'b0 && ^(main_23_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %scevgep = getelementptr [100 x i32]* @correctOutput, i32 0, i32 %i.11*/
		main_23_scevgep = (`TAG_g_correctOutput_a + (4 * main_23_i11_reg));
end
always @(*) begin
	/* main: %23*/
	/*   %24 = load i32* %scevgep, align 4, !tbaa !1*/
		main_23_24 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %23*/
	/*   %26 = add nsw i32 %i.11, 1*/
		main_23_26 = (main_23_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %26 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		main_23_26_reg <= main_23_26;
		if (start == 1'b0 && ^(main_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %exitcond1 = icmp eq i32 %26, 100*/
		main_23_exitcond1 = (main_23_26 == 32'd100);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %exitcond1 = icmp eq i32 %26, 100*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		main_23_exitcond1_reg <= main_23_exitcond1;
		if (start == 1'b0 && ^(main_23_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_exitcond1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__27_35)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   %1 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph7.i*/
	/*   store i32 %1, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %8 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %11 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %11, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %.pre.i, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   %14 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %17, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %.pre10.i, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sort.exit*/
	/*   %18 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %23*/
	/*   %24 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   %1 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		memory_controller_address_a = main_lrph7i_scevgep11;
	end
	/* main: %.lr.ph7.i*/
	/*   store i32 %1, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_3)) begin
		memory_controller_address_a = main_lrph7i_scevgep10_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		memory_controller_address_a = main_lrphi_scevgep7;
	end
	/* main: %.lr.ph.i*/
	/*   %8 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_10)) begin
		memory_controller_address_a = main_lrphi_scevgep8;
	end
	/* main: %.lr.ph.i*/
	/*   %11 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_13)) begin
		memory_controller_address_a = main_lrphi_10;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %11, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_15)) begin
		memory_controller_address_a = main_lrphi_scevgep7_reg;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %.pre.i, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_16)) begin
		memory_controller_address_a = main_lrphi_10_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		memory_controller_address_a = main_lrphi_scevgep7_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   %14 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_20)) begin
		memory_controller_address_a = main__crit_edge9i_scevgep4;
	end
	/* main: %._crit_edge9.i*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_23)) begin
		memory_controller_address_a = main__crit_edge9i_16;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %17, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_25)) begin
		memory_controller_address_a = main_lrphi_scevgep7_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %.pre10.i, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_26)) begin
		memory_controller_address_a = main__crit_edge9i_16_reg;
	end
	/* main: %sort.exit*/
	/*   %18 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		memory_controller_address_a = main_sortexit_scevgep2;
	end
	/* main: %23*/
	/*   %24 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		memory_controller_address_a = main_23_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   %1 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   store i32 %1, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %8 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %11 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %11, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %.pre.i, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge9.i*/
	/*   %14 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge9.i*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %17, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %.pre10.i, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sort.exit*/
	/*   %18 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %23*/
	/*   %24 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   store i32 %1, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_3)) begin
		memory_controller_in_a = main_lrph7i_1;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %11, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_15)) begin
		memory_controller_in_a = main_lrphi_11;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %.pre.i, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_16)) begin
		memory_controller_in_a = main_lrphi_prei_reg;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %17, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_25)) begin
		memory_controller_in_a = main__crit_edge9i_17;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %.pre10.i, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_26)) begin
		memory_controller_in_a = main__crit_edge9i_pre10i_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.lr.ph7.i*/
	/*   %1 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph7.i*/
	/*   store i32 %1, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph7i_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %.pre.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %8 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %11 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %11, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   store i32 %.pre.i, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge9.i*/
	/*   %.pre10.i = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge9.i*/
	/*   %14 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge9.i*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %17, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge9.i*/
	/*   store i32 %.pre10.i, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge9i_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sort.exit*/
	/*   %18 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %23*/
	/*   %24 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__23_32)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__27_35)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
