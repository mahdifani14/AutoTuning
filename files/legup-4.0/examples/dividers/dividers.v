//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Sep  3 13:03:19 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @TEST_INPUTS = internal global [10 x [5 x i32]] [[5 x i32] [i32 89384, i32 30887, i32 92778, i32 36916, i32 47794], [5 x i32] [i32 85387, i32 60493, i32 16650, i32 41422, i32 2363], [5 x i32] [i32 900...
`define TAG_g_TEST_INPUTS `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_TEST_INPUTS_a {`TAG_g_TEST_INPUTS, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] TEST_INPUTS_address_a;
reg [5:0] TEST_INPUTS_address_b;
reg TEST_INPUTS_write_enable_a;
reg TEST_INPUTS_write_enable_b;
reg [31:0] TEST_INPUTS_in_a;
reg [31:0] TEST_INPUTS_in_b;
wire [31:0] TEST_INPUTS_out_a;
wire [31:0] TEST_INPUTS_out_b;

// @TEST_INPUTS = internal global [10 x [5 x i32]] [[5 x i32] [i32 89384, i32 30887, i32 92778, i32 36916, i32 47794], [5 x i32] [i32 85387, i32 60493, i32 16650, i32 41422, i32 2363], [5 x i32] [i32 900...
ram_dual_port TEST_INPUTS (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( TEST_INPUTS_address_a ),
	.address_b( TEST_INPUTS_address_b ),
	.wren_a( TEST_INPUTS_write_enable_a ),
	.wren_b( TEST_INPUTS_write_enable_b ),
	.data_a( TEST_INPUTS_in_a ),
	.data_b( TEST_INPUTS_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( TEST_INPUTS_out_a ),
	.q_b( TEST_INPUTS_out_b)
);
defparam TEST_INPUTS.width_a = 32;
defparam TEST_INPUTS.width_b = 32;
defparam TEST_INPUTS.widthad_a = 6;
defparam TEST_INPUTS.widthad_b = 6;
defparam TEST_INPUTS.width_be_a = 1;
defparam TEST_INPUTS.width_be_b = 1;
defparam TEST_INPUTS.numwords_a = 50;
defparam TEST_INPUTS.numwords_b = 50;
defparam TEST_INPUTS.latency = ram_latency;
defparam TEST_INPUTS.init_file = "TEST_INPUTS.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_TEST_INPUTS_a;
assign select_TEST_INPUTS_a = (tag_a == `TAG_g_TEST_INPUTS);
reg [ram_latency:0] select_TEST_INPUTS_reg_a;
wire [31:0] memory_controller_TEST_INPUTS_out_a;
assign memory_controller_TEST_INPUTS_out_a = {32{ select_TEST_INPUTS_reg_a[ram_latency]}} & TEST_INPUTS_out_a;

always @(*)
begin
	TEST_INPUTS_address_a = memory_controller_address_a [6-1+2:2] & {6{select_TEST_INPUTS_a}};
	TEST_INPUTS_write_enable_a = memory_controller_write_enable_a & select_TEST_INPUTS_a;
	TEST_INPUTS_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_TEST_INPUTS_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_TEST_INPUTS_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_TEST_INPUTS_reg_a[j+1] <= select_TEST_INPUTS_reg_a[j];
end
always @(*)
begin
select_TEST_INPUTS_reg_a[0] <= select_TEST_INPUTS_a;
end

reg [2:0] select_not_struct_b;

wire select_TEST_INPUTS_b;
assign select_TEST_INPUTS_b = (tag_b == `TAG_g_TEST_INPUTS);
reg [ram_latency:0] select_TEST_INPUTS_reg_b;
wire [31:0] memory_controller_TEST_INPUTS_out_b;
assign memory_controller_TEST_INPUTS_out_b = {32{ select_TEST_INPUTS_reg_b[ram_latency]}} & TEST_INPUTS_out_b;

always @(*)
begin
	TEST_INPUTS_address_b = memory_controller_address_b [6-1+2:2] & {6{select_TEST_INPUTS_b}};
	TEST_INPUTS_write_enable_b = memory_controller_write_enable_b & select_TEST_INPUTS_b;
	TEST_INPUTS_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_TEST_INPUTS_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_TEST_INPUTS_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_TEST_INPUTS_reg_b[j+1] <= select_TEST_INPUTS_reg_b[j];
end
always @(*)
begin
select_TEST_INPUTS_reg_b[0] <= select_TEST_INPUTS_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__1_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__1_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__1_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__1_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__1_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__1_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__1_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__1_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__1_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__1_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__1_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__1_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__1_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__1_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__1_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__1_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__1_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__1_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__1_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__1_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__1_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__1_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__1_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__1_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__1_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__1_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__1_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__1_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__1_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__1_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__1_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__1_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__1_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__1_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__1_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__1_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__1_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__1_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__1_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__1_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__1_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__1_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__1_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__1_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__1_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__1_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__1_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__1_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__1_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__1_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__1_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__1_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__1_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__1_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__1_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__1_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__1_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__1_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__1_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__1_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__1_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__1_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__1_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__1_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__1_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__1_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__1_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__1_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__1_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__1_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__1_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__1_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__1_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__1_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__1_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__1_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__1_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__1_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__1_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__1_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__1_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__1_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__1_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__1_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__1_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__1_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__1_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__1_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__1_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__1_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__1_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__1_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__1_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__1_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__1_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__1_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__1_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__1_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__1_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__1_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__1_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__1_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__1_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__1_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__1_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__1_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__1_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__1_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__1_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__1_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__1_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__1_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__1_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__1_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__1_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__1_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__1_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__1_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__1_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__1_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__1_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__1_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__1_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__1_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__1_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__1_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__1_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__1_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__1_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__1_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__1_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__1_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__1_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__1_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__1_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__1_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__1_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__1_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__1_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__1_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__1_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__1_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__1_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__1_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__1_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__1_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__1_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__1_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__1_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__1_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__1_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__1_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__1_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__1_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB__1_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB__1_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB__1_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB__1_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB__1_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__1_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__1_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__1_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__1_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__1_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__1_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__1_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__1_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB__1_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__1_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB__1_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB__20_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB__23_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB__25_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB__27_176 = 8'd176;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_sum01;
reg [31:0] main_1_sum01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [31:0] main_1_3;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_16;
reg [31:0] main_1_18;
reg [31:0] main_1_18_reg;
reg [31:0] main_1_19;
reg [31:0] main_1_19_reg;
reg  main_1_exitcond1;
reg  main_1_exitcond1_reg;
reg  main_20_22;
reg [31:0] main_unsigned_divide_32_0_op0;
reg [31:0] main_unsigned_divide_32_0_op1;
reg  lpm_divide_main_1_4_en;
reg  main_unsigned_divide_32_0_go;
wire [31:0] serial_divider_main_1_4_temp_out;
wire [31:0] main_1_4_unused;
wire  serial_divider_main_1_4_done;
reg [31:0] main_unsigned_divide_32_0;


SerialDivider serial_divider_main_1_4 (
	.clk (clk),
	.clken (lpm_divide_main_1_4_en),
	.resetn (~(reset)),
	.go (main_unsigned_divide_32_0_go),
	.dividend (main_unsigned_divide_32_0_op0),
	.divisor (main_unsigned_divide_32_0_op1),
	.quotient (serial_divider_main_1_4_temp_out),
	.remainder (main_1_4_unused),
	.done (serial_divider_main_1_4_done)
);

defparam
	serial_divider_main_1_4.n = 32,
	serial_divider_main_1_4.log2n = 5;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %1*/
	/*   %17 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 %2, i32 %16) #2*/
	if ((cur_state == LEGUP_F_main_BB__1_172)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Result %d: %d\n", $signed(main_1_2_reg), $signed(main_1_16));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_2_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_16) === 1'bX) finish <= 0;
	end
	/* main: %20*/
	/*   %21 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @.str2, i32 0, i32 0), i32 %18) #2*/
	if ((cur_state == LEGUP_F_main_BB__20_173)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Sum: %d\n", $signed(main_1_18_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_18_reg) === 1'bX) finish <= 0;
	end
	/* main: %23*/
	/*   %24 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__23_174)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: PASS\n");
	end
	/* main: %25*/
	/*   %26 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str4, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__25_175)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_10:
		next_state = LEGUP_F_main_BB__1_11;
LEGUP_F_main_BB__1_100:
		next_state = LEGUP_F_main_BB__1_101;
LEGUP_F_main_BB__1_101:
		next_state = LEGUP_F_main_BB__1_102;
LEGUP_F_main_BB__1_102:
		next_state = LEGUP_F_main_BB__1_103;
LEGUP_F_main_BB__1_103:
		next_state = LEGUP_F_main_BB__1_104;
LEGUP_F_main_BB__1_104:
		next_state = LEGUP_F_main_BB__1_105;
LEGUP_F_main_BB__1_105:
		next_state = LEGUP_F_main_BB__1_106;
LEGUP_F_main_BB__1_106:
		next_state = LEGUP_F_main_BB__1_107;
LEGUP_F_main_BB__1_107:
		next_state = LEGUP_F_main_BB__1_108;
LEGUP_F_main_BB__1_108:
		next_state = LEGUP_F_main_BB__1_109;
LEGUP_F_main_BB__1_109:
		next_state = LEGUP_F_main_BB__1_110;
LEGUP_F_main_BB__1_11:
		next_state = LEGUP_F_main_BB__1_12;
LEGUP_F_main_BB__1_110:
		next_state = LEGUP_F_main_BB__1_111;
LEGUP_F_main_BB__1_111:
		next_state = LEGUP_F_main_BB__1_112;
LEGUP_F_main_BB__1_112:
		next_state = LEGUP_F_main_BB__1_113;
LEGUP_F_main_BB__1_113:
		next_state = LEGUP_F_main_BB__1_114;
LEGUP_F_main_BB__1_114:
		next_state = LEGUP_F_main_BB__1_115;
LEGUP_F_main_BB__1_115:
		next_state = LEGUP_F_main_BB__1_116;
LEGUP_F_main_BB__1_116:
		next_state = LEGUP_F_main_BB__1_117;
LEGUP_F_main_BB__1_117:
		next_state = LEGUP_F_main_BB__1_118;
LEGUP_F_main_BB__1_118:
		next_state = LEGUP_F_main_BB__1_119;
LEGUP_F_main_BB__1_119:
		next_state = LEGUP_F_main_BB__1_120;
LEGUP_F_main_BB__1_12:
		next_state = LEGUP_F_main_BB__1_13;
LEGUP_F_main_BB__1_120:
		next_state = LEGUP_F_main_BB__1_121;
LEGUP_F_main_BB__1_121:
		next_state = LEGUP_F_main_BB__1_122;
LEGUP_F_main_BB__1_122:
		next_state = LEGUP_F_main_BB__1_123;
LEGUP_F_main_BB__1_123:
		next_state = LEGUP_F_main_BB__1_124;
LEGUP_F_main_BB__1_124:
		next_state = LEGUP_F_main_BB__1_125;
LEGUP_F_main_BB__1_125:
		next_state = LEGUP_F_main_BB__1_126;
LEGUP_F_main_BB__1_126:
		next_state = LEGUP_F_main_BB__1_127;
LEGUP_F_main_BB__1_127:
		next_state = LEGUP_F_main_BB__1_128;
LEGUP_F_main_BB__1_128:
		next_state = LEGUP_F_main_BB__1_129;
LEGUP_F_main_BB__1_129:
		next_state = LEGUP_F_main_BB__1_130;
LEGUP_F_main_BB__1_13:
		next_state = LEGUP_F_main_BB__1_14;
LEGUP_F_main_BB__1_130:
		next_state = LEGUP_F_main_BB__1_131;
LEGUP_F_main_BB__1_131:
		next_state = LEGUP_F_main_BB__1_132;
LEGUP_F_main_BB__1_132:
		next_state = LEGUP_F_main_BB__1_133;
LEGUP_F_main_BB__1_133:
		next_state = LEGUP_F_main_BB__1_134;
LEGUP_F_main_BB__1_134:
		next_state = LEGUP_F_main_BB__1_135;
LEGUP_F_main_BB__1_135:
		next_state = LEGUP_F_main_BB__1_136;
LEGUP_F_main_BB__1_136:
		next_state = LEGUP_F_main_BB__1_137;
LEGUP_F_main_BB__1_137:
		next_state = LEGUP_F_main_BB__1_138;
LEGUP_F_main_BB__1_138:
		next_state = LEGUP_F_main_BB__1_139;
LEGUP_F_main_BB__1_139:
		next_state = LEGUP_F_main_BB__1_140;
LEGUP_F_main_BB__1_14:
		next_state = LEGUP_F_main_BB__1_15;
LEGUP_F_main_BB__1_140:
		next_state = LEGUP_F_main_BB__1_141;
LEGUP_F_main_BB__1_141:
		next_state = LEGUP_F_main_BB__1_142;
LEGUP_F_main_BB__1_142:
		next_state = LEGUP_F_main_BB__1_143;
LEGUP_F_main_BB__1_143:
		next_state = LEGUP_F_main_BB__1_144;
LEGUP_F_main_BB__1_144:
		next_state = LEGUP_F_main_BB__1_145;
LEGUP_F_main_BB__1_145:
		next_state = LEGUP_F_main_BB__1_146;
LEGUP_F_main_BB__1_146:
		next_state = LEGUP_F_main_BB__1_147;
LEGUP_F_main_BB__1_147:
		next_state = LEGUP_F_main_BB__1_148;
LEGUP_F_main_BB__1_148:
		next_state = LEGUP_F_main_BB__1_149;
LEGUP_F_main_BB__1_149:
		next_state = LEGUP_F_main_BB__1_150;
LEGUP_F_main_BB__1_15:
		next_state = LEGUP_F_main_BB__1_16;
LEGUP_F_main_BB__1_150:
		next_state = LEGUP_F_main_BB__1_151;
LEGUP_F_main_BB__1_151:
		next_state = LEGUP_F_main_BB__1_152;
LEGUP_F_main_BB__1_152:
		next_state = LEGUP_F_main_BB__1_153;
LEGUP_F_main_BB__1_153:
		next_state = LEGUP_F_main_BB__1_154;
LEGUP_F_main_BB__1_154:
		next_state = LEGUP_F_main_BB__1_155;
LEGUP_F_main_BB__1_155:
		next_state = LEGUP_F_main_BB__1_156;
LEGUP_F_main_BB__1_156:
		next_state = LEGUP_F_main_BB__1_157;
LEGUP_F_main_BB__1_157:
		next_state = LEGUP_F_main_BB__1_158;
LEGUP_F_main_BB__1_158:
		next_state = LEGUP_F_main_BB__1_159;
LEGUP_F_main_BB__1_159:
		next_state = LEGUP_F_main_BB__1_160;
LEGUP_F_main_BB__1_16:
		next_state = LEGUP_F_main_BB__1_17;
LEGUP_F_main_BB__1_160:
		next_state = LEGUP_F_main_BB__1_161;
LEGUP_F_main_BB__1_161:
		next_state = LEGUP_F_main_BB__1_162;
LEGUP_F_main_BB__1_162:
		next_state = LEGUP_F_main_BB__1_163;
LEGUP_F_main_BB__1_163:
		next_state = LEGUP_F_main_BB__1_164;
LEGUP_F_main_BB__1_164:
		next_state = LEGUP_F_main_BB__1_165;
LEGUP_F_main_BB__1_165:
		next_state = LEGUP_F_main_BB__1_166;
LEGUP_F_main_BB__1_166:
		next_state = LEGUP_F_main_BB__1_167;
LEGUP_F_main_BB__1_167:
		next_state = LEGUP_F_main_BB__1_168;
LEGUP_F_main_BB__1_168:
		next_state = LEGUP_F_main_BB__1_169;
LEGUP_F_main_BB__1_169:
		next_state = LEGUP_F_main_BB__1_170;
LEGUP_F_main_BB__1_17:
		next_state = LEGUP_F_main_BB__1_18;
LEGUP_F_main_BB__1_170:
		next_state = LEGUP_F_main_BB__1_171;
LEGUP_F_main_BB__1_171:
		next_state = LEGUP_F_main_BB__1_172;
LEGUP_F_main_BB__1_172:
	if ((main_1_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__20_173;
	else if ((main_1_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__1_18:
		next_state = LEGUP_F_main_BB__1_19;
LEGUP_F_main_BB__1_19:
		next_state = LEGUP_F_main_BB__1_20;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_20:
		next_state = LEGUP_F_main_BB__1_21;
LEGUP_F_main_BB__1_21:
		next_state = LEGUP_F_main_BB__1_22;
LEGUP_F_main_BB__1_22:
		next_state = LEGUP_F_main_BB__1_23;
LEGUP_F_main_BB__1_23:
		next_state = LEGUP_F_main_BB__1_24;
LEGUP_F_main_BB__1_24:
		next_state = LEGUP_F_main_BB__1_25;
LEGUP_F_main_BB__1_25:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__1_26:
		next_state = LEGUP_F_main_BB__1_27;
LEGUP_F_main_BB__1_27:
		next_state = LEGUP_F_main_BB__1_28;
LEGUP_F_main_BB__1_28:
		next_state = LEGUP_F_main_BB__1_29;
LEGUP_F_main_BB__1_29:
		next_state = LEGUP_F_main_BB__1_30;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_30:
		next_state = LEGUP_F_main_BB__1_31;
LEGUP_F_main_BB__1_31:
		next_state = LEGUP_F_main_BB__1_32;
LEGUP_F_main_BB__1_32:
		next_state = LEGUP_F_main_BB__1_33;
LEGUP_F_main_BB__1_33:
		next_state = LEGUP_F_main_BB__1_34;
LEGUP_F_main_BB__1_34:
		next_state = LEGUP_F_main_BB__1_35;
LEGUP_F_main_BB__1_35:
		next_state = LEGUP_F_main_BB__1_36;
LEGUP_F_main_BB__1_36:
		next_state = LEGUP_F_main_BB__1_37;
LEGUP_F_main_BB__1_37:
		next_state = LEGUP_F_main_BB__1_38;
LEGUP_F_main_BB__1_38:
		next_state = LEGUP_F_main_BB__1_39;
LEGUP_F_main_BB__1_39:
		next_state = LEGUP_F_main_BB__1_40;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_40:
		next_state = LEGUP_F_main_BB__1_41;
LEGUP_F_main_BB__1_41:
		next_state = LEGUP_F_main_BB__1_42;
LEGUP_F_main_BB__1_42:
		next_state = LEGUP_F_main_BB__1_43;
LEGUP_F_main_BB__1_43:
		next_state = LEGUP_F_main_BB__1_44;
LEGUP_F_main_BB__1_44:
		next_state = LEGUP_F_main_BB__1_45;
LEGUP_F_main_BB__1_45:
		next_state = LEGUP_F_main_BB__1_46;
LEGUP_F_main_BB__1_46:
		next_state = LEGUP_F_main_BB__1_47;
LEGUP_F_main_BB__1_47:
		next_state = LEGUP_F_main_BB__1_48;
LEGUP_F_main_BB__1_48:
		next_state = LEGUP_F_main_BB__1_49;
LEGUP_F_main_BB__1_49:
		next_state = LEGUP_F_main_BB__1_50;
LEGUP_F_main_BB__1_5:
		next_state = LEGUP_F_main_BB__1_6;
LEGUP_F_main_BB__1_50:
		next_state = LEGUP_F_main_BB__1_51;
LEGUP_F_main_BB__1_51:
		next_state = LEGUP_F_main_BB__1_52;
LEGUP_F_main_BB__1_52:
		next_state = LEGUP_F_main_BB__1_53;
LEGUP_F_main_BB__1_53:
		next_state = LEGUP_F_main_BB__1_54;
LEGUP_F_main_BB__1_54:
		next_state = LEGUP_F_main_BB__1_55;
LEGUP_F_main_BB__1_55:
		next_state = LEGUP_F_main_BB__1_56;
LEGUP_F_main_BB__1_56:
		next_state = LEGUP_F_main_BB__1_57;
LEGUP_F_main_BB__1_57:
		next_state = LEGUP_F_main_BB__1_58;
LEGUP_F_main_BB__1_58:
		next_state = LEGUP_F_main_BB__1_59;
LEGUP_F_main_BB__1_59:
		next_state = LEGUP_F_main_BB__1_60;
LEGUP_F_main_BB__1_6:
		next_state = LEGUP_F_main_BB__1_7;
LEGUP_F_main_BB__1_60:
		next_state = LEGUP_F_main_BB__1_61;
LEGUP_F_main_BB__1_61:
		next_state = LEGUP_F_main_BB__1_62;
LEGUP_F_main_BB__1_62:
		next_state = LEGUP_F_main_BB__1_63;
LEGUP_F_main_BB__1_63:
		next_state = LEGUP_F_main_BB__1_64;
LEGUP_F_main_BB__1_64:
		next_state = LEGUP_F_main_BB__1_65;
LEGUP_F_main_BB__1_65:
		next_state = LEGUP_F_main_BB__1_66;
LEGUP_F_main_BB__1_66:
		next_state = LEGUP_F_main_BB__1_67;
LEGUP_F_main_BB__1_67:
		next_state = LEGUP_F_main_BB__1_68;
LEGUP_F_main_BB__1_68:
		next_state = LEGUP_F_main_BB__1_69;
LEGUP_F_main_BB__1_69:
		next_state = LEGUP_F_main_BB__1_70;
LEGUP_F_main_BB__1_7:
		next_state = LEGUP_F_main_BB__1_8;
LEGUP_F_main_BB__1_70:
		next_state = LEGUP_F_main_BB__1_71;
LEGUP_F_main_BB__1_71:
		next_state = LEGUP_F_main_BB__1_72;
LEGUP_F_main_BB__1_72:
		next_state = LEGUP_F_main_BB__1_73;
LEGUP_F_main_BB__1_73:
		next_state = LEGUP_F_main_BB__1_74;
LEGUP_F_main_BB__1_74:
		next_state = LEGUP_F_main_BB__1_75;
LEGUP_F_main_BB__1_75:
		next_state = LEGUP_F_main_BB__1_76;
LEGUP_F_main_BB__1_76:
		next_state = LEGUP_F_main_BB__1_77;
LEGUP_F_main_BB__1_77:
		next_state = LEGUP_F_main_BB__1_78;
LEGUP_F_main_BB__1_78:
		next_state = LEGUP_F_main_BB__1_79;
LEGUP_F_main_BB__1_79:
		next_state = LEGUP_F_main_BB__1_80;
LEGUP_F_main_BB__1_8:
		next_state = LEGUP_F_main_BB__1_9;
LEGUP_F_main_BB__1_80:
		next_state = LEGUP_F_main_BB__1_81;
LEGUP_F_main_BB__1_81:
		next_state = LEGUP_F_main_BB__1_82;
LEGUP_F_main_BB__1_82:
		next_state = LEGUP_F_main_BB__1_83;
LEGUP_F_main_BB__1_83:
		next_state = LEGUP_F_main_BB__1_84;
LEGUP_F_main_BB__1_84:
		next_state = LEGUP_F_main_BB__1_85;
LEGUP_F_main_BB__1_85:
		next_state = LEGUP_F_main_BB__1_86;
LEGUP_F_main_BB__1_86:
		next_state = LEGUP_F_main_BB__1_87;
LEGUP_F_main_BB__1_87:
		next_state = LEGUP_F_main_BB__1_88;
LEGUP_F_main_BB__1_88:
		next_state = LEGUP_F_main_BB__1_89;
LEGUP_F_main_BB__1_89:
		next_state = LEGUP_F_main_BB__1_90;
LEGUP_F_main_BB__1_9:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__1_90:
		next_state = LEGUP_F_main_BB__1_91;
LEGUP_F_main_BB__1_91:
		next_state = LEGUP_F_main_BB__1_92;
LEGUP_F_main_BB__1_92:
		next_state = LEGUP_F_main_BB__1_93;
LEGUP_F_main_BB__1_93:
		next_state = LEGUP_F_main_BB__1_94;
LEGUP_F_main_BB__1_94:
		next_state = LEGUP_F_main_BB__1_95;
LEGUP_F_main_BB__1_95:
		next_state = LEGUP_F_main_BB__1_96;
LEGUP_F_main_BB__1_96:
		next_state = LEGUP_F_main_BB__1_97;
LEGUP_F_main_BB__1_97:
		next_state = LEGUP_F_main_BB__1_98;
LEGUP_F_main_BB__1_98:
		next_state = LEGUP_F_main_BB__1_99;
LEGUP_F_main_BB__1_99:
		next_state = LEGUP_F_main_BB__1_100;
LEGUP_F_main_BB__20_173:
	if ((main_20_22 == 1'd1))
		next_state = LEGUP_F_main_BB__23_174;
	else if ((main_20_22 == 1'd0))
		next_state = LEGUP_F_main_BB__25_175;
LEGUP_F_main_BB__23_174:
		next_state = LEGUP_F_main_BB__27_176;
LEGUP_F_main_BB__25_175:
		next_state = LEGUP_F_main_BB__27_176;
LEGUP_F_main_BB__27_176:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %19, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %19, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_172) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) */ begin
		main_1_2 = main_1_19_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %19, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %19, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_172) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %sum.01 = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_sum01 = 32'd0;
	end
	/* main: %1*/
	/*   %sum.01 = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_172) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) */ begin
		main_1_sum01 = main_1_18;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %sum.01 = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_sum01_reg <= main_1_sum01;
		if (start == 1'b0 && ^(main_1_sum01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_sum01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %sum.01 = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_172) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) begin
		main_1_sum01_reg <= main_1_sum01;
		if (start == 1'b0 && ^(main_1_sum01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_sum01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 4*/
		main_1_scevgep = (`TAG_g_TEST_INPUTS_a + ((20 * main_1_2_reg) + (4 * 32'd4)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 4*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 3*/
		main_1_scevgep2 = (`TAG_g_TEST_INPUTS_a + ((20 * main_1_2_reg) + (4 * 32'd3)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep2_reg <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 2*/
		main_1_scevgep3 = (`TAG_g_TEST_INPUTS_a + ((20 * main_1_2_reg) + (4 * 32'd2)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep3_reg <= main_1_scevgep3;
		if (start == 1'b0 && ^(main_1_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 1*/
		main_1_scevgep4 = (`TAG_g_TEST_INPUTS_a + ((20 * main_1_2_reg) + (4 * 32'd1)));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [10 x [5 x i32]]* @TEST_INPUTS, i32 0, i32 %2, i32 0*/
		main_1_scevgep5 = (`TAG_g_TEST_INPUTS_a + (20 * main_1_2_reg));
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep5, align 4, !tbaa !1*/
		main_1_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_1_4 = main_unsigned_divide_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = udiv i32 %3, 23412*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %4 = udiv i32 %3, 23412*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %9 = udiv i32 %8, 2141*/
	if ((cur_state == LEGUP_F_main_BB__1_104)) begin
		main_1_4_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %12 = udiv i32 %11, 3262*/
	if ((cur_state == LEGUP_F_main_BB__1_138)) begin
		main_1_4_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %15 = udiv i32 %14, 3141*/
	if ((cur_state == LEGUP_F_main_BB__1_172)) begin
		main_1_4_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
		main_1_5 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	main_1_6 = main_unsigned_divide_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %7 = add nuw nsw i32 %6, %4*/
		main_1_7 = (main_1_6 + main_1_4_reg);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = add nuw nsw i32 %6, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_70)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
		main_1_8 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	main_1_9 = main_unsigned_divide_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %10 = add nuw nsw i32 %7, %9*/
		main_1_10 = (main_1_7_reg + main_1_9);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = add nuw nsw i32 %7, %9*/
	if ((cur_state == LEGUP_F_main_BB__1_104)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
		main_1_11 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	main_1_12 = main_unsigned_divide_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %13 = add nuw nsw i32 %10, %12*/
		main_1_13 = (main_1_10_reg + main_1_12);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = add nuw nsw i32 %10, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_138)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
		main_1_14 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	main_1_15 = main_unsigned_divide_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %16 = add nuw nsw i32 %13, %15*/
		main_1_16 = (main_1_13_reg + main_1_15);
end
always @(*) begin
	/* main: %1*/
	/*   %18 = add i32 %16, %sum.01*/
		main_1_18 = (main_1_16 + main_1_sum01_reg);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %18 = add i32 %16, %sum.01*/
	if ((cur_state == LEGUP_F_main_BB__1_172)) begin
		main_1_18_reg <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %19 = add nsw i32 %2, 1*/
		main_1_19 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %19 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_19_reg <= main_1_19;
		if (start == 1'b0 && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %19, 10*/
		main_1_exitcond1 = (main_1_19 == 32'd10);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %19, 10*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_exitcond1_reg <= main_1_exitcond1;
		if (start == 1'b0 && ^(main_1_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %22 = icmp eq i32 %18, 577*/
		main_20_22 = (main_1_18_reg == 32'd577);
end
always @(*) begin
	/* main: %1*/
	/*   %4 = udiv i32 %3, 23412*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_unsigned_divide_32_0_op0 = main_1_3;
	end
	/* main: %1*/
	/*   %6 = udiv i32 %5, 45064*/
	else if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_unsigned_divide_32_0_op0 = main_1_5_reg;
	end
	/* main: %1*/
	/*   %9 = udiv i32 %8, 2141*/
	else if ((cur_state == LEGUP_F_main_BB__1_71)) begin
		main_unsigned_divide_32_0_op0 = main_1_8_reg;
	end
	/* main: %1*/
	/*   %12 = udiv i32 %11, 3262*/
	else if ((cur_state == LEGUP_F_main_BB__1_105)) begin
		main_unsigned_divide_32_0_op0 = main_1_11_reg;
	end
	/* main: %1*/
	/*   %15 = udiv i32 %14, 3141*/
	else /* if ((cur_state == LEGUP_F_main_BB__1_139)) */ begin
		main_unsigned_divide_32_0_op0 = main_1_14_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = udiv i32 %3, 23412*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_unsigned_divide_32_0_op1 = 32'd23412;
	end
	/* main: %1*/
	/*   %6 = udiv i32 %5, 45064*/
	else if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_unsigned_divide_32_0_op1 = 32'd45064;
	end
	/* main: %1*/
	/*   %9 = udiv i32 %8, 2141*/
	else if ((cur_state == LEGUP_F_main_BB__1_71)) begin
		main_unsigned_divide_32_0_op1 = 32'd2141;
	end
	/* main: %1*/
	/*   %12 = udiv i32 %11, 3262*/
	else if ((cur_state == LEGUP_F_main_BB__1_105)) begin
		main_unsigned_divide_32_0_op1 = 32'd3262;
	end
	/* main: %1*/
	/*   %15 = udiv i32 %14, 3141*/
	else /* if ((cur_state == LEGUP_F_main_BB__1_139)) */ begin
		main_unsigned_divide_32_0_op1 = 32'd3141;
	end
end
always @(*) begin
	lpm_divide_main_1_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_unsigned_divide_32_0_go = 1'd0;
	/* main: %1*/
	/*   %4 = udiv i32 %3, 23412*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_unsigned_divide_32_0_go = 1'd1;
	end
	/* main: %1*/
	/*   %6 = udiv i32 %5, 45064*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_unsigned_divide_32_0_go = 1'd1;
	end
	/* main: %1*/
	/*   %9 = udiv i32 %8, 2141*/
	if ((cur_state == LEGUP_F_main_BB__1_71)) begin
		main_unsigned_divide_32_0_go = 1'd1;
	end
	/* main: %1*/
	/*   %12 = udiv i32 %11, 3262*/
	if ((cur_state == LEGUP_F_main_BB__1_105)) begin
		main_unsigned_divide_32_0_go = 1'd1;
	end
	/* main: %1*/
	/*   %15 = udiv i32 %14, 3141*/
	if ((cur_state == LEGUP_F_main_BB__1_139)) begin
		main_unsigned_divide_32_0_go = 1'd1;
	end
end
always @(*) begin
	main_unsigned_divide_32_0 = serial_divider_main_1_4_temp_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_main_BB__27_176)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_address_a = main_1_scevgep5;
	end
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_address_a = main_1_scevgep3_reg;
	end
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_address_a = main_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %8 = load volatile i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_address_b = main_1_scevgep4;
	end
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_address_b = main_1_scevgep2_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %5 = load volatile i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %11 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_main_BB__27_176)) begin
		return_val <= main_1_18_reg;
		if (start == 1'b0 && ^(main_1_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
