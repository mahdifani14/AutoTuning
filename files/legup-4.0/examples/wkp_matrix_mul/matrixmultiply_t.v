//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Dec  8 15:29:50 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 2
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @A1 = internal unnamed_addr constant [20 x [20 x i32]] [[20 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17...
`define TAG_g_A1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_A1_a {`TAG_g_A1, 23'd0}
// @B1 = internal unnamed_addr constant [20 x [20 x i32]] [[20 x i32] [i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 41...
`define TAG_g_B1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_B1_a {`TAG_g_B1, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [8:0] A1_address_a;
reg [8:0] A1_address_b;
reg A1_write_enable_a;
reg A1_write_enable_b;
reg [31:0] A1_in_a;
reg [31:0] A1_in_b;
wire [31:0] A1_out_a;
wire [31:0] A1_out_b;

// @A1 = internal unnamed_addr constant [20 x [20 x i32]] [[20 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17...
rom_dual_port A1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( A1_address_a ),
	.address_b( A1_address_b ),
	.q_a( A1_out_a ),
	.q_b( A1_out_b)
);
defparam A1.width_a = 32;
defparam A1.width_b = 32;
defparam A1.widthad_a = 9;
defparam A1.widthad_b = 9;
defparam A1.numwords_a = 400;
defparam A1.numwords_b = 400;
defparam A1.latency = ram_latency;
defparam A1.init_file = "A1.mif";

reg [8:0] B1_address_a;
reg [8:0] B1_address_b;
reg B1_write_enable_a;
reg B1_write_enable_b;
reg [31:0] B1_in_a;
reg [31:0] B1_in_b;
wire [31:0] B1_out_a;
wire [31:0] B1_out_b;

// @B1 = internal unnamed_addr constant [20 x [20 x i32]] [[20 x i32] [i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 41...
rom_dual_port B1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( B1_address_a ),
	.address_b( B1_address_b ),
	.q_a( B1_out_a ),
	.q_b( B1_out_b)
);
defparam B1.width_a = 32;
defparam B1.width_b = 32;
defparam B1.widthad_a = 9;
defparam B1.widthad_b = 9;
defparam B1.numwords_a = 400;
defparam B1.numwords_b = 400;
defparam B1.latency = ram_latency;
defparam B1.init_file = "B1.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_A1_a;
assign select_A1_a = (tag_a == `TAG_g_A1);
reg [ram_latency:0] select_A1_reg_a;
wire [31:0] memory_controller_A1_out_a;
assign memory_controller_A1_out_a = {32{ select_A1_reg_a[ram_latency]}} & A1_out_a;

wire select_B1_a;
assign select_B1_a = (tag_a == `TAG_g_B1);
reg [ram_latency:0] select_B1_reg_a;
wire [31:0] memory_controller_B1_out_a;
assign memory_controller_B1_out_a = {32{ select_B1_reg_a[ram_latency]}} & B1_out_a;

always @(*)
begin
	A1_address_a = memory_controller_address_a [9-1+2:2] & {9{select_A1_a}};
	A1_write_enable_a = memory_controller_write_enable_a & select_A1_a;
	A1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	B1_address_a = memory_controller_address_a [9-1+2:2] & {9{select_B1_a}};
	B1_write_enable_a = memory_controller_write_enable_a & select_B1_a;
	B1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_A1_reg_a[ram_latency]}} | {2{select_B1_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_A1_out_a | memory_controller_B1_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_A1_reg_a[j+1] <= select_A1_reg_a[j];
select_B1_reg_a[j+1] <= select_B1_reg_a[j];
end
always @(*)
begin
select_A1_reg_a[0] <= select_A1_a;
select_B1_reg_a[0] <= select_B1_a;
end

reg [2:0] select_not_struct_b;

wire select_A1_b;
assign select_A1_b = (tag_b == `TAG_g_A1);
reg [ram_latency:0] select_A1_reg_b;
wire [31:0] memory_controller_A1_out_b;
assign memory_controller_A1_out_b = {32{ select_A1_reg_b[ram_latency]}} & A1_out_b;

wire select_B1_b;
assign select_B1_b = (tag_b == `TAG_g_B1);
reg [ram_latency:0] select_B1_reg_b;
wire [31:0] memory_controller_B1_out_b;
assign memory_controller_B1_out_b = {32{ select_B1_reg_b[ram_latency]}} & B1_out_b;

always @(*)
begin
	A1_address_b = memory_controller_address_b [9-1+2:2] & {9{select_A1_b}};
	A1_write_enable_b = memory_controller_write_enable_b & select_A1_b;
	A1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	B1_address_b = memory_controller_address_b [9-1+2:2] & {9{select_B1_b}};
	B1_write_enable_b = memory_controller_write_enable_b & select_B1_b;
	B1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_A1_reg_b[ram_latency]}} | {2{select_B1_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_A1_out_b | memory_controller_B1_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_A1_reg_b[j+1] <= select_A1_reg_b[j];
select_B1_reg_b[j+1] <= select_B1_reg_b[j];
end
always @(*)
begin
select_A1_reg_b[0] <= select_A1_b;
select_B1_reg_b[0] <= select_B1_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB_preheader_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_preheader_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_preheader_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_preheader_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_preheader_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_preheader_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_preheader_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_preheader_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB_preheader_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_preheader_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_preheader_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB_preheader_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB__21_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB__21_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB__21_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB__21_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB__21_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB__21_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB__21_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB__21_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB__21_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB__21_22 = 5'd22;
parameter [4:0] LEGUP_F_main_BB__21_23 = 5'd23;
parameter [4:0] LEGUP_F_main_BB__21_24 = 5'd24;
parameter [4:0] LEGUP_F_main_BB__21_25 = 5'd25;
parameter [4:0] LEGUP_F_main_BB__84_26 = 5'd26;
parameter [4:0] LEGUP_F_main_BB__86_27 = 5'd27;
parameter [4:0] LEGUP_F_main_BB__89_28 = 5'd28;
parameter [4:0] LEGUP_F_main_BB__91_29 = 5'd29;
parameter [4:0] LEGUP_F_main_BB__93_30 = 5'd30;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [63:0] main_preheader_count04;
reg [63:0] main_preheader_count04_reg;
reg [31:0] main_preheader_i03;
reg [31:0] main_preheader_i03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep40;
reg [31:0] main_preheader_1;
reg [31:0] main_preheader_1_reg;
reg [31:0] main_preheader_2;
reg [31:0] main_preheader_2_reg;
reg [31:0] main_preheader_3;
reg [31:0] main_preheader_3_reg;
reg [31:0] main_preheader_4;
reg [31:0] main_preheader_4_reg;
reg [31:0] main_preheader_5;
reg [31:0] main_preheader_5_reg;
reg [31:0] main_preheader_6;
reg [31:0] main_preheader_6_reg;
reg [31:0] main_preheader_7;
reg [31:0] main_preheader_7_reg;
reg [31:0] main_preheader_8;
reg [31:0] main_preheader_8_reg;
reg [31:0] main_preheader_9;
reg [31:0] main_preheader_9_reg;
reg [31:0] main_preheader_10;
reg [31:0] main_preheader_10_reg;
reg [31:0] main_preheader_11;
reg [31:0] main_preheader_11_reg;
reg [31:0] main_preheader_12;
reg [31:0] main_preheader_12_reg;
reg [31:0] main_preheader_13;
reg [31:0] main_preheader_13_reg;
reg [31:0] main_preheader_14;
reg [31:0] main_preheader_14_reg;
reg [31:0] main_preheader_15;
reg [31:0] main_preheader_15_reg;
reg [31:0] main_preheader_16;
reg [31:0] main_preheader_16_reg;
reg [31:0] main_preheader_17;
reg [31:0] main_preheader_17_reg;
reg [31:0] main_preheader_18;
reg [31:0] main_preheader_18_reg;
reg [31:0] main_preheader_19;
reg [31:0] main_preheader_19_reg;
reg [31:0] main_preheader_20;
reg [31:0] main_preheader_20_reg;
reg [63:0] main_21_count12;
reg [63:0] main_21_count12_reg;
reg [31:0] main_21_j01;
reg [31:0] main_21_j01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep20;
reg [31:0] main_21_22;
reg [31:0] main_21_23;
reg [31:0] main_21_24;
reg [31:0] main_21_25;
reg [31:0] main_21_26;
reg [31:0] main_21_26_reg;
reg [31:0] main_21_27;
reg [31:0] main_21_28;
reg [31:0] main_21_29;
reg [31:0] main_21_30;
reg [31:0] main_21_31;
reg [31:0] main_21_32;
reg [31:0] main_21_32_reg;
reg [31:0] main_21_33;
reg [31:0] main_21_34;
reg [31:0] main_21_35;
reg [31:0] main_21_36;
reg [31:0] main_21_37;
reg [31:0] main_21_38;
reg [31:0] main_21_38_reg;
reg [31:0] main_21_39;
reg [31:0] main_21_40;
reg [31:0] main_21_41;
reg [31:0] main_21_42;
reg [31:0] main_21_43;
reg [31:0] main_21_44;
reg [31:0] main_21_44_reg;
reg [31:0] main_21_45;
reg [31:0] main_21_46;
reg [31:0] main_21_47;
reg [31:0] main_21_48;
reg [31:0] main_21_49;
reg [31:0] main_21_50;
reg [31:0] main_21_50_reg;
reg [31:0] main_21_51;
reg [31:0] main_21_52;
reg [31:0] main_21_53;
reg [31:0] main_21_54;
reg [31:0] main_21_55;
reg [31:0] main_21_56;
reg [31:0] main_21_56_reg;
reg [31:0] main_21_57;
reg [31:0] main_21_58;
reg [31:0] main_21_59;
reg [31:0] main_21_60;
reg [31:0] main_21_61;
reg [31:0] main_21_62;
reg [31:0] main_21_62_reg;
reg [31:0] main_21_63;
reg [31:0] main_21_64;
reg [31:0] main_21_65;
reg [31:0] main_21_66;
reg [31:0] main_21_67;
reg [31:0] main_21_68;
reg [31:0] main_21_68_reg;
reg [31:0] main_21_69;
reg [31:0] main_21_70;
reg [31:0] main_21_71;
reg [31:0] main_21_72;
reg [31:0] main_21_73;
reg [31:0] main_21_74;
reg [31:0] main_21_74_reg;
reg [31:0] main_21_75;
reg [31:0] main_21_76;
reg [31:0] main_21_77;
reg [31:0] main_21_78;
reg [31:0] main_21_79;
reg [31:0] main_21_80;
reg [63:0] main_21_81;
reg [63:0] main_21_82;
reg [63:0] main_21_82_reg;
reg [31:0] main_21_83;
reg [31:0] main_21_83_reg;
reg  main_21_exitcond1;
reg  main_21_exitcond1_reg;
reg [31:0] main_84_85;
reg  main_84_exitcond;
reg  main_86_88;
reg [31:0] main_93_94;
reg  lpm_mult_main_21_23_en;
reg [31:0] main_21_23_stage0_reg;
reg  lpm_mult_main_21_25_en;
reg [31:0] main_21_25_stage0_reg;
reg  lpm_mult_main_21_28_en;
reg [31:0] main_21_28_stage0_reg;
reg  lpm_mult_main_21_31_en;
reg [31:0] main_21_31_stage0_reg;
reg  lpm_mult_main_21_34_en;
reg [31:0] main_21_34_stage0_reg;
reg  lpm_mult_main_21_37_en;
reg [31:0] main_21_37_stage0_reg;
reg  lpm_mult_main_21_40_en;
reg [31:0] main_21_40_stage0_reg;
reg  lpm_mult_main_21_43_en;
reg [31:0] main_21_43_stage0_reg;
reg  lpm_mult_main_21_46_en;
reg [31:0] main_21_46_stage0_reg;
reg  lpm_mult_main_21_49_en;
reg [31:0] main_21_49_stage0_reg;
reg  lpm_mult_main_21_52_en;
reg [31:0] main_21_52_stage0_reg;
reg  lpm_mult_main_21_55_en;
reg [31:0] main_21_55_stage0_reg;
reg  lpm_mult_main_21_58_en;
reg [31:0] main_21_58_stage0_reg;
reg  lpm_mult_main_21_61_en;
reg [31:0] main_21_61_stage0_reg;
reg  lpm_mult_main_21_64_en;
reg [31:0] main_21_64_stage0_reg;
reg  lpm_mult_main_21_67_en;
reg [31:0] main_21_67_stage0_reg;
reg  lpm_mult_main_21_70_en;
reg [31:0] main_21_70_stage0_reg;
reg  lpm_mult_main_21_73_en;
reg [31:0] main_21_73_stage0_reg;
reg  lpm_mult_main_21_76_en;
reg [31:0] main_21_76_stage0_reg;
reg  lpm_mult_main_21_79_en;
reg [31:0] main_21_79_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %86*/
	/*   %87 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i64 %82) #1*/
	if ((cur_state == LEGUP_F_main_BB__86_27)) begin
		$write("Result: %d\n", $signed(main_21_82_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_21_82_reg) === 1'bX) finish <= 0;
	end
	/* main: %89*/
	/*   %90 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__89_28)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %91*/
	/*   %92 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__91_29)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_1;
LEGUP_F_main_BB__21_13:
		next_state = LEGUP_F_main_BB__21_14;
LEGUP_F_main_BB__21_14:
		next_state = LEGUP_F_main_BB__21_15;
LEGUP_F_main_BB__21_15:
		next_state = LEGUP_F_main_BB__21_16;
LEGUP_F_main_BB__21_16:
		next_state = LEGUP_F_main_BB__21_17;
LEGUP_F_main_BB__21_17:
		next_state = LEGUP_F_main_BB__21_18;
LEGUP_F_main_BB__21_18:
		next_state = LEGUP_F_main_BB__21_19;
LEGUP_F_main_BB__21_19:
		next_state = LEGUP_F_main_BB__21_20;
LEGUP_F_main_BB__21_20:
		next_state = LEGUP_F_main_BB__21_21;
LEGUP_F_main_BB__21_21:
		next_state = LEGUP_F_main_BB__21_22;
LEGUP_F_main_BB__21_22:
		next_state = LEGUP_F_main_BB__21_23;
LEGUP_F_main_BB__21_23:
		next_state = LEGUP_F_main_BB__21_24;
LEGUP_F_main_BB__21_24:
		next_state = LEGUP_F_main_BB__21_25;
LEGUP_F_main_BB__21_25:
	if ((main_21_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__84_26;
	else if ((main_21_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__21_13;
LEGUP_F_main_BB__84_26:
	if ((main_84_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__86_27;
	else if ((main_84_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_1;
LEGUP_F_main_BB__86_27:
	if ((main_86_88 == 1'd1))
		next_state = LEGUP_F_main_BB__89_28;
	else if ((main_86_88 == 1'd0))
		next_state = LEGUP_F_main_BB__91_29;
LEGUP_F_main_BB__89_28:
		next_state = LEGUP_F_main_BB__93_30;
LEGUP_F_main_BB__91_29:
		next_state = LEGUP_F_main_BB__93_30;
LEGUP_F_main_BB__93_30:
		next_state = LEGUP_0;
LEGUP_F_main_BB_preheader_1:
		next_state = LEGUP_F_main_BB_preheader_2;
LEGUP_F_main_BB_preheader_10:
		next_state = LEGUP_F_main_BB_preheader_11;
LEGUP_F_main_BB_preheader_11:
		next_state = LEGUP_F_main_BB_preheader_12;
LEGUP_F_main_BB_preheader_12:
		next_state = LEGUP_F_main_BB__21_13;
LEGUP_F_main_BB_preheader_2:
		next_state = LEGUP_F_main_BB_preheader_3;
LEGUP_F_main_BB_preheader_3:
		next_state = LEGUP_F_main_BB_preheader_4;
LEGUP_F_main_BB_preheader_4:
		next_state = LEGUP_F_main_BB_preheader_5;
LEGUP_F_main_BB_preheader_5:
		next_state = LEGUP_F_main_BB_preheader_6;
LEGUP_F_main_BB_preheader_6:
		next_state = LEGUP_F_main_BB_preheader_7;
LEGUP_F_main_BB_preheader_7:
		next_state = LEGUP_F_main_BB_preheader_8;
LEGUP_F_main_BB_preheader_8:
		next_state = LEGUP_F_main_BB_preheader_9;
LEGUP_F_main_BB_preheader_9:
		next_state = LEGUP_F_main_BB_preheader_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader*/
	/*   %count.04 = phi i64 [ 0, %0 ], [ %82, %84 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader_count04 = 64'd0;
	end
	/* main: %.preheader*/
	/*   %count.04 = phi i64 [ 0, %0 ], [ %82, %84 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__84_26) & (memory_controller_waitrequest == 1'd0)) & (main_84_exitcond == 1'd0))) */ begin
		main_preheader_count04 = main_21_82_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %count.04 = phi i64 [ 0, %0 ], [ %82, %84 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader_count04_reg <= main_preheader_count04;
		if (start == 1'b0 && ^(main_preheader_count04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_count04_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %count.04 = phi i64 [ 0, %0 ], [ %82, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_26) & (memory_controller_waitrequest == 1'd0)) & (main_84_exitcond == 1'd0))) begin
		main_preheader_count04_reg <= main_preheader_count04;
		if (start == 1'b0 && ^(main_preheader_count04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_count04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.03 = phi i32 [ 0, %0 ], [ %85, %84 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader_i03 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.03 = phi i32 [ 0, %0 ], [ %85, %84 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__84_26) & (memory_controller_waitrequest == 1'd0)) & (main_84_exitcond == 1'd0))) */ begin
		main_preheader_i03 = main_84_85;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.03 = phi i32 [ 0, %0 ], [ %85, %84 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader_i03_reg <= main_preheader_i03;
		if (start == 1'b0 && ^(main_preheader_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i03_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.03 = phi i32 [ 0, %0 ], [ %85, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_26) & (memory_controller_waitrequest == 1'd0)) & (main_84_exitcond == 1'd0))) begin
		main_preheader_i03_reg <= main_preheader_i03;
		if (start == 1'b0 && ^(main_preheader_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep21 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 19*/
		main_preheader_scevgep21 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd19)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep21 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 19*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep21_reg <= main_preheader_scevgep21;
		if (start == 1'b0 && ^(main_preheader_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep22 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 18*/
		main_preheader_scevgep22 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd18)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep22 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 18*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep22_reg <= main_preheader_scevgep22;
		if (start == 1'b0 && ^(main_preheader_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep23 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 17*/
		main_preheader_scevgep23 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd17)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep23 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 17*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep23_reg <= main_preheader_scevgep23;
		if (start == 1'b0 && ^(main_preheader_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep24 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 16*/
		main_preheader_scevgep24 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd16)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep24 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep24_reg <= main_preheader_scevgep24;
		if (start == 1'b0 && ^(main_preheader_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep25 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 15*/
		main_preheader_scevgep25 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd15)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep25 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 15*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep25_reg <= main_preheader_scevgep25;
		if (start == 1'b0 && ^(main_preheader_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep26 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 14*/
		main_preheader_scevgep26 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd14)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep26 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 14*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep26_reg <= main_preheader_scevgep26;
		if (start == 1'b0 && ^(main_preheader_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep27 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 13*/
		main_preheader_scevgep27 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd13)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep27 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 13*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep27_reg <= main_preheader_scevgep27;
		if (start == 1'b0 && ^(main_preheader_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep28 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 12*/
		main_preheader_scevgep28 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd12)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep28 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 12*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep28_reg <= main_preheader_scevgep28;
		if (start == 1'b0 && ^(main_preheader_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep29 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 11*/
		main_preheader_scevgep29 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd11)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep29 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep29_reg <= main_preheader_scevgep29;
		if (start == 1'b0 && ^(main_preheader_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep30 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 10*/
		main_preheader_scevgep30 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd10)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep30 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 10*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep30_reg <= main_preheader_scevgep30;
		if (start == 1'b0 && ^(main_preheader_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep31 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 9*/
		main_preheader_scevgep31 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd9)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep31 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 9*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep31_reg <= main_preheader_scevgep31;
		if (start == 1'b0 && ^(main_preheader_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep32 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 8*/
		main_preheader_scevgep32 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd8)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep32 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 8*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep32_reg <= main_preheader_scevgep32;
		if (start == 1'b0 && ^(main_preheader_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep33 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 7*/
		main_preheader_scevgep33 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd7)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep33 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep33_reg <= main_preheader_scevgep33;
		if (start == 1'b0 && ^(main_preheader_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep34 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 6*/
		main_preheader_scevgep34 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd6)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep34 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep34_reg <= main_preheader_scevgep34;
		if (start == 1'b0 && ^(main_preheader_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep35 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 5*/
		main_preheader_scevgep35 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd5)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep35 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep35_reg <= main_preheader_scevgep35;
		if (start == 1'b0 && ^(main_preheader_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep36 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 4*/
		main_preheader_scevgep36 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd4)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep36 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep36_reg <= main_preheader_scevgep36;
		if (start == 1'b0 && ^(main_preheader_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep37 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 3*/
		main_preheader_scevgep37 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd3)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep37 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep37_reg <= main_preheader_scevgep37;
		if (start == 1'b0 && ^(main_preheader_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep38 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 2*/
		main_preheader_scevgep38 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd2)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep38 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		main_preheader_scevgep38_reg <= main_preheader_scevgep38;
		if (start == 1'b0 && ^(main_preheader_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep39 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 1*/
		main_preheader_scevgep39 = (`TAG_g_A1_a + ((80 * main_preheader_i03_reg) + (4 * 32'd1)));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep40 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.03, i32 0*/
		main_preheader_scevgep40 = (`TAG_g_A1_a + (80 * main_preheader_i03_reg));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
		main_preheader_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		main_preheader_1_reg <= main_preheader_1;
		if (start == 1'b0 && ^(main_preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
		main_preheader_2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		main_preheader_2_reg <= main_preheader_2;
		if (start == 1'b0 && ^(main_preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
		main_preheader_3 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_3_reg <= main_preheader_3;
		if (start == 1'b0 && ^(main_preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
		main_preheader_4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_4_reg <= main_preheader_4;
		if (start == 1'b0 && ^(main_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
		main_preheader_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		main_preheader_5_reg <= main_preheader_5;
		if (start == 1'b0 && ^(main_preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
		main_preheader_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		main_preheader_6_reg <= main_preheader_6;
		if (start == 1'b0 && ^(main_preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_preheader_7 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		main_preheader_7_reg <= main_preheader_7;
		if (start == 1'b0 && ^(main_preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
		main_preheader_8 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		main_preheader_8_reg <= main_preheader_8;
		if (start == 1'b0 && ^(main_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
		main_preheader_9 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		main_preheader_9_reg <= main_preheader_9;
		if (start == 1'b0 && ^(main_preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
		main_preheader_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		main_preheader_10_reg <= main_preheader_10;
		if (start == 1'b0 && ^(main_preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
		main_preheader_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		main_preheader_11_reg <= main_preheader_11;
		if (start == 1'b0 && ^(main_preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
		main_preheader_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		main_preheader_12_reg <= main_preheader_12;
		if (start == 1'b0 && ^(main_preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
		main_preheader_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		main_preheader_13_reg <= main_preheader_13;
		if (start == 1'b0 && ^(main_preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
		main_preheader_14 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		main_preheader_14_reg <= main_preheader_14;
		if (start == 1'b0 && ^(main_preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
		main_preheader_15 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		main_preheader_15_reg <= main_preheader_15;
		if (start == 1'b0 && ^(main_preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
		main_preheader_16 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		main_preheader_16_reg <= main_preheader_16;
		if (start == 1'b0 && ^(main_preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
		main_preheader_17 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_11)) begin
		main_preheader_17_reg <= main_preheader_17;
		if (start == 1'b0 && ^(main_preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
		main_preheader_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_11)) begin
		main_preheader_18_reg <= main_preheader_18;
		if (start == 1'b0 && ^(main_preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
		main_preheader_19 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_12)) begin
		main_preheader_19_reg <= main_preheader_19;
		if (start == 1'b0 && ^(main_preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
		main_preheader_20 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_12)) begin
		main_preheader_20_reg <= main_preheader_20;
		if (start == 1'b0 && ^(main_preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %count.12 = phi i64 [ %count.04, %.preheader ], [ %82, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_count12 = main_preheader_count04_reg;
	end
	/* main: %21*/
	/*   %count.12 = phi i64 [ %count.04, %.preheader ], [ %82, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__21_25) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond1_reg == 1'd0))) */ begin
		main_21_count12 = main_21_82;
	end
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %count.12 = phi i64 [ %count.04, %.preheader ], [ %82, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_count12_reg <= main_21_count12;
		if (start == 1'b0 && ^(main_21_count12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_count12_reg"); $finish; end
	end
	/* main: %21*/
	/*   %count.12 = phi i64 [ %count.04, %.preheader ], [ %82, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_25) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond1_reg == 1'd0))) begin
		main_21_count12_reg <= main_21_count12;
		if (start == 1'b0 && ^(main_21_count12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_count12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %j.01 = phi i32 [ 0, %.preheader ], [ %83, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_j01 = 32'd0;
	end
	/* main: %21*/
	/*   %j.01 = phi i32 [ 0, %.preheader ], [ %83, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__21_25) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond1_reg == 1'd0))) */ begin
		main_21_j01 = main_21_83_reg;
	end
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %j.01 = phi i32 [ 0, %.preheader ], [ %83, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_j01_reg <= main_21_j01;
		if (start == 1'b0 && ^(main_21_j01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_j01_reg"); $finish; end
	end
	/* main: %21*/
	/*   %j.01 = phi i32 [ 0, %.preheader ], [ %83, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_25) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond1_reg == 1'd0))) begin
		main_21_j01_reg <= main_21_j01;
		if (start == 1'b0 && ^(main_21_j01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_j01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 19, i32 %j.01*/
		main_21_scevgep = (`TAG_g_B1_a + ((80 * 32'd19) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 19, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep_reg <= main_21_scevgep;
		if (start == 1'b0 && ^(main_21_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep2 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 18, i32 %j.01*/
		main_21_scevgep2 = (`TAG_g_B1_a + ((80 * 32'd18) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep2 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 18, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep2_reg <= main_21_scevgep2;
		if (start == 1'b0 && ^(main_21_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep3 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 17, i32 %j.01*/
		main_21_scevgep3 = (`TAG_g_B1_a + ((80 * 32'd17) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep3 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 17, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep3_reg <= main_21_scevgep3;
		if (start == 1'b0 && ^(main_21_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep4 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 16, i32 %j.01*/
		main_21_scevgep4 = (`TAG_g_B1_a + ((80 * 32'd16) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep4 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 16, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep4_reg <= main_21_scevgep4;
		if (start == 1'b0 && ^(main_21_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep5 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 15, i32 %j.01*/
		main_21_scevgep5 = (`TAG_g_B1_a + ((80 * 32'd15) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep5 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 15, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep5_reg <= main_21_scevgep5;
		if (start == 1'b0 && ^(main_21_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep6 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 14, i32 %j.01*/
		main_21_scevgep6 = (`TAG_g_B1_a + ((80 * 32'd14) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep6 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 14, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep6_reg <= main_21_scevgep6;
		if (start == 1'b0 && ^(main_21_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep7 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 13, i32 %j.01*/
		main_21_scevgep7 = (`TAG_g_B1_a + ((80 * 32'd13) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep7 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 13, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep7_reg <= main_21_scevgep7;
		if (start == 1'b0 && ^(main_21_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep8 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 12, i32 %j.01*/
		main_21_scevgep8 = (`TAG_g_B1_a + ((80 * 32'd12) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep8 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 12, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep8_reg <= main_21_scevgep8;
		if (start == 1'b0 && ^(main_21_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep9 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 11, i32 %j.01*/
		main_21_scevgep9 = (`TAG_g_B1_a + ((80 * 32'd11) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep9 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 11, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep9_reg <= main_21_scevgep9;
		if (start == 1'b0 && ^(main_21_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep10 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 10, i32 %j.01*/
		main_21_scevgep10 = (`TAG_g_B1_a + ((80 * 32'd10) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep10 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 10, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep10_reg <= main_21_scevgep10;
		if (start == 1'b0 && ^(main_21_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep11 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 9, i32 %j.01*/
		main_21_scevgep11 = (`TAG_g_B1_a + ((80 * 32'd9) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep11 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 9, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep11_reg <= main_21_scevgep11;
		if (start == 1'b0 && ^(main_21_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep12 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 8, i32 %j.01*/
		main_21_scevgep12 = (`TAG_g_B1_a + ((80 * 32'd8) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep12 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 8, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep12_reg <= main_21_scevgep12;
		if (start == 1'b0 && ^(main_21_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep13 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 7, i32 %j.01*/
		main_21_scevgep13 = (`TAG_g_B1_a + ((80 * 32'd7) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep13 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 7, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep13_reg <= main_21_scevgep13;
		if (start == 1'b0 && ^(main_21_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep14 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 6, i32 %j.01*/
		main_21_scevgep14 = (`TAG_g_B1_a + ((80 * 32'd6) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep14 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 6, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep14_reg <= main_21_scevgep14;
		if (start == 1'b0 && ^(main_21_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep15 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 5, i32 %j.01*/
		main_21_scevgep15 = (`TAG_g_B1_a + ((80 * 32'd5) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep15 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 5, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep15_reg <= main_21_scevgep15;
		if (start == 1'b0 && ^(main_21_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep16 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 4, i32 %j.01*/
		main_21_scevgep16 = (`TAG_g_B1_a + ((80 * 32'd4) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep16 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 4, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep16_reg <= main_21_scevgep16;
		if (start == 1'b0 && ^(main_21_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep17 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 3, i32 %j.01*/
		main_21_scevgep17 = (`TAG_g_B1_a + ((80 * 32'd3) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep17 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 3, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep17_reg <= main_21_scevgep17;
		if (start == 1'b0 && ^(main_21_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep18 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 2, i32 %j.01*/
		main_21_scevgep18 = (`TAG_g_B1_a + ((80 * 32'd2) + (4 * main_21_j01_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep18 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 2, i32 %j.01*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_scevgep18_reg <= main_21_scevgep18;
		if (start == 1'b0 && ^(main_21_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep19 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 1, i32 %j.01*/
		main_21_scevgep19 = (`TAG_g_B1_a + ((80 * 32'd1) + (4 * main_21_j01_reg)));
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep20 = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 0, i32 %j.01*/
		main_21_scevgep20 = (`TAG_g_B1_a + (4 * main_21_j01_reg));
end
always @(*) begin
	/* main: %21*/
	/*   %22 = load i32* %scevgep20, align 4, !tbaa !1*/
		main_21_22 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_23 = main_21_23_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %24 = load i32* %scevgep19, align 4, !tbaa !1*/
		main_21_24 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_25 = main_21_25_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %26 = add nsw i32 %23, %25*/
		main_21_26 = (main_21_23 + main_21_25);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %26 = add nsw i32 %23, %25*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		main_21_26_reg <= main_21_26;
		if (start == 1'b0 && ^(main_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %27 = load i32* %scevgep18, align 4, !tbaa !1*/
		main_21_27 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_28 = main_21_28_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %29 = add nsw i32 %26, %28*/
		main_21_29 = (main_21_26_reg + main_21_28);
end
always @(*) begin
	/* main: %21*/
	/*   %30 = load i32* %scevgep17, align 4, !tbaa !1*/
		main_21_30 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_31 = main_21_31_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %32 = add nsw i32 %29, %31*/
		main_21_32 = (main_21_29 + main_21_31);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %32 = add nsw i32 %29, %31*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		main_21_32_reg <= main_21_32;
		if (start == 1'b0 && ^(main_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %33 = load i32* %scevgep16, align 4, !tbaa !1*/
		main_21_33 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_34 = main_21_34_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %35 = add nsw i32 %34, %32*/
		main_21_35 = (main_21_34 + main_21_32_reg);
end
always @(*) begin
	/* main: %21*/
	/*   %36 = load i32* %scevgep15, align 4, !tbaa !1*/
		main_21_36 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_37 = main_21_37_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %38 = add nsw i32 %35, %37*/
		main_21_38 = (main_21_35 + main_21_37);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %38 = add nsw i32 %35, %37*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		main_21_38_reg <= main_21_38;
		if (start == 1'b0 && ^(main_21_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %39 = load i32* %scevgep14, align 4, !tbaa !1*/
		main_21_39 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_40 = main_21_40_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %41 = add nsw i32 %38, %40*/
		main_21_41 = (main_21_38_reg + main_21_40);
end
always @(*) begin
	/* main: %21*/
	/*   %42 = load i32* %scevgep13, align 4, !tbaa !1*/
		main_21_42 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_43 = main_21_43_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %44 = add nsw i32 %41, %43*/
		main_21_44 = (main_21_41 + main_21_43);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %44 = add nsw i32 %41, %43*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		main_21_44_reg <= main_21_44;
		if (start == 1'b0 && ^(main_21_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %45 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_21_45 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_46 = main_21_46_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %47 = add nsw i32 %46, %44*/
		main_21_47 = (main_21_46 + main_21_44_reg);
end
always @(*) begin
	/* main: %21*/
	/*   %48 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_21_48 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_49 = main_21_49_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %50 = add nsw i32 %47, %49*/
		main_21_50 = (main_21_47 + main_21_49);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %50 = add nsw i32 %47, %49*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		main_21_50_reg <= main_21_50;
		if (start == 1'b0 && ^(main_21_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %51 = load i32* %scevgep10, align 4, !tbaa !1*/
		main_21_51 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_52 = main_21_52_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %53 = add nsw i32 %50, %52*/
		main_21_53 = (main_21_50_reg + main_21_52);
end
always @(*) begin
	/* main: %21*/
	/*   %54 = load i32* %scevgep9, align 4, !tbaa !1*/
		main_21_54 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_55 = main_21_55_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %56 = add nsw i32 %53, %55*/
		main_21_56 = (main_21_53 + main_21_55);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %56 = add nsw i32 %53, %55*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		main_21_56_reg <= main_21_56;
		if (start == 1'b0 && ^(main_21_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %57 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_21_57 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_58 = main_21_58_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %59 = add nsw i32 %58, %56*/
		main_21_59 = (main_21_58 + main_21_56_reg);
end
always @(*) begin
	/* main: %21*/
	/*   %60 = load i32* %scevgep7, align 4, !tbaa !1*/
		main_21_60 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_61 = main_21_61_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %62 = add nsw i32 %59, %61*/
		main_21_62 = (main_21_59 + main_21_61);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %62 = add nsw i32 %59, %61*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		main_21_62_reg <= main_21_62;
		if (start == 1'b0 && ^(main_21_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %63 = load i32* %scevgep6, align 4, !tbaa !1*/
		main_21_63 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_64 = main_21_64_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %65 = add nsw i32 %62, %64*/
		main_21_65 = (main_21_62_reg + main_21_64);
end
always @(*) begin
	/* main: %21*/
	/*   %66 = load i32* %scevgep5, align 4, !tbaa !1*/
		main_21_66 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_67 = main_21_67_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %68 = add nsw i32 %65, %67*/
		main_21_68 = (main_21_65 + main_21_67);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %68 = add nsw i32 %65, %67*/
	if ((cur_state == LEGUP_F_main_BB__21_23)) begin
		main_21_68_reg <= main_21_68;
		if (start == 1'b0 && ^(main_21_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %69 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_21_69 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_70 = main_21_70_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %71 = add nsw i32 %70, %68*/
		main_21_71 = (main_21_70 + main_21_68_reg);
end
always @(*) begin
	/* main: %21*/
	/*   %72 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_21_72 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_73 = main_21_73_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %74 = add nsw i32 %71, %73*/
		main_21_74 = (main_21_71 + main_21_73);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %74 = add nsw i32 %71, %73*/
	if ((cur_state == LEGUP_F_main_BB__21_24)) begin
		main_21_74_reg <= main_21_74;
		if (start == 1'b0 && ^(main_21_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %75 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_21_75 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_21_76 = main_21_76_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %77 = add nsw i32 %74, %76*/
		main_21_77 = (main_21_74_reg + main_21_76);
end
always @(*) begin
	/* main: %21*/
	/*   %78 = load i32* %scevgep, align 4, !tbaa !1*/
		main_21_78 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_21_79 = main_21_79_stage0_reg;
end
always @(*) begin
	/* main: %21*/
	/*   %80 = add nsw i32 %77, %79*/
		main_21_80 = (main_21_77 + main_21_79);
end
always @(*) begin
	/* main: %21*/
	/*   %81 = sext i32 %80 to i64*/
		main_21_81 = $signed(main_21_80);
end
always @(*) begin
	/* main: %21*/
	/*   %82 = add i64 %81, %count.12*/
		main_21_82 = (main_21_81 + main_21_count12_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %82 = add i64 %81, %count.12*/
	if ((cur_state == LEGUP_F_main_BB__21_25)) begin
		main_21_82_reg <= main_21_82;
		if (start == 1'b0 && ^(main_21_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %83 = add nsw i32 %j.01, 1*/
		main_21_83 = (main_21_j01_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %83 = add nsw i32 %j.01, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_83_reg <= main_21_83;
		if (start == 1'b0 && ^(main_21_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %exitcond1 = icmp eq i32 %83, 20*/
		main_21_exitcond1 = (main_21_83 == 32'd20);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %exitcond1 = icmp eq i32 %83, 20*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_exitcond1_reg <= main_21_exitcond1;
		if (start == 1'b0 && ^(main_21_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %85 = add nsw i32 %i.03, 1*/
		main_84_85 = (main_preheader_i03_reg + 32'd1);
end
always @(*) begin
	/* main: %84*/
	/*   %exitcond = icmp eq i32 %85, 20*/
		main_84_exitcond = (main_84_85 == 32'd20);
end
always @(*) begin
	/* main: %86*/
	/*   %88 = icmp eq i64 %82, 962122000*/
		main_86_88 = (main_21_82_reg == 64'd962122000);
end
always @(*) begin
	/* main: %93*/
	/*   %94 = trunc i64 %82 to i32*/
		main_93_94 = main_21_82_reg[31:0];
end
always @(*) begin
	lpm_mult_main_21_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %23 = mul nsw i32 %22, %1*/
	if ((lpm_mult_main_21_23_en == 1'd1)) begin
		main_21_23_stage0_reg <= (main_21_22 * main_preheader_1_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %25 = mul nsw i32 %24, %2*/
	if ((lpm_mult_main_21_25_en == 1'd1)) begin
		main_21_25_stage0_reg <= (main_21_24 * main_preheader_2_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %28 = mul nsw i32 %27, %3*/
	if ((lpm_mult_main_21_28_en == 1'd1)) begin
		main_21_28_stage0_reg <= (main_21_27 * main_preheader_3_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %31 = mul nsw i32 %30, %4*/
	if ((lpm_mult_main_21_31_en == 1'd1)) begin
		main_21_31_stage0_reg <= (main_21_30 * main_preheader_4_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %34 = mul nsw i32 %33, %5*/
	if ((lpm_mult_main_21_34_en == 1'd1)) begin
		main_21_34_stage0_reg <= (main_21_33 * main_preheader_5_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %37 = mul nsw i32 %36, %6*/
	if ((lpm_mult_main_21_37_en == 1'd1)) begin
		main_21_37_stage0_reg <= (main_21_36 * main_preheader_6_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %40 = mul nsw i32 %39, %7*/
	if ((lpm_mult_main_21_40_en == 1'd1)) begin
		main_21_40_stage0_reg <= (main_21_39 * main_preheader_7_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %43 = mul nsw i32 %42, %8*/
	if ((lpm_mult_main_21_43_en == 1'd1)) begin
		main_21_43_stage0_reg <= (main_21_42 * main_preheader_8_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %46 = mul nsw i32 %45, %9*/
	if ((lpm_mult_main_21_46_en == 1'd1)) begin
		main_21_46_stage0_reg <= (main_21_45 * main_preheader_9_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %49 = mul nsw i32 %48, %10*/
	if ((lpm_mult_main_21_49_en == 1'd1)) begin
		main_21_49_stage0_reg <= (main_21_48 * main_preheader_10_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %52 = mul nsw i32 %51, %11*/
	if ((lpm_mult_main_21_52_en == 1'd1)) begin
		main_21_52_stage0_reg <= (main_21_51 * main_preheader_11_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %55 = mul nsw i32 %54, %12*/
	if ((lpm_mult_main_21_55_en == 1'd1)) begin
		main_21_55_stage0_reg <= (main_21_54 * main_preheader_12_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %58 = mul nsw i32 %57, %13*/
	if ((lpm_mult_main_21_58_en == 1'd1)) begin
		main_21_58_stage0_reg <= (main_21_57 * main_preheader_13_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %61 = mul nsw i32 %60, %14*/
	if ((lpm_mult_main_21_61_en == 1'd1)) begin
		main_21_61_stage0_reg <= (main_21_60 * main_preheader_14_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %64 = mul nsw i32 %63, %15*/
	if ((lpm_mult_main_21_64_en == 1'd1)) begin
		main_21_64_stage0_reg <= (main_21_63 * main_preheader_15_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %67 = mul nsw i32 %66, %16*/
	if ((lpm_mult_main_21_67_en == 1'd1)) begin
		main_21_67_stage0_reg <= (main_21_66 * main_preheader_16_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %70 = mul nsw i32 %69, %17*/
	if ((lpm_mult_main_21_70_en == 1'd1)) begin
		main_21_70_stage0_reg <= (main_21_69 * main_preheader_17_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %73 = mul nsw i32 %72, %18*/
	if ((lpm_mult_main_21_73_en == 1'd1)) begin
		main_21_73_stage0_reg <= (main_21_72 * main_preheader_18_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %76 = mul nsw i32 %75, %19*/
	if ((lpm_mult_main_21_76_en == 1'd1)) begin
		main_21_76_stage0_reg <= (main_21_75 * main_preheader_19_reg);
	end
end
always @(*) begin
	lpm_mult_main_21_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %79 = mul nsw i32 %78, %20*/
	if ((lpm_mult_main_21_79_en == 1'd1)) begin
		main_21_79_stage0_reg <= (main_21_78 * main_preheader_20_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %93*/
	/*   ret i32 %94*/
	if ((cur_state == LEGUP_F_main_BB__93_30)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %22 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %33 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %39 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %45 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %57 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %63 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %69 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %75 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_address_a = main_preheader_scevgep40;
	end
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_address_a = main_preheader_scevgep38_reg;
	end
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_address_a = main_preheader_scevgep36_reg;
	end
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_address_a = main_preheader_scevgep34_reg;
	end
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_address_a = main_preheader_scevgep32_reg;
	end
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_address_a = main_preheader_scevgep30_reg;
	end
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_address_a = main_preheader_scevgep28_reg;
	end
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_address_a = main_preheader_scevgep26_reg;
	end
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_address_a = main_preheader_scevgep24_reg;
	end
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_address_a = main_preheader_scevgep22_reg;
	end
	/* main: %21*/
	/*   %22 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_address_a = main_21_scevgep20;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_address_a = main_21_scevgep18_reg;
	end
	/* main: %21*/
	/*   %33 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_address_a = main_21_scevgep16_reg;
	end
	/* main: %21*/
	/*   %39 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_address_a = main_21_scevgep14_reg;
	end
	/* main: %21*/
	/*   %45 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_address_a = main_21_scevgep12_reg;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_address_a = main_21_scevgep10_reg;
	end
	/* main: %21*/
	/*   %57 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_address_a = main_21_scevgep8_reg;
	end
	/* main: %21*/
	/*   %63 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_address_a = main_21_scevgep6_reg;
	end
	/* main: %21*/
	/*   %69 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_address_a = main_21_scevgep4_reg;
	end
	/* main: %21*/
	/*   %75 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_address_a = main_21_scevgep2_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %22 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %33 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %39 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %45 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %57 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %63 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %69 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %75 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %1 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %3 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %5 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %7 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %9 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %11 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %15 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %17 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %19 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %22 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %33 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %39 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %45 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %57 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %63 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %69 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %75 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %24 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %30 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %36 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %42 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %48 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %54 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %60 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %66 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %78 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_address_b = main_preheader_scevgep39;
	end
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_address_b = main_preheader_scevgep37_reg;
	end
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_address_b = main_preheader_scevgep35_reg;
	end
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_address_b = main_preheader_scevgep33_reg;
	end
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_address_b = main_preheader_scevgep31_reg;
	end
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_address_b = main_preheader_scevgep29_reg;
	end
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_address_b = main_preheader_scevgep27_reg;
	end
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_address_b = main_preheader_scevgep25_reg;
	end
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_address_b = main_preheader_scevgep23_reg;
	end
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_address_b = main_preheader_scevgep21_reg;
	end
	/* main: %21*/
	/*   %24 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_address_b = main_21_scevgep19;
	end
	/* main: %21*/
	/*   %30 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_address_b = main_21_scevgep17_reg;
	end
	/* main: %21*/
	/*   %36 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_address_b = main_21_scevgep15_reg;
	end
	/* main: %21*/
	/*   %42 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_address_b = main_21_scevgep13_reg;
	end
	/* main: %21*/
	/*   %48 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_address_b = main_21_scevgep11_reg;
	end
	/* main: %21*/
	/*   %54 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_address_b = main_21_scevgep9_reg;
	end
	/* main: %21*/
	/*   %60 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_address_b = main_21_scevgep7_reg;
	end
	/* main: %21*/
	/*   %66 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_address_b = main_21_scevgep5_reg;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_address_b = main_21_scevgep3_reg;
	end
	/* main: %21*/
	/*   %78 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_address_b = main_21_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %24 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %30 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %36 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %42 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %48 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %54 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %60 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %66 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %78 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %2 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %4 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %6 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %8 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %10 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %12 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %16 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %18 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %20 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %24 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %30 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %36 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %42 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %48 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %54 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %60 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %66 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %78 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_22)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %93*/
	/*   ret i32 %94*/
	if ((cur_state == LEGUP_F_main_BB__93_30)) begin
		return_val <= main_93_94;
		if (start == 1'b0 && ^(main_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
