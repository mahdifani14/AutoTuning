//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Dec  8 15:18:55 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @correctOutput = internal unnamed_addr constant [100 x i32] [i32 3, i32 5, i32 11, i32 13, i32 14, i32 21, i32 24, i32 27, i32 29, i32 37, i32 45, i32 46, i32 50, i32 56, i32 56, i32 62, i32 62, i32 6...
`define TAG_g_correctOutput `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_correctOutput_a {`TAG_g_correctOutput, 23'd0}
// @input = internal unnamed_addr constant [100 x i32] [i32 283, i32 286, i32 177, i32 115, i32 293, i32 235, i32 286, i32 192, i32 249, i32 121, i32 62, i32 127, i32 290, i32 259, i32 263, i32 226, i32 ...
`define TAG_g_input_var0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_input_var0_a {`TAG_g_input_var0, 23'd0}
// @y = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_y `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_y_a {`TAG_g_y, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] input_var0_address_a;
reg [6:0] input_var0_address_b;
reg input_var0_write_enable_a;
reg input_var0_write_enable_b;
reg [31:0] input_var0_in_a;
reg [31:0] input_var0_in_b;
wire [31:0] input_var0_out_a;
wire [31:0] input_var0_out_b;

// @input = internal unnamed_addr constant [100 x i32] [i32 283, i32 286, i32 177, i32 115, i32 293, i32 235, i32 286, i32 192, i32 249, i32 121, i32 62, i32 127, i32 290, i32 259, i32 263, i32 226, i32 ...
rom_dual_port input_var0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( input_var0_address_a ),
	.address_b( input_var0_address_b ),
	.q_a( input_var0_out_a ),
	.q_b( input_var0_out_b)
);
defparam input_var0.width_a = 32;
defparam input_var0.width_b = 32;
defparam input_var0.widthad_a = 7;
defparam input_var0.widthad_b = 7;
defparam input_var0.numwords_a = 100;
defparam input_var0.numwords_b = 100;
defparam input_var0.latency = ram_latency;
defparam input_var0.init_file = "input_var0.mif";

reg [6:0] correctOutput_address_a;
reg [6:0] correctOutput_address_b;
reg correctOutput_write_enable_a;
reg correctOutput_write_enable_b;
reg [31:0] correctOutput_in_a;
reg [31:0] correctOutput_in_b;
wire [31:0] correctOutput_out_a;
wire [31:0] correctOutput_out_b;

// @correctOutput = internal unnamed_addr constant [100 x i32] [i32 3, i32 5, i32 11, i32 13, i32 14, i32 21, i32 24, i32 27, i32 29, i32 37, i32 45, i32 46, i32 50, i32 56, i32 56, i32 62, i32 62, i32 6...
rom_dual_port correctOutput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( correctOutput_address_a ),
	.address_b( correctOutput_address_b ),
	.q_a( correctOutput_out_a ),
	.q_b( correctOutput_out_b)
);
defparam correctOutput.width_a = 32;
defparam correctOutput.width_b = 32;
defparam correctOutput.widthad_a = 7;
defparam correctOutput.widthad_b = 7;
defparam correctOutput.numwords_a = 100;
defparam correctOutput.numwords_b = 100;
defparam correctOutput.latency = ram_latency;
defparam correctOutput.init_file = "correctOutput.mif";

reg [6:0] y_address_a;
reg [6:0] y_address_b;
reg y_write_enable_a;
reg y_write_enable_b;
reg [31:0] y_in_a;
reg [31:0] y_in_b;
wire [31:0] y_out_a;
wire [31:0] y_out_b;

// @y = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port y (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( y_address_a ),
	.address_b( y_address_b ),
	.wren_a( y_write_enable_a ),
	.wren_b( y_write_enable_b ),
	.data_a( y_in_a ),
	.data_b( y_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( y_out_a ),
	.q_b( y_out_b)
);
defparam y.width_a = 32;
defparam y.width_b = 32;
defparam y.widthad_a = 7;
defparam y.widthad_b = 7;
defparam y.width_be_a = 1;
defparam y.width_be_b = 1;
defparam y.numwords_a = 100;
defparam y.numwords_b = 100;
defparam y.latency = ram_latency;
defparam y.init_file = "y.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_input_var0_a;
assign select_input_var0_a = (tag_a == `TAG_g_input_var0);
reg [ram_latency:0] select_input_var0_reg_a;
wire [31:0] memory_controller_input_var0_out_a;
assign memory_controller_input_var0_out_a = {32{ select_input_var0_reg_a[ram_latency]}} & input_var0_out_a;

wire select_correctOutput_a;
assign select_correctOutput_a = (tag_a == `TAG_g_correctOutput);
reg [ram_latency:0] select_correctOutput_reg_a;
wire [31:0] memory_controller_correctOutput_out_a;
assign memory_controller_correctOutput_out_a = {32{ select_correctOutput_reg_a[ram_latency]}} & correctOutput_out_a;

wire select_y_a;
assign select_y_a = (tag_a == `TAG_g_y);
reg [ram_latency:0] select_y_reg_a;
wire [31:0] memory_controller_y_out_a;
assign memory_controller_y_out_a = {32{ select_y_reg_a[ram_latency]}} & y_out_a;

always @(*)
begin
	input_var0_address_a = memory_controller_address_a [7-1+2:2] & {7{select_input_var0_a}};
	input_var0_write_enable_a = memory_controller_write_enable_a & select_input_var0_a;
	input_var0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	correctOutput_address_a = memory_controller_address_a [7-1+2:2] & {7{select_correctOutput_a}};
	correctOutput_write_enable_a = memory_controller_write_enable_a & select_correctOutput_a;
	correctOutput_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	y_address_a = memory_controller_address_a [7-1+2:2] & {7{select_y_a}};
	y_write_enable_a = memory_controller_write_enable_a & select_y_a;
	y_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_input_var0_reg_a[ram_latency]}} | {2{select_correctOutput_reg_a[ram_latency]}} | {2{select_y_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_input_var0_out_a | memory_controller_correctOutput_out_a | memory_controller_y_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_input_var0_reg_a[j+1] <= select_input_var0_reg_a[j];
select_correctOutput_reg_a[j+1] <= select_correctOutput_reg_a[j];
select_y_reg_a[j+1] <= select_y_reg_a[j];
end
always @(*)
begin
select_input_var0_reg_a[0] <= select_input_var0_a;
select_correctOutput_reg_a[0] <= select_correctOutput_a;
select_y_reg_a[0] <= select_y_a;
end

reg [2:0] select_not_struct_b;

wire select_input_var0_b;
assign select_input_var0_b = (tag_b == `TAG_g_input_var0);
reg [ram_latency:0] select_input_var0_reg_b;
wire [31:0] memory_controller_input_var0_out_b;
assign memory_controller_input_var0_out_b = {32{ select_input_var0_reg_b[ram_latency]}} & input_var0_out_b;

wire select_correctOutput_b;
assign select_correctOutput_b = (tag_b == `TAG_g_correctOutput);
reg [ram_latency:0] select_correctOutput_reg_b;
wire [31:0] memory_controller_correctOutput_out_b;
assign memory_controller_correctOutput_out_b = {32{ select_correctOutput_reg_b[ram_latency]}} & correctOutput_out_b;

wire select_y_b;
assign select_y_b = (tag_b == `TAG_g_y);
reg [ram_latency:0] select_y_reg_b;
wire [31:0] memory_controller_y_out_b;
assign memory_controller_y_out_b = {32{ select_y_reg_b[ram_latency]}} & y_out_b;

always @(*)
begin
	input_var0_address_b = memory_controller_address_b [7-1+2:2] & {7{select_input_var0_b}};
	input_var0_write_enable_b = memory_controller_write_enable_b & select_input_var0_b;
	input_var0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	correctOutput_address_b = memory_controller_address_b [7-1+2:2] & {7{select_correctOutput_b}};
	correctOutput_write_enable_b = memory_controller_write_enable_b & select_correctOutput_b;
	correctOutput_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	y_address_b = memory_controller_address_b [7-1+2:2] & {7{select_y_b}};
	y_write_enable_b = memory_controller_write_enable_b & select_y_b;
	y_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_input_var0_reg_b[ram_latency]}} | {2{select_correctOutput_reg_b[ram_latency]}} | {2{select_y_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_input_var0_out_b | memory_controller_correctOutput_out_b | memory_controller_y_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_input_var0_reg_b[j+1] <= select_input_var0_reg_b[j];
select_correctOutput_reg_b[j+1] <= select_correctOutput_reg_b[j];
select_y_reg_b[j+1] <= select_y_reg_b[j];
end
always @(*)
begin
select_input_var0_reg_b[0] <= select_input_var0_b;
select_correctOutput_reg_b[0] <= select_correctOutput_b;
select_y_reg_b[0] <= select_y_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [10:0] LEGUP_0 = 11'd0;
parameter [10:0] LEGUP_F_main_BB_lrph128i_1 = 11'd1;
parameter [10:0] LEGUP_F_main_BB_lrph128i_2 = 11'd2;
parameter [10:0] LEGUP_F_main_BB_lrph128i_3 = 11'd3;
parameter [10:0] LEGUP_F_main_BB_lrph128i_4 = 11'd4;
parameter [10:0] LEGUP_F_main_BB_lrph27ipreheader_5 = 11'd5;
parameter [10:0] LEGUP_F_main_BB_loopexit12iloopexit_6 = 11'd6;
parameter [10:0] LEGUP_F_main_BB_loopexit12i_7 = 11'd7;
parameter [10:0] LEGUP_F_main_BB_sortexitpreheader_8 = 11'd8;
parameter [10:0] LEGUP_F_main_BB_lrph27i_9 = 11'd9;
parameter [10:0] LEGUP_F_main_BB_lrph27i_10 = 11'd10;
parameter [10:0] LEGUP_F_main_BB_lrph27i_11 = 11'd11;
parameter [10:0] LEGUP_F_main_BB__31_12 = 11'd12;
parameter [10:0] LEGUP_F_main_BB__31_13 = 11'd13;
parameter [10:0] LEGUP_F_main_BB__31_14 = 11'd14;
parameter [10:0] LEGUP_F_main_BB__31_15 = 11'd15;
parameter [10:0] LEGUP_F_main_BB__31_16 = 11'd16;
parameter [10:0] LEGUP_F_main_BB__46_17 = 11'd17;
parameter [10:0] LEGUP_F_main_BB__46_18 = 11'd18;
parameter [10:0] LEGUP_F_main_BB__46_19 = 11'd19;
parameter [10:0] LEGUP_F_main_BB__46_20 = 11'd20;
parameter [10:0] LEGUP_F_main_BB__46_21 = 11'd21;
parameter [10:0] LEGUP_F_main_BB__48_22 = 11'd22;
parameter [10:0] LEGUP_F_main_BB__48_23 = 11'd23;
parameter [10:0] LEGUP_F_main_BB__48_24 = 11'd24;
parameter [10:0] LEGUP_F_main_BB__52_25 = 11'd25;
parameter [10:0] LEGUP_F_main_BB__52_26 = 11'd26;
parameter [10:0] LEGUP_F_main_BB__52_27 = 11'd27;
parameter [10:0] LEGUP_F_main_BB__52_28 = 11'd28;
parameter [10:0] LEGUP_F_main_BB__52_29 = 11'd29;
parameter [10:0] LEGUP_F_main_BB__54_30 = 11'd30;
parameter [10:0] LEGUP_F_main_BB__54_31 = 11'd31;
parameter [10:0] LEGUP_F_main_BB__54_32 = 11'd32;
parameter [10:0] LEGUP_F_main_BB__58_33 = 11'd33;
parameter [10:0] LEGUP_F_main_BB__58_34 = 11'd34;
parameter [10:0] LEGUP_F_main_BB__58_35 = 11'd35;
parameter [10:0] LEGUP_F_main_BB__58_36 = 11'd36;
parameter [10:0] LEGUP_F_main_BB__58_37 = 11'd37;
parameter [10:0] LEGUP_F_main_BB__60_38 = 11'd38;
parameter [10:0] LEGUP_F_main_BB__60_39 = 11'd39;
parameter [10:0] LEGUP_F_main_BB__60_40 = 11'd40;
parameter [10:0] LEGUP_F_main_BB__64_41 = 11'd41;
parameter [10:0] LEGUP_F_main_BB__64_42 = 11'd42;
parameter [10:0] LEGUP_F_main_BB__64_43 = 11'd43;
parameter [10:0] LEGUP_F_main_BB__64_44 = 11'd44;
parameter [10:0] LEGUP_F_main_BB__64_45 = 11'd45;
parameter [10:0] LEGUP_F_main_BB__66_46 = 11'd46;
parameter [10:0] LEGUP_F_main_BB__66_47 = 11'd47;
parameter [10:0] LEGUP_F_main_BB__66_48 = 11'd48;
parameter [10:0] LEGUP_F_main_BB__70_49 = 11'd49;
parameter [10:0] LEGUP_F_main_BB__70_50 = 11'd50;
parameter [10:0] LEGUP_F_main_BB__70_51 = 11'd51;
parameter [10:0] LEGUP_F_main_BB__70_52 = 11'd52;
parameter [10:0] LEGUP_F_main_BB__70_53 = 11'd53;
parameter [10:0] LEGUP_F_main_BB__72_54 = 11'd54;
parameter [10:0] LEGUP_F_main_BB__72_55 = 11'd55;
parameter [10:0] LEGUP_F_main_BB__72_56 = 11'd56;
parameter [10:0] LEGUP_F_main_BB__76_57 = 11'd57;
parameter [10:0] LEGUP_F_main_BB__76_58 = 11'd58;
parameter [10:0] LEGUP_F_main_BB__76_59 = 11'd59;
parameter [10:0] LEGUP_F_main_BB__76_60 = 11'd60;
parameter [10:0] LEGUP_F_main_BB__76_61 = 11'd61;
parameter [10:0] LEGUP_F_main_BB__78_62 = 11'd62;
parameter [10:0] LEGUP_F_main_BB__78_63 = 11'd63;
parameter [10:0] LEGUP_F_main_BB__78_64 = 11'd64;
parameter [10:0] LEGUP_F_main_BB__82_65 = 11'd65;
parameter [10:0] LEGUP_F_main_BB__82_66 = 11'd66;
parameter [10:0] LEGUP_F_main_BB__82_67 = 11'd67;
parameter [10:0] LEGUP_F_main_BB__82_68 = 11'd68;
parameter [10:0] LEGUP_F_main_BB__82_69 = 11'd69;
parameter [10:0] LEGUP_F_main_BB__84_70 = 11'd70;
parameter [10:0] LEGUP_F_main_BB__84_71 = 11'd71;
parameter [10:0] LEGUP_F_main_BB__84_72 = 11'd72;
parameter [10:0] LEGUP_F_main_BB__88_73 = 11'd73;
parameter [10:0] LEGUP_F_main_BB__88_74 = 11'd74;
parameter [10:0] LEGUP_F_main_BB__88_75 = 11'd75;
parameter [10:0] LEGUP_F_main_BB__88_76 = 11'd76;
parameter [10:0] LEGUP_F_main_BB__88_77 = 11'd77;
parameter [10:0] LEGUP_F_main_BB__90_78 = 11'd78;
parameter [10:0] LEGUP_F_main_BB__90_79 = 11'd79;
parameter [10:0] LEGUP_F_main_BB__90_80 = 11'd80;
parameter [10:0] LEGUP_F_main_BB__94_81 = 11'd81;
parameter [10:0] LEGUP_F_main_BB__94_82 = 11'd82;
parameter [10:0] LEGUP_F_main_BB__94_83 = 11'd83;
parameter [10:0] LEGUP_F_main_BB__94_84 = 11'd84;
parameter [10:0] LEGUP_F_main_BB__94_85 = 11'd85;
parameter [10:0] LEGUP_F_main_BB__96_86 = 11'd86;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_87 = 11'd87;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_88 = 11'd88;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_89 = 11'd89;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_90 = 11'd90;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_91 = 11'd91;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_92 = 11'd92;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_93 = 11'd93;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_94 = 11'd94;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_95 = 11'd95;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_96 = 11'd96;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_97 = 11'd97;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_98 = 11'd98;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_99 = 11'd99;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_100 = 11'd100;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_101 = 11'd101;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_102 = 11'd102;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_103 = 11'd103;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_104 = 11'd104;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_105 = 11'd105;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_106 = 11'd106;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_107 = 11'd107;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_108 = 11'd108;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_109 = 11'd109;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_110 = 11'd110;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_111 = 11'd111;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_112 = 11'd112;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_113 = 11'd113;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_114 = 11'd114;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_115 = 11'd115;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_116 = 11'd116;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_117 = 11'd117;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_118 = 11'd118;
parameter [10:0] LEGUP_F_main_BB__crit_edge28i_119 = 11'd119;
parameter [10:0] LEGUP_F_main_BB_lrph34ipreheader_120 = 11'd120;
parameter [10:0] LEGUP_F_main_BB_lrph34i_121 = 11'd121;
parameter [10:0] LEGUP_F_main_BB_lrph34i_122 = 11'd122;
parameter [10:0] LEGUP_F_main_BB_lrph34i_123 = 11'd123;
parameter [10:0] LEGUP_F_main_BB_lrph34i_124 = 11'd124;
parameter [10:0] LEGUP_F_main_BB__110_125 = 11'd125;
parameter [10:0] LEGUP_F_main_BB__110_126 = 11'd126;
parameter [10:0] LEGUP_F_main_BB__110_127 = 11'd127;
parameter [10:0] LEGUP_F_main_BB__110_128 = 11'd128;
parameter [10:0] LEGUP_F_main_BB__110_129 = 11'd129;
parameter [10:0] LEGUP_F_main_BB__112_130 = 11'd130;
parameter [10:0] LEGUP_F_main_BB__crit_edge35iloopexit_131 = 11'd131;
parameter [10:0] LEGUP_F_main_BB__crit_edge35i_132 = 11'd132;
parameter [10:0] LEGUP_F_main_BB_lrph39i_133 = 11'd133;
parameter [10:0] LEGUP_F_main_BB__114_134 = 11'd134;
parameter [10:0] LEGUP_F_main_BB__114_135 = 11'd135;
parameter [10:0] LEGUP_F_main_BB__114_136 = 11'd136;
parameter [10:0] LEGUP_F_main_BB__114_137 = 11'd137;
parameter [10:0] LEGUP_F_main_BB__114_138 = 11'd138;
parameter [10:0] LEGUP_F_main_BB__129_139 = 11'd139;
parameter [10:0] LEGUP_F_main_BB__129_140 = 11'd140;
parameter [10:0] LEGUP_F_main_BB__129_141 = 11'd141;
parameter [10:0] LEGUP_F_main_BB__129_142 = 11'd142;
parameter [10:0] LEGUP_F_main_BB__129_143 = 11'd143;
parameter [10:0] LEGUP_F_main_BB__131_144 = 11'd144;
parameter [10:0] LEGUP_F_main_BB__131_145 = 11'd145;
parameter [10:0] LEGUP_F_main_BB__131_146 = 11'd146;
parameter [10:0] LEGUP_F_main_BB__135_147 = 11'd147;
parameter [10:0] LEGUP_F_main_BB__135_148 = 11'd148;
parameter [10:0] LEGUP_F_main_BB__135_149 = 11'd149;
parameter [10:0] LEGUP_F_main_BB__135_150 = 11'd150;
parameter [10:0] LEGUP_F_main_BB__135_151 = 11'd151;
parameter [10:0] LEGUP_F_main_BB__137_152 = 11'd152;
parameter [10:0] LEGUP_F_main_BB__137_153 = 11'd153;
parameter [10:0] LEGUP_F_main_BB__137_154 = 11'd154;
parameter [10:0] LEGUP_F_main_BB__141_155 = 11'd155;
parameter [10:0] LEGUP_F_main_BB__141_156 = 11'd156;
parameter [10:0] LEGUP_F_main_BB__141_157 = 11'd157;
parameter [10:0] LEGUP_F_main_BB__141_158 = 11'd158;
parameter [10:0] LEGUP_F_main_BB__141_159 = 11'd159;
parameter [10:0] LEGUP_F_main_BB__143_160 = 11'd160;
parameter [10:0] LEGUP_F_main_BB__143_161 = 11'd161;
parameter [10:0] LEGUP_F_main_BB__143_162 = 11'd162;
parameter [10:0] LEGUP_F_main_BB__147_163 = 11'd163;
parameter [10:0] LEGUP_F_main_BB__147_164 = 11'd164;
parameter [10:0] LEGUP_F_main_BB__147_165 = 11'd165;
parameter [10:0] LEGUP_F_main_BB__147_166 = 11'd166;
parameter [10:0] LEGUP_F_main_BB__147_167 = 11'd167;
parameter [10:0] LEGUP_F_main_BB__149_168 = 11'd168;
parameter [10:0] LEGUP_F_main_BB__149_169 = 11'd169;
parameter [10:0] LEGUP_F_main_BB__149_170 = 11'd170;
parameter [10:0] LEGUP_F_main_BB__153_171 = 11'd171;
parameter [10:0] LEGUP_F_main_BB__153_172 = 11'd172;
parameter [10:0] LEGUP_F_main_BB__153_173 = 11'd173;
parameter [10:0] LEGUP_F_main_BB__153_174 = 11'd174;
parameter [10:0] LEGUP_F_main_BB__153_175 = 11'd175;
parameter [10:0] LEGUP_F_main_BB__155_176 = 11'd176;
parameter [10:0] LEGUP_F_main_BB__155_177 = 11'd177;
parameter [10:0] LEGUP_F_main_BB__155_178 = 11'd178;
parameter [10:0] LEGUP_F_main_BB__159_179 = 11'd179;
parameter [10:0] LEGUP_F_main_BB__159_180 = 11'd180;
parameter [10:0] LEGUP_F_main_BB__159_181 = 11'd181;
parameter [10:0] LEGUP_F_main_BB__159_182 = 11'd182;
parameter [10:0] LEGUP_F_main_BB__159_183 = 11'd183;
parameter [10:0] LEGUP_F_main_BB__161_184 = 11'd184;
parameter [10:0] LEGUP_F_main_BB__161_185 = 11'd185;
parameter [10:0] LEGUP_F_main_BB__161_186 = 11'd186;
parameter [10:0] LEGUP_F_main_BB__165_187 = 11'd187;
parameter [10:0] LEGUP_F_main_BB__165_188 = 11'd188;
parameter [10:0] LEGUP_F_main_BB__165_189 = 11'd189;
parameter [10:0] LEGUP_F_main_BB__165_190 = 11'd190;
parameter [10:0] LEGUP_F_main_BB__165_191 = 11'd191;
parameter [10:0] LEGUP_F_main_BB__167_192 = 11'd192;
parameter [10:0] LEGUP_F_main_BB__167_193 = 11'd193;
parameter [10:0] LEGUP_F_main_BB__167_194 = 11'd194;
parameter [10:0] LEGUP_F_main_BB__171_195 = 11'd195;
parameter [10:0] LEGUP_F_main_BB__171_196 = 11'd196;
parameter [10:0] LEGUP_F_main_BB__171_197 = 11'd197;
parameter [10:0] LEGUP_F_main_BB__171_198 = 11'd198;
parameter [10:0] LEGUP_F_main_BB__171_199 = 11'd199;
parameter [10:0] LEGUP_F_main_BB__173_200 = 11'd200;
parameter [10:0] LEGUP_F_main_BB__173_201 = 11'd201;
parameter [10:0] LEGUP_F_main_BB__173_202 = 11'd202;
parameter [10:0] LEGUP_F_main_BB__177_203 = 11'd203;
parameter [10:0] LEGUP_F_main_BB__177_204 = 11'd204;
parameter [10:0] LEGUP_F_main_BB__177_205 = 11'd205;
parameter [10:0] LEGUP_F_main_BB__177_206 = 11'd206;
parameter [10:0] LEGUP_F_main_BB__177_207 = 11'd207;
parameter [10:0] LEGUP_F_main_BB__179_208 = 11'd208;
parameter [10:0] LEGUP_F_main_BB__crit_edge40iloopexit_209 = 11'd209;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_210 = 11'd210;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_211 = 11'd211;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_212 = 11'd212;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_213 = 11'd213;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_214 = 11'd214;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_215 = 11'd215;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_216 = 11'd216;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_217 = 11'd217;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_218 = 11'd218;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_219 = 11'd219;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_220 = 11'd220;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_221 = 11'd221;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_222 = 11'd222;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_223 = 11'd223;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_224 = 11'd224;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_225 = 11'd225;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_226 = 11'd226;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_227 = 11'd227;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_228 = 11'd228;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_229 = 11'd229;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_230 = 11'd230;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_231 = 11'd231;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_232 = 11'd232;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_233 = 11'd233;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_234 = 11'd234;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_235 = 11'd235;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_236 = 11'd236;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_237 = 11'd237;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_238 = 11'd238;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_239 = 11'd239;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_240 = 11'd240;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_241 = 11'd241;
parameter [10:0] LEGUP_F_main_BB__crit_edge40i_242 = 11'd242;
parameter [10:0] LEGUP_F_main_BB_lrph45i_243 = 11'd243;
parameter [10:0] LEGUP_F_main_BB__188_244 = 11'd244;
parameter [10:0] LEGUP_F_main_BB__188_245 = 11'd245;
parameter [10:0] LEGUP_F_main_BB__188_246 = 11'd246;
parameter [10:0] LEGUP_F_main_BB__188_247 = 11'd247;
parameter [10:0] LEGUP_F_main_BB__194_248 = 11'd248;
parameter [10:0] LEGUP_F_main_BB__194_249 = 11'd249;
parameter [10:0] LEGUP_F_main_BB__194_250 = 11'd250;
parameter [10:0] LEGUP_F_main_BB__194_251 = 11'd251;
parameter [10:0] LEGUP_F_main_BB__194_252 = 11'd252;
parameter [10:0] LEGUP_F_main_BB__196_253 = 11'd253;
parameter [10:0] LEGUP_F_main_BB__crit_edge46iloopexit_254 = 11'd254;
parameter [10:0] LEGUP_F_main_BB__crit_edge46i_255 = 11'd255;
parameter [10:0] LEGUP_F_main_BB_lrph50i_256 = 11'd256;
parameter [10:0] LEGUP_F_main_BB__198_257 = 11'd257;
parameter [10:0] LEGUP_F_main_BB__198_258 = 11'd258;
parameter [10:0] LEGUP_F_main_BB__198_259 = 11'd259;
parameter [10:0] LEGUP_F_main_BB__198_260 = 11'd260;
parameter [10:0] LEGUP_F_main_BB__198_261 = 11'd261;
parameter [10:0] LEGUP_F_main_BB__213_262 = 11'd262;
parameter [10:0] LEGUP_F_main_BB__213_263 = 11'd263;
parameter [10:0] LEGUP_F_main_BB__213_264 = 11'd264;
parameter [10:0] LEGUP_F_main_BB__213_265 = 11'd265;
parameter [10:0] LEGUP_F_main_BB__213_266 = 11'd266;
parameter [10:0] LEGUP_F_main_BB__215_267 = 11'd267;
parameter [10:0] LEGUP_F_main_BB__215_268 = 11'd268;
parameter [10:0] LEGUP_F_main_BB__215_269 = 11'd269;
parameter [10:0] LEGUP_F_main_BB__219_270 = 11'd270;
parameter [10:0] LEGUP_F_main_BB__219_271 = 11'd271;
parameter [10:0] LEGUP_F_main_BB__219_272 = 11'd272;
parameter [10:0] LEGUP_F_main_BB__219_273 = 11'd273;
parameter [10:0] LEGUP_F_main_BB__219_274 = 11'd274;
parameter [10:0] LEGUP_F_main_BB__221_275 = 11'd275;
parameter [10:0] LEGUP_F_main_BB__221_276 = 11'd276;
parameter [10:0] LEGUP_F_main_BB__221_277 = 11'd277;
parameter [10:0] LEGUP_F_main_BB__225_278 = 11'd278;
parameter [10:0] LEGUP_F_main_BB__225_279 = 11'd279;
parameter [10:0] LEGUP_F_main_BB__225_280 = 11'd280;
parameter [10:0] LEGUP_F_main_BB__225_281 = 11'd281;
parameter [10:0] LEGUP_F_main_BB__225_282 = 11'd282;
parameter [10:0] LEGUP_F_main_BB__227_283 = 11'd283;
parameter [10:0] LEGUP_F_main_BB__227_284 = 11'd284;
parameter [10:0] LEGUP_F_main_BB__227_285 = 11'd285;
parameter [10:0] LEGUP_F_main_BB__231_286 = 11'd286;
parameter [10:0] LEGUP_F_main_BB__231_287 = 11'd287;
parameter [10:0] LEGUP_F_main_BB__231_288 = 11'd288;
parameter [10:0] LEGUP_F_main_BB__231_289 = 11'd289;
parameter [10:0] LEGUP_F_main_BB__231_290 = 11'd290;
parameter [10:0] LEGUP_F_main_BB__233_291 = 11'd291;
parameter [10:0] LEGUP_F_main_BB__233_292 = 11'd292;
parameter [10:0] LEGUP_F_main_BB__233_293 = 11'd293;
parameter [10:0] LEGUP_F_main_BB__237_294 = 11'd294;
parameter [10:0] LEGUP_F_main_BB__237_295 = 11'd295;
parameter [10:0] LEGUP_F_main_BB__237_296 = 11'd296;
parameter [10:0] LEGUP_F_main_BB__237_297 = 11'd297;
parameter [10:0] LEGUP_F_main_BB__237_298 = 11'd298;
parameter [10:0] LEGUP_F_main_BB__239_299 = 11'd299;
parameter [10:0] LEGUP_F_main_BB__239_300 = 11'd300;
parameter [10:0] LEGUP_F_main_BB__239_301 = 11'd301;
parameter [10:0] LEGUP_F_main_BB__243_302 = 11'd302;
parameter [10:0] LEGUP_F_main_BB__243_303 = 11'd303;
parameter [10:0] LEGUP_F_main_BB__243_304 = 11'd304;
parameter [10:0] LEGUP_F_main_BB__243_305 = 11'd305;
parameter [10:0] LEGUP_F_main_BB__243_306 = 11'd306;
parameter [10:0] LEGUP_F_main_BB__245_307 = 11'd307;
parameter [10:0] LEGUP_F_main_BB__245_308 = 11'd308;
parameter [10:0] LEGUP_F_main_BB__245_309 = 11'd309;
parameter [10:0] LEGUP_F_main_BB__249_310 = 11'd310;
parameter [10:0] LEGUP_F_main_BB__249_311 = 11'd311;
parameter [10:0] LEGUP_F_main_BB__249_312 = 11'd312;
parameter [10:0] LEGUP_F_main_BB__249_313 = 11'd313;
parameter [10:0] LEGUP_F_main_BB__249_314 = 11'd314;
parameter [10:0] LEGUP_F_main_BB__251_315 = 11'd315;
parameter [10:0] LEGUP_F_main_BB__251_316 = 11'd316;
parameter [10:0] LEGUP_F_main_BB__251_317 = 11'd317;
parameter [10:0] LEGUP_F_main_BB__255_318 = 11'd318;
parameter [10:0] LEGUP_F_main_BB__255_319 = 11'd319;
parameter [10:0] LEGUP_F_main_BB__255_320 = 11'd320;
parameter [10:0] LEGUP_F_main_BB__255_321 = 11'd321;
parameter [10:0] LEGUP_F_main_BB__255_322 = 11'd322;
parameter [10:0] LEGUP_F_main_BB__257_323 = 11'd323;
parameter [10:0] LEGUP_F_main_BB__257_324 = 11'd324;
parameter [10:0] LEGUP_F_main_BB__257_325 = 11'd325;
parameter [10:0] LEGUP_F_main_BB__261_326 = 11'd326;
parameter [10:0] LEGUP_F_main_BB__261_327 = 11'd327;
parameter [10:0] LEGUP_F_main_BB__261_328 = 11'd328;
parameter [10:0] LEGUP_F_main_BB__261_329 = 11'd329;
parameter [10:0] LEGUP_F_main_BB__261_330 = 11'd330;
parameter [10:0] LEGUP_F_main_BB__263_331 = 11'd331;
parameter [10:0] LEGUP_F_main_BB__crit_edge51iloopexit_332 = 11'd332;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_333 = 11'd333;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_334 = 11'd334;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_335 = 11'd335;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_336 = 11'd336;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_337 = 11'd337;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_338 = 11'd338;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_339 = 11'd339;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_340 = 11'd340;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_341 = 11'd341;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_342 = 11'd342;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_343 = 11'd343;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_344 = 11'd344;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_345 = 11'd345;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_346 = 11'd346;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_347 = 11'd347;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_348 = 11'd348;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_349 = 11'd349;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_350 = 11'd350;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_351 = 11'd351;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_352 = 11'd352;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_353 = 11'd353;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_354 = 11'd354;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_355 = 11'd355;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_356 = 11'd356;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_357 = 11'd357;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_358 = 11'd358;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_359 = 11'd359;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_360 = 11'd360;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_361 = 11'd361;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_362 = 11'd362;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_363 = 11'd363;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_364 = 11'd364;
parameter [10:0] LEGUP_F_main_BB__crit_edge51i_365 = 11'd365;
parameter [10:0] LEGUP_F_main_BB_lrph56i_366 = 11'd366;
parameter [10:0] LEGUP_F_main_BB__272_367 = 11'd367;
parameter [10:0] LEGUP_F_main_BB__272_368 = 11'd368;
parameter [10:0] LEGUP_F_main_BB__272_369 = 11'd369;
parameter [10:0] LEGUP_F_main_BB__272_370 = 11'd370;
parameter [10:0] LEGUP_F_main_BB__278_371 = 11'd371;
parameter [10:0] LEGUP_F_main_BB__278_372 = 11'd372;
parameter [10:0] LEGUP_F_main_BB__278_373 = 11'd373;
parameter [10:0] LEGUP_F_main_BB__278_374 = 11'd374;
parameter [10:0] LEGUP_F_main_BB__278_375 = 11'd375;
parameter [10:0] LEGUP_F_main_BB__280_376 = 11'd376;
parameter [10:0] LEGUP_F_main_BB__crit_edge57iloopexit_377 = 11'd377;
parameter [10:0] LEGUP_F_main_BB__crit_edge57i_378 = 11'd378;
parameter [10:0] LEGUP_F_main_BB_lrph61i_379 = 11'd379;
parameter [10:0] LEGUP_F_main_BB__282_380 = 11'd380;
parameter [10:0] LEGUP_F_main_BB__282_381 = 11'd381;
parameter [10:0] LEGUP_F_main_BB__282_382 = 11'd382;
parameter [10:0] LEGUP_F_main_BB__282_383 = 11'd383;
parameter [10:0] LEGUP_F_main_BB__282_384 = 11'd384;
parameter [10:0] LEGUP_F_main_BB__297_385 = 11'd385;
parameter [10:0] LEGUP_F_main_BB__297_386 = 11'd386;
parameter [10:0] LEGUP_F_main_BB__297_387 = 11'd387;
parameter [10:0] LEGUP_F_main_BB__297_388 = 11'd388;
parameter [10:0] LEGUP_F_main_BB__297_389 = 11'd389;
parameter [10:0] LEGUP_F_main_BB__299_390 = 11'd390;
parameter [10:0] LEGUP_F_main_BB__299_391 = 11'd391;
parameter [10:0] LEGUP_F_main_BB__299_392 = 11'd392;
parameter [10:0] LEGUP_F_main_BB__303_393 = 11'd393;
parameter [10:0] LEGUP_F_main_BB__303_394 = 11'd394;
parameter [10:0] LEGUP_F_main_BB__303_395 = 11'd395;
parameter [10:0] LEGUP_F_main_BB__303_396 = 11'd396;
parameter [10:0] LEGUP_F_main_BB__303_397 = 11'd397;
parameter [10:0] LEGUP_F_main_BB__305_398 = 11'd398;
parameter [10:0] LEGUP_F_main_BB__305_399 = 11'd399;
parameter [10:0] LEGUP_F_main_BB__305_400 = 11'd400;
parameter [10:0] LEGUP_F_main_BB__309_401 = 11'd401;
parameter [10:0] LEGUP_F_main_BB__309_402 = 11'd402;
parameter [10:0] LEGUP_F_main_BB__309_403 = 11'd403;
parameter [10:0] LEGUP_F_main_BB__309_404 = 11'd404;
parameter [10:0] LEGUP_F_main_BB__309_405 = 11'd405;
parameter [10:0] LEGUP_F_main_BB__311_406 = 11'd406;
parameter [10:0] LEGUP_F_main_BB__311_407 = 11'd407;
parameter [10:0] LEGUP_F_main_BB__311_408 = 11'd408;
parameter [10:0] LEGUP_F_main_BB__315_409 = 11'd409;
parameter [10:0] LEGUP_F_main_BB__315_410 = 11'd410;
parameter [10:0] LEGUP_F_main_BB__315_411 = 11'd411;
parameter [10:0] LEGUP_F_main_BB__315_412 = 11'd412;
parameter [10:0] LEGUP_F_main_BB__315_413 = 11'd413;
parameter [10:0] LEGUP_F_main_BB__317_414 = 11'd414;
parameter [10:0] LEGUP_F_main_BB__317_415 = 11'd415;
parameter [10:0] LEGUP_F_main_BB__317_416 = 11'd416;
parameter [10:0] LEGUP_F_main_BB__321_417 = 11'd417;
parameter [10:0] LEGUP_F_main_BB__321_418 = 11'd418;
parameter [10:0] LEGUP_F_main_BB__321_419 = 11'd419;
parameter [10:0] LEGUP_F_main_BB__321_420 = 11'd420;
parameter [10:0] LEGUP_F_main_BB__321_421 = 11'd421;
parameter [10:0] LEGUP_F_main_BB__323_422 = 11'd422;
parameter [10:0] LEGUP_F_main_BB__323_423 = 11'd423;
parameter [10:0] LEGUP_F_main_BB__323_424 = 11'd424;
parameter [10:0] LEGUP_F_main_BB__327_425 = 11'd425;
parameter [10:0] LEGUP_F_main_BB__327_426 = 11'd426;
parameter [10:0] LEGUP_F_main_BB__327_427 = 11'd427;
parameter [10:0] LEGUP_F_main_BB__327_428 = 11'd428;
parameter [10:0] LEGUP_F_main_BB__327_429 = 11'd429;
parameter [10:0] LEGUP_F_main_BB__329_430 = 11'd430;
parameter [10:0] LEGUP_F_main_BB__329_431 = 11'd431;
parameter [10:0] LEGUP_F_main_BB__329_432 = 11'd432;
parameter [10:0] LEGUP_F_main_BB__333_433 = 11'd433;
parameter [10:0] LEGUP_F_main_BB__333_434 = 11'd434;
parameter [10:0] LEGUP_F_main_BB__333_435 = 11'd435;
parameter [10:0] LEGUP_F_main_BB__333_436 = 11'd436;
parameter [10:0] LEGUP_F_main_BB__333_437 = 11'd437;
parameter [10:0] LEGUP_F_main_BB__335_438 = 11'd438;
parameter [10:0] LEGUP_F_main_BB__335_439 = 11'd439;
parameter [10:0] LEGUP_F_main_BB__335_440 = 11'd440;
parameter [10:0] LEGUP_F_main_BB__339_441 = 11'd441;
parameter [10:0] LEGUP_F_main_BB__339_442 = 11'd442;
parameter [10:0] LEGUP_F_main_BB__339_443 = 11'd443;
parameter [10:0] LEGUP_F_main_BB__339_444 = 11'd444;
parameter [10:0] LEGUP_F_main_BB__339_445 = 11'd445;
parameter [10:0] LEGUP_F_main_BB__341_446 = 11'd446;
parameter [10:0] LEGUP_F_main_BB__341_447 = 11'd447;
parameter [10:0] LEGUP_F_main_BB__341_448 = 11'd448;
parameter [10:0] LEGUP_F_main_BB__345_449 = 11'd449;
parameter [10:0] LEGUP_F_main_BB__345_450 = 11'd450;
parameter [10:0] LEGUP_F_main_BB__345_451 = 11'd451;
parameter [10:0] LEGUP_F_main_BB__345_452 = 11'd452;
parameter [10:0] LEGUP_F_main_BB__345_453 = 11'd453;
parameter [10:0] LEGUP_F_main_BB__347_454 = 11'd454;
parameter [10:0] LEGUP_F_main_BB__crit_edge62iloopexit_455 = 11'd455;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_456 = 11'd456;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_457 = 11'd457;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_458 = 11'd458;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_459 = 11'd459;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_460 = 11'd460;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_461 = 11'd461;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_462 = 11'd462;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_463 = 11'd463;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_464 = 11'd464;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_465 = 11'd465;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_466 = 11'd466;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_467 = 11'd467;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_468 = 11'd468;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_469 = 11'd469;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_470 = 11'd470;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_471 = 11'd471;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_472 = 11'd472;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_473 = 11'd473;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_474 = 11'd474;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_475 = 11'd475;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_476 = 11'd476;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_477 = 11'd477;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_478 = 11'd478;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_479 = 11'd479;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_480 = 11'd480;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_481 = 11'd481;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_482 = 11'd482;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_483 = 11'd483;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_484 = 11'd484;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_485 = 11'd485;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_486 = 11'd486;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_487 = 11'd487;
parameter [10:0] LEGUP_F_main_BB__crit_edge62i_488 = 11'd488;
parameter [10:0] LEGUP_F_main_BB_lrph67i_489 = 11'd489;
parameter [10:0] LEGUP_F_main_BB__356_490 = 11'd490;
parameter [10:0] LEGUP_F_main_BB__356_491 = 11'd491;
parameter [10:0] LEGUP_F_main_BB__356_492 = 11'd492;
parameter [10:0] LEGUP_F_main_BB__356_493 = 11'd493;
parameter [10:0] LEGUP_F_main_BB__362_494 = 11'd494;
parameter [10:0] LEGUP_F_main_BB__362_495 = 11'd495;
parameter [10:0] LEGUP_F_main_BB__362_496 = 11'd496;
parameter [10:0] LEGUP_F_main_BB__362_497 = 11'd497;
parameter [10:0] LEGUP_F_main_BB__362_498 = 11'd498;
parameter [10:0] LEGUP_F_main_BB__364_499 = 11'd499;
parameter [10:0] LEGUP_F_main_BB__crit_edge68iloopexit_500 = 11'd500;
parameter [10:0] LEGUP_F_main_BB__crit_edge68i_501 = 11'd501;
parameter [10:0] LEGUP_F_main_BB_lrph72i_502 = 11'd502;
parameter [10:0] LEGUP_F_main_BB__366_503 = 11'd503;
parameter [10:0] LEGUP_F_main_BB__366_504 = 11'd504;
parameter [10:0] LEGUP_F_main_BB__366_505 = 11'd505;
parameter [10:0] LEGUP_F_main_BB__366_506 = 11'd506;
parameter [10:0] LEGUP_F_main_BB__366_507 = 11'd507;
parameter [10:0] LEGUP_F_main_BB__381_508 = 11'd508;
parameter [10:0] LEGUP_F_main_BB__381_509 = 11'd509;
parameter [10:0] LEGUP_F_main_BB__381_510 = 11'd510;
parameter [10:0] LEGUP_F_main_BB__381_511 = 11'd511;
parameter [10:0] LEGUP_F_main_BB__381_512 = 11'd512;
parameter [10:0] LEGUP_F_main_BB__383_513 = 11'd513;
parameter [10:0] LEGUP_F_main_BB__383_514 = 11'd514;
parameter [10:0] LEGUP_F_main_BB__383_515 = 11'd515;
parameter [10:0] LEGUP_F_main_BB__387_516 = 11'd516;
parameter [10:0] LEGUP_F_main_BB__387_517 = 11'd517;
parameter [10:0] LEGUP_F_main_BB__387_518 = 11'd518;
parameter [10:0] LEGUP_F_main_BB__387_519 = 11'd519;
parameter [10:0] LEGUP_F_main_BB__387_520 = 11'd520;
parameter [10:0] LEGUP_F_main_BB__389_521 = 11'd521;
parameter [10:0] LEGUP_F_main_BB__389_522 = 11'd522;
parameter [10:0] LEGUP_F_main_BB__389_523 = 11'd523;
parameter [10:0] LEGUP_F_main_BB__393_524 = 11'd524;
parameter [10:0] LEGUP_F_main_BB__393_525 = 11'd525;
parameter [10:0] LEGUP_F_main_BB__393_526 = 11'd526;
parameter [10:0] LEGUP_F_main_BB__393_527 = 11'd527;
parameter [10:0] LEGUP_F_main_BB__393_528 = 11'd528;
parameter [10:0] LEGUP_F_main_BB__395_529 = 11'd529;
parameter [10:0] LEGUP_F_main_BB__395_530 = 11'd530;
parameter [10:0] LEGUP_F_main_BB__395_531 = 11'd531;
parameter [10:0] LEGUP_F_main_BB__399_532 = 11'd532;
parameter [10:0] LEGUP_F_main_BB__399_533 = 11'd533;
parameter [10:0] LEGUP_F_main_BB__399_534 = 11'd534;
parameter [10:0] LEGUP_F_main_BB__399_535 = 11'd535;
parameter [10:0] LEGUP_F_main_BB__399_536 = 11'd536;
parameter [10:0] LEGUP_F_main_BB__401_537 = 11'd537;
parameter [10:0] LEGUP_F_main_BB__401_538 = 11'd538;
parameter [10:0] LEGUP_F_main_BB__401_539 = 11'd539;
parameter [10:0] LEGUP_F_main_BB__405_540 = 11'd540;
parameter [10:0] LEGUP_F_main_BB__405_541 = 11'd541;
parameter [10:0] LEGUP_F_main_BB__405_542 = 11'd542;
parameter [10:0] LEGUP_F_main_BB__405_543 = 11'd543;
parameter [10:0] LEGUP_F_main_BB__405_544 = 11'd544;
parameter [10:0] LEGUP_F_main_BB__407_545 = 11'd545;
parameter [10:0] LEGUP_F_main_BB__407_546 = 11'd546;
parameter [10:0] LEGUP_F_main_BB__407_547 = 11'd547;
parameter [10:0] LEGUP_F_main_BB__411_548 = 11'd548;
parameter [10:0] LEGUP_F_main_BB__411_549 = 11'd549;
parameter [10:0] LEGUP_F_main_BB__411_550 = 11'd550;
parameter [10:0] LEGUP_F_main_BB__411_551 = 11'd551;
parameter [10:0] LEGUP_F_main_BB__411_552 = 11'd552;
parameter [10:0] LEGUP_F_main_BB__413_553 = 11'd553;
parameter [10:0] LEGUP_F_main_BB__413_554 = 11'd554;
parameter [10:0] LEGUP_F_main_BB__413_555 = 11'd555;
parameter [10:0] LEGUP_F_main_BB__417_556 = 11'd556;
parameter [10:0] LEGUP_F_main_BB__417_557 = 11'd557;
parameter [10:0] LEGUP_F_main_BB__417_558 = 11'd558;
parameter [10:0] LEGUP_F_main_BB__417_559 = 11'd559;
parameter [10:0] LEGUP_F_main_BB__417_560 = 11'd560;
parameter [10:0] LEGUP_F_main_BB__419_561 = 11'd561;
parameter [10:0] LEGUP_F_main_BB__419_562 = 11'd562;
parameter [10:0] LEGUP_F_main_BB__419_563 = 11'd563;
parameter [10:0] LEGUP_F_main_BB__423_564 = 11'd564;
parameter [10:0] LEGUP_F_main_BB__423_565 = 11'd565;
parameter [10:0] LEGUP_F_main_BB__423_566 = 11'd566;
parameter [10:0] LEGUP_F_main_BB__423_567 = 11'd567;
parameter [10:0] LEGUP_F_main_BB__423_568 = 11'd568;
parameter [10:0] LEGUP_F_main_BB__425_569 = 11'd569;
parameter [10:0] LEGUP_F_main_BB__425_570 = 11'd570;
parameter [10:0] LEGUP_F_main_BB__425_571 = 11'd571;
parameter [10:0] LEGUP_F_main_BB__429_572 = 11'd572;
parameter [10:0] LEGUP_F_main_BB__429_573 = 11'd573;
parameter [10:0] LEGUP_F_main_BB__429_574 = 11'd574;
parameter [10:0] LEGUP_F_main_BB__429_575 = 11'd575;
parameter [10:0] LEGUP_F_main_BB__429_576 = 11'd576;
parameter [10:0] LEGUP_F_main_BB__431_577 = 11'd577;
parameter [10:0] LEGUP_F_main_BB__crit_edge73iloopexit_578 = 11'd578;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_579 = 11'd579;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_580 = 11'd580;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_581 = 11'd581;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_582 = 11'd582;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_583 = 11'd583;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_584 = 11'd584;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_585 = 11'd585;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_586 = 11'd586;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_587 = 11'd587;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_588 = 11'd588;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_589 = 11'd589;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_590 = 11'd590;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_591 = 11'd591;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_592 = 11'd592;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_593 = 11'd593;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_594 = 11'd594;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_595 = 11'd595;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_596 = 11'd596;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_597 = 11'd597;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_598 = 11'd598;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_599 = 11'd599;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_600 = 11'd600;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_601 = 11'd601;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_602 = 11'd602;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_603 = 11'd603;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_604 = 11'd604;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_605 = 11'd605;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_606 = 11'd606;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_607 = 11'd607;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_608 = 11'd608;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_609 = 11'd609;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_610 = 11'd610;
parameter [10:0] LEGUP_F_main_BB__crit_edge73i_611 = 11'd611;
parameter [10:0] LEGUP_F_main_BB_lrph78i_612 = 11'd612;
parameter [10:0] LEGUP_F_main_BB__440_613 = 11'd613;
parameter [10:0] LEGUP_F_main_BB__440_614 = 11'd614;
parameter [10:0] LEGUP_F_main_BB__440_615 = 11'd615;
parameter [10:0] LEGUP_F_main_BB__440_616 = 11'd616;
parameter [10:0] LEGUP_F_main_BB__446_617 = 11'd617;
parameter [10:0] LEGUP_F_main_BB__446_618 = 11'd618;
parameter [10:0] LEGUP_F_main_BB__446_619 = 11'd619;
parameter [10:0] LEGUP_F_main_BB__446_620 = 11'd620;
parameter [10:0] LEGUP_F_main_BB__446_621 = 11'd621;
parameter [10:0] LEGUP_F_main_BB__448_622 = 11'd622;
parameter [10:0] LEGUP_F_main_BB__crit_edge79iloopexit_623 = 11'd623;
parameter [10:0] LEGUP_F_main_BB__crit_edge79i_624 = 11'd624;
parameter [10:0] LEGUP_F_main_BB_lrph83i_625 = 11'd625;
parameter [10:0] LEGUP_F_main_BB__450_626 = 11'd626;
parameter [10:0] LEGUP_F_main_BB__450_627 = 11'd627;
parameter [10:0] LEGUP_F_main_BB__450_628 = 11'd628;
parameter [10:0] LEGUP_F_main_BB__450_629 = 11'd629;
parameter [10:0] LEGUP_F_main_BB__450_630 = 11'd630;
parameter [10:0] LEGUP_F_main_BB__465_631 = 11'd631;
parameter [10:0] LEGUP_F_main_BB__465_632 = 11'd632;
parameter [10:0] LEGUP_F_main_BB__465_633 = 11'd633;
parameter [10:0] LEGUP_F_main_BB__465_634 = 11'd634;
parameter [10:0] LEGUP_F_main_BB__465_635 = 11'd635;
parameter [10:0] LEGUP_F_main_BB__467_636 = 11'd636;
parameter [10:0] LEGUP_F_main_BB__467_637 = 11'd637;
parameter [10:0] LEGUP_F_main_BB__467_638 = 11'd638;
parameter [10:0] LEGUP_F_main_BB__471_639 = 11'd639;
parameter [10:0] LEGUP_F_main_BB__471_640 = 11'd640;
parameter [10:0] LEGUP_F_main_BB__471_641 = 11'd641;
parameter [10:0] LEGUP_F_main_BB__471_642 = 11'd642;
parameter [10:0] LEGUP_F_main_BB__471_643 = 11'd643;
parameter [10:0] LEGUP_F_main_BB__473_644 = 11'd644;
parameter [10:0] LEGUP_F_main_BB__473_645 = 11'd645;
parameter [10:0] LEGUP_F_main_BB__473_646 = 11'd646;
parameter [10:0] LEGUP_F_main_BB__477_647 = 11'd647;
parameter [10:0] LEGUP_F_main_BB__477_648 = 11'd648;
parameter [10:0] LEGUP_F_main_BB__477_649 = 11'd649;
parameter [10:0] LEGUP_F_main_BB__477_650 = 11'd650;
parameter [10:0] LEGUP_F_main_BB__477_651 = 11'd651;
parameter [10:0] LEGUP_F_main_BB__479_652 = 11'd652;
parameter [10:0] LEGUP_F_main_BB__479_653 = 11'd653;
parameter [10:0] LEGUP_F_main_BB__479_654 = 11'd654;
parameter [10:0] LEGUP_F_main_BB__483_655 = 11'd655;
parameter [10:0] LEGUP_F_main_BB__483_656 = 11'd656;
parameter [10:0] LEGUP_F_main_BB__483_657 = 11'd657;
parameter [10:0] LEGUP_F_main_BB__483_658 = 11'd658;
parameter [10:0] LEGUP_F_main_BB__483_659 = 11'd659;
parameter [10:0] LEGUP_F_main_BB__485_660 = 11'd660;
parameter [10:0] LEGUP_F_main_BB__485_661 = 11'd661;
parameter [10:0] LEGUP_F_main_BB__485_662 = 11'd662;
parameter [10:0] LEGUP_F_main_BB__489_663 = 11'd663;
parameter [10:0] LEGUP_F_main_BB__489_664 = 11'd664;
parameter [10:0] LEGUP_F_main_BB__489_665 = 11'd665;
parameter [10:0] LEGUP_F_main_BB__489_666 = 11'd666;
parameter [10:0] LEGUP_F_main_BB__489_667 = 11'd667;
parameter [10:0] LEGUP_F_main_BB__491_668 = 11'd668;
parameter [10:0] LEGUP_F_main_BB__491_669 = 11'd669;
parameter [10:0] LEGUP_F_main_BB__491_670 = 11'd670;
parameter [10:0] LEGUP_F_main_BB__495_671 = 11'd671;
parameter [10:0] LEGUP_F_main_BB__495_672 = 11'd672;
parameter [10:0] LEGUP_F_main_BB__495_673 = 11'd673;
parameter [10:0] LEGUP_F_main_BB__495_674 = 11'd674;
parameter [10:0] LEGUP_F_main_BB__495_675 = 11'd675;
parameter [10:0] LEGUP_F_main_BB__497_676 = 11'd676;
parameter [10:0] LEGUP_F_main_BB__497_677 = 11'd677;
parameter [10:0] LEGUP_F_main_BB__497_678 = 11'd678;
parameter [10:0] LEGUP_F_main_BB__501_679 = 11'd679;
parameter [10:0] LEGUP_F_main_BB__501_680 = 11'd680;
parameter [10:0] LEGUP_F_main_BB__501_681 = 11'd681;
parameter [10:0] LEGUP_F_main_BB__501_682 = 11'd682;
parameter [10:0] LEGUP_F_main_BB__501_683 = 11'd683;
parameter [10:0] LEGUP_F_main_BB__503_684 = 11'd684;
parameter [10:0] LEGUP_F_main_BB__503_685 = 11'd685;
parameter [10:0] LEGUP_F_main_BB__503_686 = 11'd686;
parameter [10:0] LEGUP_F_main_BB__507_687 = 11'd687;
parameter [10:0] LEGUP_F_main_BB__507_688 = 11'd688;
parameter [10:0] LEGUP_F_main_BB__507_689 = 11'd689;
parameter [10:0] LEGUP_F_main_BB__507_690 = 11'd690;
parameter [10:0] LEGUP_F_main_BB__507_691 = 11'd691;
parameter [10:0] LEGUP_F_main_BB__509_692 = 11'd692;
parameter [10:0] LEGUP_F_main_BB__509_693 = 11'd693;
parameter [10:0] LEGUP_F_main_BB__509_694 = 11'd694;
parameter [10:0] LEGUP_F_main_BB__513_695 = 11'd695;
parameter [10:0] LEGUP_F_main_BB__513_696 = 11'd696;
parameter [10:0] LEGUP_F_main_BB__513_697 = 11'd697;
parameter [10:0] LEGUP_F_main_BB__513_698 = 11'd698;
parameter [10:0] LEGUP_F_main_BB__513_699 = 11'd699;
parameter [10:0] LEGUP_F_main_BB__515_700 = 11'd700;
parameter [10:0] LEGUP_F_main_BB__crit_edge84iloopexit_701 = 11'd701;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_702 = 11'd702;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_703 = 11'd703;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_704 = 11'd704;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_705 = 11'd705;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_706 = 11'd706;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_707 = 11'd707;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_708 = 11'd708;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_709 = 11'd709;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_710 = 11'd710;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_711 = 11'd711;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_712 = 11'd712;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_713 = 11'd713;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_714 = 11'd714;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_715 = 11'd715;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_716 = 11'd716;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_717 = 11'd717;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_718 = 11'd718;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_719 = 11'd719;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_720 = 11'd720;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_721 = 11'd721;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_722 = 11'd722;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_723 = 11'd723;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_724 = 11'd724;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_725 = 11'd725;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_726 = 11'd726;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_727 = 11'd727;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_728 = 11'd728;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_729 = 11'd729;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_730 = 11'd730;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_731 = 11'd731;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_732 = 11'd732;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_733 = 11'd733;
parameter [10:0] LEGUP_F_main_BB__crit_edge84i_734 = 11'd734;
parameter [10:0] LEGUP_F_main_BB_lrph89i_735 = 11'd735;
parameter [10:0] LEGUP_F_main_BB__524_736 = 11'd736;
parameter [10:0] LEGUP_F_main_BB__524_737 = 11'd737;
parameter [10:0] LEGUP_F_main_BB__524_738 = 11'd738;
parameter [10:0] LEGUP_F_main_BB__524_739 = 11'd739;
parameter [10:0] LEGUP_F_main_BB__530_740 = 11'd740;
parameter [10:0] LEGUP_F_main_BB__530_741 = 11'd741;
parameter [10:0] LEGUP_F_main_BB__530_742 = 11'd742;
parameter [10:0] LEGUP_F_main_BB__530_743 = 11'd743;
parameter [10:0] LEGUP_F_main_BB__530_744 = 11'd744;
parameter [10:0] LEGUP_F_main_BB__532_745 = 11'd745;
parameter [10:0] LEGUP_F_main_BB__crit_edge90iloopexit_746 = 11'd746;
parameter [10:0] LEGUP_F_main_BB__crit_edge90i_747 = 11'd747;
parameter [10:0] LEGUP_F_main_BB_lrph94i_748 = 11'd748;
parameter [10:0] LEGUP_F_main_BB__534_749 = 11'd749;
parameter [10:0] LEGUP_F_main_BB__534_750 = 11'd750;
parameter [10:0] LEGUP_F_main_BB__534_751 = 11'd751;
parameter [10:0] LEGUP_F_main_BB__534_752 = 11'd752;
parameter [10:0] LEGUP_F_main_BB__534_753 = 11'd753;
parameter [10:0] LEGUP_F_main_BB__549_754 = 11'd754;
parameter [10:0] LEGUP_F_main_BB__549_755 = 11'd755;
parameter [10:0] LEGUP_F_main_BB__549_756 = 11'd756;
parameter [10:0] LEGUP_F_main_BB__549_757 = 11'd757;
parameter [10:0] LEGUP_F_main_BB__549_758 = 11'd758;
parameter [10:0] LEGUP_F_main_BB__551_759 = 11'd759;
parameter [10:0] LEGUP_F_main_BB__551_760 = 11'd760;
parameter [10:0] LEGUP_F_main_BB__551_761 = 11'd761;
parameter [10:0] LEGUP_F_main_BB__555_762 = 11'd762;
parameter [10:0] LEGUP_F_main_BB__555_763 = 11'd763;
parameter [10:0] LEGUP_F_main_BB__555_764 = 11'd764;
parameter [10:0] LEGUP_F_main_BB__555_765 = 11'd765;
parameter [10:0] LEGUP_F_main_BB__555_766 = 11'd766;
parameter [10:0] LEGUP_F_main_BB__557_767 = 11'd767;
parameter [10:0] LEGUP_F_main_BB__557_768 = 11'd768;
parameter [10:0] LEGUP_F_main_BB__557_769 = 11'd769;
parameter [10:0] LEGUP_F_main_BB__561_770 = 11'd770;
parameter [10:0] LEGUP_F_main_BB__561_771 = 11'd771;
parameter [10:0] LEGUP_F_main_BB__561_772 = 11'd772;
parameter [10:0] LEGUP_F_main_BB__561_773 = 11'd773;
parameter [10:0] LEGUP_F_main_BB__561_774 = 11'd774;
parameter [10:0] LEGUP_F_main_BB__563_775 = 11'd775;
parameter [10:0] LEGUP_F_main_BB__563_776 = 11'd776;
parameter [10:0] LEGUP_F_main_BB__563_777 = 11'd777;
parameter [10:0] LEGUP_F_main_BB__567_778 = 11'd778;
parameter [10:0] LEGUP_F_main_BB__567_779 = 11'd779;
parameter [10:0] LEGUP_F_main_BB__567_780 = 11'd780;
parameter [10:0] LEGUP_F_main_BB__567_781 = 11'd781;
parameter [10:0] LEGUP_F_main_BB__567_782 = 11'd782;
parameter [10:0] LEGUP_F_main_BB__569_783 = 11'd783;
parameter [10:0] LEGUP_F_main_BB__569_784 = 11'd784;
parameter [10:0] LEGUP_F_main_BB__569_785 = 11'd785;
parameter [10:0] LEGUP_F_main_BB__573_786 = 11'd786;
parameter [10:0] LEGUP_F_main_BB__573_787 = 11'd787;
parameter [10:0] LEGUP_F_main_BB__573_788 = 11'd788;
parameter [10:0] LEGUP_F_main_BB__573_789 = 11'd789;
parameter [10:0] LEGUP_F_main_BB__573_790 = 11'd790;
parameter [10:0] LEGUP_F_main_BB__575_791 = 11'd791;
parameter [10:0] LEGUP_F_main_BB__575_792 = 11'd792;
parameter [10:0] LEGUP_F_main_BB__575_793 = 11'd793;
parameter [10:0] LEGUP_F_main_BB__579_794 = 11'd794;
parameter [10:0] LEGUP_F_main_BB__579_795 = 11'd795;
parameter [10:0] LEGUP_F_main_BB__579_796 = 11'd796;
parameter [10:0] LEGUP_F_main_BB__579_797 = 11'd797;
parameter [10:0] LEGUP_F_main_BB__579_798 = 11'd798;
parameter [10:0] LEGUP_F_main_BB__581_799 = 11'd799;
parameter [10:0] LEGUP_F_main_BB__581_800 = 11'd800;
parameter [10:0] LEGUP_F_main_BB__581_801 = 11'd801;
parameter [10:0] LEGUP_F_main_BB__585_802 = 11'd802;
parameter [10:0] LEGUP_F_main_BB__585_803 = 11'd803;
parameter [10:0] LEGUP_F_main_BB__585_804 = 11'd804;
parameter [10:0] LEGUP_F_main_BB__585_805 = 11'd805;
parameter [10:0] LEGUP_F_main_BB__585_806 = 11'd806;
parameter [10:0] LEGUP_F_main_BB__587_807 = 11'd807;
parameter [10:0] LEGUP_F_main_BB__587_808 = 11'd808;
parameter [10:0] LEGUP_F_main_BB__587_809 = 11'd809;
parameter [10:0] LEGUP_F_main_BB__591_810 = 11'd810;
parameter [10:0] LEGUP_F_main_BB__591_811 = 11'd811;
parameter [10:0] LEGUP_F_main_BB__591_812 = 11'd812;
parameter [10:0] LEGUP_F_main_BB__591_813 = 11'd813;
parameter [10:0] LEGUP_F_main_BB__591_814 = 11'd814;
parameter [10:0] LEGUP_F_main_BB__593_815 = 11'd815;
parameter [10:0] LEGUP_F_main_BB__593_816 = 11'd816;
parameter [10:0] LEGUP_F_main_BB__593_817 = 11'd817;
parameter [10:0] LEGUP_F_main_BB__597_818 = 11'd818;
parameter [10:0] LEGUP_F_main_BB__597_819 = 11'd819;
parameter [10:0] LEGUP_F_main_BB__597_820 = 11'd820;
parameter [10:0] LEGUP_F_main_BB__597_821 = 11'd821;
parameter [10:0] LEGUP_F_main_BB__597_822 = 11'd822;
parameter [10:0] LEGUP_F_main_BB__599_823 = 11'd823;
parameter [10:0] LEGUP_F_main_BB__crit_edge95iloopexit_824 = 11'd824;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_825 = 11'd825;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_826 = 11'd826;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_827 = 11'd827;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_828 = 11'd828;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_829 = 11'd829;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_830 = 11'd830;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_831 = 11'd831;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_832 = 11'd832;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_833 = 11'd833;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_834 = 11'd834;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_835 = 11'd835;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_836 = 11'd836;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_837 = 11'd837;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_838 = 11'd838;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_839 = 11'd839;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_840 = 11'd840;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_841 = 11'd841;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_842 = 11'd842;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_843 = 11'd843;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_844 = 11'd844;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_845 = 11'd845;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_846 = 11'd846;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_847 = 11'd847;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_848 = 11'd848;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_849 = 11'd849;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_850 = 11'd850;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_851 = 11'd851;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_852 = 11'd852;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_853 = 11'd853;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_854 = 11'd854;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_855 = 11'd855;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_856 = 11'd856;
parameter [10:0] LEGUP_F_main_BB__crit_edge95i_857 = 11'd857;
parameter [10:0] LEGUP_F_main_BB_lrph100i_858 = 11'd858;
parameter [10:0] LEGUP_F_main_BB__608_859 = 11'd859;
parameter [10:0] LEGUP_F_main_BB__608_860 = 11'd860;
parameter [10:0] LEGUP_F_main_BB__608_861 = 11'd861;
parameter [10:0] LEGUP_F_main_BB__608_862 = 11'd862;
parameter [10:0] LEGUP_F_main_BB__614_863 = 11'd863;
parameter [10:0] LEGUP_F_main_BB__614_864 = 11'd864;
parameter [10:0] LEGUP_F_main_BB__614_865 = 11'd865;
parameter [10:0] LEGUP_F_main_BB__614_866 = 11'd866;
parameter [10:0] LEGUP_F_main_BB__614_867 = 11'd867;
parameter [10:0] LEGUP_F_main_BB__616_868 = 11'd868;
parameter [10:0] LEGUP_F_main_BB__crit_edge101iloopexit_869 = 11'd869;
parameter [10:0] LEGUP_F_main_BB__crit_edge101i_870 = 11'd870;
parameter [10:0] LEGUP_F_main_BB_lrph105i_871 = 11'd871;
parameter [10:0] LEGUP_F_main_BB__618_872 = 11'd872;
parameter [10:0] LEGUP_F_main_BB__618_873 = 11'd873;
parameter [10:0] LEGUP_F_main_BB__618_874 = 11'd874;
parameter [10:0] LEGUP_F_main_BB__618_875 = 11'd875;
parameter [10:0] LEGUP_F_main_BB__618_876 = 11'd876;
parameter [10:0] LEGUP_F_main_BB__633_877 = 11'd877;
parameter [10:0] LEGUP_F_main_BB__633_878 = 11'd878;
parameter [10:0] LEGUP_F_main_BB__633_879 = 11'd879;
parameter [10:0] LEGUP_F_main_BB__633_880 = 11'd880;
parameter [10:0] LEGUP_F_main_BB__633_881 = 11'd881;
parameter [10:0] LEGUP_F_main_BB__635_882 = 11'd882;
parameter [10:0] LEGUP_F_main_BB__635_883 = 11'd883;
parameter [10:0] LEGUP_F_main_BB__635_884 = 11'd884;
parameter [10:0] LEGUP_F_main_BB__639_885 = 11'd885;
parameter [10:0] LEGUP_F_main_BB__639_886 = 11'd886;
parameter [10:0] LEGUP_F_main_BB__639_887 = 11'd887;
parameter [10:0] LEGUP_F_main_BB__639_888 = 11'd888;
parameter [10:0] LEGUP_F_main_BB__639_889 = 11'd889;
parameter [10:0] LEGUP_F_main_BB__641_890 = 11'd890;
parameter [10:0] LEGUP_F_main_BB__641_891 = 11'd891;
parameter [10:0] LEGUP_F_main_BB__641_892 = 11'd892;
parameter [10:0] LEGUP_F_main_BB__645_893 = 11'd893;
parameter [10:0] LEGUP_F_main_BB__645_894 = 11'd894;
parameter [10:0] LEGUP_F_main_BB__645_895 = 11'd895;
parameter [10:0] LEGUP_F_main_BB__645_896 = 11'd896;
parameter [10:0] LEGUP_F_main_BB__645_897 = 11'd897;
parameter [10:0] LEGUP_F_main_BB__647_898 = 11'd898;
parameter [10:0] LEGUP_F_main_BB__647_899 = 11'd899;
parameter [10:0] LEGUP_F_main_BB__647_900 = 11'd900;
parameter [10:0] LEGUP_F_main_BB__651_901 = 11'd901;
parameter [10:0] LEGUP_F_main_BB__651_902 = 11'd902;
parameter [10:0] LEGUP_F_main_BB__651_903 = 11'd903;
parameter [10:0] LEGUP_F_main_BB__651_904 = 11'd904;
parameter [10:0] LEGUP_F_main_BB__651_905 = 11'd905;
parameter [10:0] LEGUP_F_main_BB__653_906 = 11'd906;
parameter [10:0] LEGUP_F_main_BB__653_907 = 11'd907;
parameter [10:0] LEGUP_F_main_BB__653_908 = 11'd908;
parameter [10:0] LEGUP_F_main_BB__657_909 = 11'd909;
parameter [10:0] LEGUP_F_main_BB__657_910 = 11'd910;
parameter [10:0] LEGUP_F_main_BB__657_911 = 11'd911;
parameter [10:0] LEGUP_F_main_BB__657_912 = 11'd912;
parameter [10:0] LEGUP_F_main_BB__657_913 = 11'd913;
parameter [10:0] LEGUP_F_main_BB__659_914 = 11'd914;
parameter [10:0] LEGUP_F_main_BB__659_915 = 11'd915;
parameter [10:0] LEGUP_F_main_BB__659_916 = 11'd916;
parameter [10:0] LEGUP_F_main_BB__663_917 = 11'd917;
parameter [10:0] LEGUP_F_main_BB__663_918 = 11'd918;
parameter [10:0] LEGUP_F_main_BB__663_919 = 11'd919;
parameter [10:0] LEGUP_F_main_BB__663_920 = 11'd920;
parameter [10:0] LEGUP_F_main_BB__663_921 = 11'd921;
parameter [10:0] LEGUP_F_main_BB__665_922 = 11'd922;
parameter [10:0] LEGUP_F_main_BB__665_923 = 11'd923;
parameter [10:0] LEGUP_F_main_BB__665_924 = 11'd924;
parameter [10:0] LEGUP_F_main_BB__669_925 = 11'd925;
parameter [10:0] LEGUP_F_main_BB__669_926 = 11'd926;
parameter [10:0] LEGUP_F_main_BB__669_927 = 11'd927;
parameter [10:0] LEGUP_F_main_BB__669_928 = 11'd928;
parameter [10:0] LEGUP_F_main_BB__669_929 = 11'd929;
parameter [10:0] LEGUP_F_main_BB__671_930 = 11'd930;
parameter [10:0] LEGUP_F_main_BB__671_931 = 11'd931;
parameter [10:0] LEGUP_F_main_BB__671_932 = 11'd932;
parameter [10:0] LEGUP_F_main_BB__675_933 = 11'd933;
parameter [10:0] LEGUP_F_main_BB__675_934 = 11'd934;
parameter [10:0] LEGUP_F_main_BB__675_935 = 11'd935;
parameter [10:0] LEGUP_F_main_BB__675_936 = 11'd936;
parameter [10:0] LEGUP_F_main_BB__675_937 = 11'd937;
parameter [10:0] LEGUP_F_main_BB__677_938 = 11'd938;
parameter [10:0] LEGUP_F_main_BB__677_939 = 11'd939;
parameter [10:0] LEGUP_F_main_BB__677_940 = 11'd940;
parameter [10:0] LEGUP_F_main_BB__681_941 = 11'd941;
parameter [10:0] LEGUP_F_main_BB__681_942 = 11'd942;
parameter [10:0] LEGUP_F_main_BB__681_943 = 11'd943;
parameter [10:0] LEGUP_F_main_BB__681_944 = 11'd944;
parameter [10:0] LEGUP_F_main_BB__681_945 = 11'd945;
parameter [10:0] LEGUP_F_main_BB__683_946 = 11'd946;
parameter [10:0] LEGUP_F_main_BB__crit_edge106iloopexit_947 = 11'd947;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_948 = 11'd948;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_949 = 11'd949;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_950 = 11'd950;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_951 = 11'd951;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_952 = 11'd952;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_953 = 11'd953;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_954 = 11'd954;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_955 = 11'd955;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_956 = 11'd956;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_957 = 11'd957;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_958 = 11'd958;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_959 = 11'd959;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_960 = 11'd960;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_961 = 11'd961;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_962 = 11'd962;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_963 = 11'd963;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_964 = 11'd964;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_965 = 11'd965;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_966 = 11'd966;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_967 = 11'd967;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_968 = 11'd968;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_969 = 11'd969;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_970 = 11'd970;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_971 = 11'd971;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_972 = 11'd972;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_973 = 11'd973;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_974 = 11'd974;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_975 = 11'd975;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_976 = 11'd976;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_977 = 11'd977;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_978 = 11'd978;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_979 = 11'd979;
parameter [10:0] LEGUP_F_main_BB__crit_edge106i_980 = 11'd980;
parameter [10:0] LEGUP_F_main_BB_lrph111i_981 = 11'd981;
parameter [10:0] LEGUP_F_main_BB__692_982 = 11'd982;
parameter [10:0] LEGUP_F_main_BB__692_983 = 11'd983;
parameter [10:0] LEGUP_F_main_BB__692_984 = 11'd984;
parameter [10:0] LEGUP_F_main_BB__692_985 = 11'd985;
parameter [10:0] LEGUP_F_main_BB__698_986 = 11'd986;
parameter [10:0] LEGUP_F_main_BB__698_987 = 11'd987;
parameter [10:0] LEGUP_F_main_BB__698_988 = 11'd988;
parameter [10:0] LEGUP_F_main_BB__698_989 = 11'd989;
parameter [10:0] LEGUP_F_main_BB__698_990 = 11'd990;
parameter [10:0] LEGUP_F_main_BB__700_991 = 11'd991;
parameter [10:0] LEGUP_F_main_BB__crit_edge112iloopexit_992 = 11'd992;
parameter [10:0] LEGUP_F_main_BB__crit_edge112i_993 = 11'd993;
parameter [10:0] LEGUP_F_main_BB_lrph116i_994 = 11'd994;
parameter [10:0] LEGUP_F_main_BB__702_995 = 11'd995;
parameter [10:0] LEGUP_F_main_BB__702_996 = 11'd996;
parameter [10:0] LEGUP_F_main_BB__702_997 = 11'd997;
parameter [10:0] LEGUP_F_main_BB__702_998 = 11'd998;
parameter [10:0] LEGUP_F_main_BB__702_999 = 11'd999;
parameter [10:0] LEGUP_F_main_BB__717_1000 = 11'd1000;
parameter [10:0] LEGUP_F_main_BB__717_1001 = 11'd1001;
parameter [10:0] LEGUP_F_main_BB__717_1002 = 11'd1002;
parameter [10:0] LEGUP_F_main_BB__717_1003 = 11'd1003;
parameter [10:0] LEGUP_F_main_BB__717_1004 = 11'd1004;
parameter [10:0] LEGUP_F_main_BB__719_1005 = 11'd1005;
parameter [10:0] LEGUP_F_main_BB__719_1006 = 11'd1006;
parameter [10:0] LEGUP_F_main_BB__719_1007 = 11'd1007;
parameter [10:0] LEGUP_F_main_BB__723_1008 = 11'd1008;
parameter [10:0] LEGUP_F_main_BB__723_1009 = 11'd1009;
parameter [10:0] LEGUP_F_main_BB__723_1010 = 11'd1010;
parameter [10:0] LEGUP_F_main_BB__723_1011 = 11'd1011;
parameter [10:0] LEGUP_F_main_BB__723_1012 = 11'd1012;
parameter [10:0] LEGUP_F_main_BB__725_1013 = 11'd1013;
parameter [10:0] LEGUP_F_main_BB__725_1014 = 11'd1014;
parameter [10:0] LEGUP_F_main_BB__725_1015 = 11'd1015;
parameter [10:0] LEGUP_F_main_BB__729_1016 = 11'd1016;
parameter [10:0] LEGUP_F_main_BB__729_1017 = 11'd1017;
parameter [10:0] LEGUP_F_main_BB__729_1018 = 11'd1018;
parameter [10:0] LEGUP_F_main_BB__729_1019 = 11'd1019;
parameter [10:0] LEGUP_F_main_BB__729_1020 = 11'd1020;
parameter [10:0] LEGUP_F_main_BB__731_1021 = 11'd1021;
parameter [10:0] LEGUP_F_main_BB__731_1022 = 11'd1022;
parameter [10:0] LEGUP_F_main_BB__731_1023 = 11'd1023;
parameter [10:0] LEGUP_F_main_BB__735_1024 = 11'd1024;
parameter [10:0] LEGUP_F_main_BB__735_1025 = 11'd1025;
parameter [10:0] LEGUP_F_main_BB__735_1026 = 11'd1026;
parameter [10:0] LEGUP_F_main_BB__735_1027 = 11'd1027;
parameter [10:0] LEGUP_F_main_BB__735_1028 = 11'd1028;
parameter [10:0] LEGUP_F_main_BB__737_1029 = 11'd1029;
parameter [10:0] LEGUP_F_main_BB__737_1030 = 11'd1030;
parameter [10:0] LEGUP_F_main_BB__737_1031 = 11'd1031;
parameter [10:0] LEGUP_F_main_BB__741_1032 = 11'd1032;
parameter [10:0] LEGUP_F_main_BB__741_1033 = 11'd1033;
parameter [10:0] LEGUP_F_main_BB__741_1034 = 11'd1034;
parameter [10:0] LEGUP_F_main_BB__741_1035 = 11'd1035;
parameter [10:0] LEGUP_F_main_BB__741_1036 = 11'd1036;
parameter [10:0] LEGUP_F_main_BB__743_1037 = 11'd1037;
parameter [10:0] LEGUP_F_main_BB__743_1038 = 11'd1038;
parameter [10:0] LEGUP_F_main_BB__743_1039 = 11'd1039;
parameter [10:0] LEGUP_F_main_BB__747_1040 = 11'd1040;
parameter [10:0] LEGUP_F_main_BB__747_1041 = 11'd1041;
parameter [10:0] LEGUP_F_main_BB__747_1042 = 11'd1042;
parameter [10:0] LEGUP_F_main_BB__747_1043 = 11'd1043;
parameter [10:0] LEGUP_F_main_BB__747_1044 = 11'd1044;
parameter [10:0] LEGUP_F_main_BB__749_1045 = 11'd1045;
parameter [10:0] LEGUP_F_main_BB__749_1046 = 11'd1046;
parameter [10:0] LEGUP_F_main_BB__749_1047 = 11'd1047;
parameter [10:0] LEGUP_F_main_BB__753_1048 = 11'd1048;
parameter [10:0] LEGUP_F_main_BB__753_1049 = 11'd1049;
parameter [10:0] LEGUP_F_main_BB__753_1050 = 11'd1050;
parameter [10:0] LEGUP_F_main_BB__753_1051 = 11'd1051;
parameter [10:0] LEGUP_F_main_BB__753_1052 = 11'd1052;
parameter [10:0] LEGUP_F_main_BB__755_1053 = 11'd1053;
parameter [10:0] LEGUP_F_main_BB__755_1054 = 11'd1054;
parameter [10:0] LEGUP_F_main_BB__755_1055 = 11'd1055;
parameter [10:0] LEGUP_F_main_BB__759_1056 = 11'd1056;
parameter [10:0] LEGUP_F_main_BB__759_1057 = 11'd1057;
parameter [10:0] LEGUP_F_main_BB__759_1058 = 11'd1058;
parameter [10:0] LEGUP_F_main_BB__759_1059 = 11'd1059;
parameter [10:0] LEGUP_F_main_BB__759_1060 = 11'd1060;
parameter [10:0] LEGUP_F_main_BB__761_1061 = 11'd1061;
parameter [10:0] LEGUP_F_main_BB__761_1062 = 11'd1062;
parameter [10:0] LEGUP_F_main_BB__761_1063 = 11'd1063;
parameter [10:0] LEGUP_F_main_BB__765_1064 = 11'd1064;
parameter [10:0] LEGUP_F_main_BB__765_1065 = 11'd1065;
parameter [10:0] LEGUP_F_main_BB__765_1066 = 11'd1066;
parameter [10:0] LEGUP_F_main_BB__765_1067 = 11'd1067;
parameter [10:0] LEGUP_F_main_BB__765_1068 = 11'd1068;
parameter [10:0] LEGUP_F_main_BB__767_1069 = 11'd1069;
parameter [10:0] LEGUP_F_main_BB__crit_edge117iloopexit_1070 = 11'd1070;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1071 = 11'd1071;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1072 = 11'd1072;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1073 = 11'd1073;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1074 = 11'd1074;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1075 = 11'd1075;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1076 = 11'd1076;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1077 = 11'd1077;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1078 = 11'd1078;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1079 = 11'd1079;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1080 = 11'd1080;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1081 = 11'd1081;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1082 = 11'd1082;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1083 = 11'd1083;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1084 = 11'd1084;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1085 = 11'd1085;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1086 = 11'd1086;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1087 = 11'd1087;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1088 = 11'd1088;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1089 = 11'd1089;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1090 = 11'd1090;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1091 = 11'd1091;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1092 = 11'd1092;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1093 = 11'd1093;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1094 = 11'd1094;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1095 = 11'd1095;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1096 = 11'd1096;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1097 = 11'd1097;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1098 = 11'd1098;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1099 = 11'd1099;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1100 = 11'd1100;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1101 = 11'd1101;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1102 = 11'd1102;
parameter [10:0] LEGUP_F_main_BB__crit_edge117i_1103 = 11'd1103;
parameter [10:0] LEGUP_F_main_BB_lrph122i_1104 = 11'd1104;
parameter [10:0] LEGUP_F_main_BB__776_1105 = 11'd1105;
parameter [10:0] LEGUP_F_main_BB__776_1106 = 11'd1106;
parameter [10:0] LEGUP_F_main_BB__776_1107 = 11'd1107;
parameter [10:0] LEGUP_F_main_BB__776_1108 = 11'd1108;
parameter [10:0] LEGUP_F_main_BB__782_1109 = 11'd1109;
parameter [10:0] LEGUP_F_main_BB__782_1110 = 11'd1110;
parameter [10:0] LEGUP_F_main_BB__782_1111 = 11'd1111;
parameter [10:0] LEGUP_F_main_BB__782_1112 = 11'd1112;
parameter [10:0] LEGUP_F_main_BB__782_1113 = 11'd1113;
parameter [10:0] LEGUP_F_main_BB__784_1114 = 11'd1114;
parameter [10:0] LEGUP_F_main_BB_sortexit_1115 = 11'd1115;
parameter [10:0] LEGUP_F_main_BB_sortexit_1116 = 11'd1116;
parameter [10:0] LEGUP_F_main_BB_sortexit_1117 = 11'd1117;
parameter [10:0] LEGUP_F_main_BB__788_1118 = 11'd1118;
parameter [10:0] LEGUP_F_main_BB__790_1119 = 11'd1119;
parameter [10:0] LEGUP_F_main_BB__790_1120 = 11'd1120;
parameter [10:0] LEGUP_F_main_BB__790_1121 = 11'd1121;
parameter [10:0] LEGUP_F_main_BB__794_1122 = 11'd1122;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [10:0] cur_state;
reg [10:0] next_state;
reg [31:0] main_lrph128i_i0126i;
reg [31:0] main_lrph128i_i0126i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph128i_scevgep239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph128i_scevgep239_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph128i_scevgep240;
reg [31:0] main_lrph128i_1;
reg [31:0] main_lrph128i_2;
reg [31:0] main_lrph128i_2_reg;
reg  main_lrph128i_exitcond238;
reg  main_lrph128i_exitcond238_reg;
reg [31:0] main_loopexit12i_indvarnext5;
reg  main_loopexit12i_exitcond147;
reg [31:0] main_lrph27i_indvar4;
reg [31:0] main_lrph27i_indvar4_reg;
reg [31:0] main_lrph27i_i10123i;
reg [31:0] main_lrph27i_i10123i_reg;
reg [31:0] main_lrph27i_3;
reg [31:0] main_lrph27i_3_reg;
reg [31:0] main_lrph27i_4;
reg [31:0] main_lrph27i_4_reg;
reg [31:0] main_lrph27i_5;
reg [31:0] main_lrph27i_5_reg;
reg [31:0] main_lrph27i_6;
reg [31:0] main_lrph27i_6_reg;
reg [31:0] main_lrph27i_7;
reg [31:0] main_lrph27i_7_reg;
reg [31:0] main_lrph27i_8;
reg [31:0] main_lrph27i_8_reg;
reg [31:0] main_lrph27i_9;
reg [31:0] main_lrph27i_9_reg;
reg [31:0] main_lrph27i_10;
reg [31:0] main_lrph27i_10_reg;
reg [31:0] main_lrph27i_11;
reg [31:0] main_lrph27i_11_reg;
reg [31:0] main_lrph27i_12;
reg [31:0] main_lrph27i_12_reg;
reg [31:0] main_lrph27i_13;
reg [31:0] main_lrph27i_13_reg;
reg [31:0] main_lrph27i_14;
reg [31:0] main_lrph27i_14_reg;
reg [31:0] main_lrph27i_15;
reg [31:0] main_lrph27i_15_reg;
reg [31:0] main_lrph27i_16;
reg [31:0] main_lrph27i_16_reg;
reg [31:0] main_lrph27i_17;
reg [31:0] main_lrph27i_17_reg;
reg [31:0] main_lrph27i_18;
reg [31:0] main_lrph27i_18_reg;
reg [31:0] main_lrph27i_19;
reg [31:0] main_lrph27i_19_reg;
reg [31:0] main_lrph27i_20;
reg [31:0] main_lrph27i_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep234_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep235_reg;
reg [31:0] main_lrph27i_21;
reg [31:0] main_lrph27i_22;
reg [31:0] main_lrph27i_22_reg;
reg [31:0] main_lrph27i_23;
reg [31:0] main_lrph27i_23_reg;
reg [31:0] main_lrph27i_24;
reg [31:0] main_lrph27i_24_reg;
reg [31:0] main_lrph27i_25;
reg [31:0] main_lrph27i_25_reg;
reg [31:0] main_lrph27i_26;
reg [31:0] main_lrph27i_26_reg;
reg [31:0] main_lrph27i_27;
reg [31:0] main_lrph27i_27_reg;
reg [31:0] main_lrph27i_28;
reg [31:0] main_lrph27i_28_reg;
reg [31:0] main_lrph27i_29;
reg [31:0] main_lrph27i_29_reg;
reg [31:0] main_lrph27i_30;
reg [31:0] main_lrph27i_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep237_reg;
reg [31:0] main_31_indvar;
reg [31:0] main_31_indvar_reg;
reg [31:0] main_31_position024i;
reg [31:0] main_31_position024i_reg;
reg [31:0] main_31_32;
reg [31:0] main_31_d2025i;
reg [31:0] main_31_d2025i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep14_reg;
reg [31:0] main_31_33;
reg [31:0] main_31_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep13_reg;
reg [31:0] main_31_34;
reg [31:0] main_31_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep12_reg;
reg [31:0] main_31_35;
reg [31:0] main_31_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep11_reg;
reg [31:0] main_31_36;
reg [31:0] main_31_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep10_reg;
reg [31:0] main_31_37;
reg [31:0] main_31_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep9_reg;
reg [31:0] main_31_38;
reg [31:0] main_31_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep8_reg;
reg [31:0] main_31_39;
reg [31:0] main_31_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep7_reg;
reg [31:0] main_31_40;
reg [31:0] main_31_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_scevgep6_reg;
reg [31:0] main_31_41;
reg [31:0] main_31_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_42;
reg [31:0] main_31_43;
reg [31:0] main_31_43_reg;
reg [31:0] main_31_44;
reg [31:0] main_31_44_reg;
reg  main_31_45;
reg [31:0] main_46_47;
reg [31:0] main_46_47_reg;
reg [31:0] main_48_49;
reg [31:0] main_48_49_reg;
reg [31:0] main_48_position1i;
reg [31:0] main_48_position1i_reg;
reg [31:0] main_48_50;
reg [31:0] main_48_50_reg;
reg  main_48_51;
reg [31:0] main_52_53;
reg [31:0] main_52_53_reg;
reg [31:0] main_54_55;
reg [31:0] main_54_55_reg;
reg [31:0] main_54_position2i;
reg [31:0] main_54_position2i_reg;
reg [31:0] main_54_56;
reg [31:0] main_54_56_reg;
reg  main_54_57;
reg [31:0] main_58_59;
reg [31:0] main_58_59_reg;
reg [31:0] main_60_61;
reg [31:0] main_60_61_reg;
reg [31:0] main_60_position3i;
reg [31:0] main_60_position3i_reg;
reg [31:0] main_60_62;
reg [31:0] main_60_62_reg;
reg  main_60_63;
reg [31:0] main_64_65;
reg [31:0] main_64_65_reg;
reg [31:0] main_66_67;
reg [31:0] main_66_67_reg;
reg [31:0] main_66_position4i;
reg [31:0] main_66_position4i_reg;
reg [31:0] main_66_68;
reg [31:0] main_66_68_reg;
reg  main_66_69;
reg [31:0] main_70_71;
reg [31:0] main_70_71_reg;
reg [31:0] main_72_73;
reg [31:0] main_72_73_reg;
reg [31:0] main_72_position5i;
reg [31:0] main_72_position5i_reg;
reg [31:0] main_72_74;
reg [31:0] main_72_74_reg;
reg  main_72_75;
reg [31:0] main_76_77;
reg [31:0] main_76_77_reg;
reg [31:0] main_78_79;
reg [31:0] main_78_79_reg;
reg [31:0] main_78_position6i;
reg [31:0] main_78_position6i_reg;
reg [31:0] main_78_80;
reg [31:0] main_78_80_reg;
reg  main_78_81;
reg [31:0] main_82_83;
reg [31:0] main_82_83_reg;
reg [31:0] main_84_85;
reg [31:0] main_84_85_reg;
reg [31:0] main_84_position7i;
reg [31:0] main_84_position7i_reg;
reg [31:0] main_84_86;
reg [31:0] main_84_86_reg;
reg  main_84_87;
reg [31:0] main_88_89;
reg [31:0] main_88_89_reg;
reg [31:0] main_90_91;
reg [31:0] main_90_91_reg;
reg [31:0] main_90_position8i;
reg [31:0] main_90_position8i_reg;
reg [31:0] main_90_92;
reg [31:0] main_90_92_reg;
reg  main_90_93;
reg [31:0] main_94_95;
reg [31:0] main_94_95_reg;
reg [31:0] main_96_position9i;
reg [31:0] main_96_position9i_reg;
reg  main_96_97;
reg [31:0] main_96_indvarnext;
reg [31:0] main__crit_edge28i_98;
reg [31:0] main__crit_edge28i_98_reg;
reg [31:0] main__crit_edge28i_99;
reg  main__crit_edge28i_100;
reg [31:0] main_lrph34ipreheader_101;
reg [31:0] main_lrph34ipreheader_102;
reg [31:0] main_lrph34ipreheader_102_reg;
reg  main_lrph34ipreheader_103;
reg [31:0] main_lrph34ipreheader_smax;
reg [31:0] main_lrph34ipreheader_104;
reg [31:0] main_lrph34ipreheader_104_reg;
reg [31:0] main_lrph34i_indvar15;
reg [31:0] main_lrph34i_indvar15_reg;
reg [31:0] main_lrph34i_position1031i;
reg [31:0] main_lrph34i_position1031i_reg;
reg [31:0] main_lrph34i_105;
reg [31:0] main_lrph34i_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph34i_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph34i_scevgep18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph34i_106;
reg [31:0] main_lrph34i_107;
reg [31:0] main_lrph34i_107_reg;
reg [31:0] main_lrph34i_108;
reg [31:0] main_lrph34i_108_reg;
reg  main_lrph34i_109;
reg [31:0] main_110_d2132i;
reg [31:0] main_110_d2132i_reg;
reg [31:0] main_110_111;
reg [31:0] main_110_111_reg;
reg [31:0] main_112_position11i;
reg [31:0] main_112_position11i_reg;
reg [31:0] main_112_indvarnext16;
reg  main_112_exitcond17;
reg  main__crit_edge35i_113;
reg [31:0] main_114_indvar19;
reg [31:0] main_114_indvar19_reg;
reg [31:0] main_114_position1236i;
reg [31:0] main_114_position1236i_reg;
reg [31:0] main_114_115;
reg [31:0] main_114_d3037i;
reg [31:0] main_114_d3037i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep29_reg;
reg [31:0] main_114_116;
reg [31:0] main_114_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep28_reg;
reg [31:0] main_114_117;
reg [31:0] main_114_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep27_reg;
reg [31:0] main_114_118;
reg [31:0] main_114_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep26_reg;
reg [31:0] main_114_119;
reg [31:0] main_114_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep25_reg;
reg [31:0] main_114_120;
reg [31:0] main_114_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep24_reg;
reg [31:0] main_114_121;
reg [31:0] main_114_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep23_reg;
reg [31:0] main_114_122;
reg [31:0] main_114_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep22_reg;
reg [31:0] main_114_123;
reg [31:0] main_114_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_scevgep21_reg;
reg [31:0] main_114_124;
reg [31:0] main_114_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_125;
reg [31:0] main_114_126;
reg [31:0] main_114_126_reg;
reg [31:0] main_114_127;
reg [31:0] main_114_127_reg;
reg  main_114_128;
reg [31:0] main_129_130;
reg [31:0] main_129_130_reg;
reg [31:0] main_131_132;
reg [31:0] main_131_132_reg;
reg [31:0] main_131_position13i;
reg [31:0] main_131_position13i_reg;
reg [31:0] main_131_133;
reg [31:0] main_131_133_reg;
reg  main_131_134;
reg [31:0] main_135_136;
reg [31:0] main_135_136_reg;
reg [31:0] main_137_138;
reg [31:0] main_137_138_reg;
reg [31:0] main_137_position14i;
reg [31:0] main_137_position14i_reg;
reg [31:0] main_137_139;
reg [31:0] main_137_139_reg;
reg  main_137_140;
reg [31:0] main_141_142;
reg [31:0] main_141_142_reg;
reg [31:0] main_143_144;
reg [31:0] main_143_144_reg;
reg [31:0] main_143_position15i;
reg [31:0] main_143_position15i_reg;
reg [31:0] main_143_145;
reg [31:0] main_143_145_reg;
reg  main_143_146;
reg [31:0] main_147_148;
reg [31:0] main_147_148_reg;
reg [31:0] main_149_150;
reg [31:0] main_149_150_reg;
reg [31:0] main_149_position16i;
reg [31:0] main_149_position16i_reg;
reg [31:0] main_149_151;
reg [31:0] main_149_151_reg;
reg  main_149_152;
reg [31:0] main_153_154;
reg [31:0] main_153_154_reg;
reg [31:0] main_155_156;
reg [31:0] main_155_156_reg;
reg [31:0] main_155_position17i;
reg [31:0] main_155_position17i_reg;
reg [31:0] main_155_157;
reg [31:0] main_155_157_reg;
reg  main_155_158;
reg [31:0] main_159_160;
reg [31:0] main_159_160_reg;
reg [31:0] main_161_162;
reg [31:0] main_161_162_reg;
reg [31:0] main_161_position18i;
reg [31:0] main_161_position18i_reg;
reg [31:0] main_161_163;
reg [31:0] main_161_163_reg;
reg  main_161_164;
reg [31:0] main_165_166;
reg [31:0] main_165_166_reg;
reg [31:0] main_167_168;
reg [31:0] main_167_168_reg;
reg [31:0] main_167_position19i;
reg [31:0] main_167_position19i_reg;
reg [31:0] main_167_169;
reg [31:0] main_167_169_reg;
reg  main_167_170;
reg [31:0] main_171_172;
reg [31:0] main_171_172_reg;
reg [31:0] main_173_174;
reg [31:0] main_173_174_reg;
reg [31:0] main_173_position20i;
reg [31:0] main_173_position20i_reg;
reg [31:0] main_173_175;
reg [31:0] main_173_175_reg;
reg  main_173_176;
reg [31:0] main_177_178;
reg [31:0] main_177_178_reg;
reg [31:0] main_179_position21i;
reg [31:0] main_179_position21i_reg;
reg  main_179_180;
reg [31:0] main_179_indvarnext20;
reg [31:0] main__crit_edge40i_position12lcssai;
reg [31:0] main__crit_edge40i_position12lcssai_reg;
reg [31:0] main__crit_edge40i_181;
reg [31:0] main__crit_edge40i_181_reg;
reg [31:0] main__crit_edge40i_182;
reg  main__crit_edge40i_183;
reg [31:0] main_lrph45i_184;
reg [31:0] main_lrph45i_185;
reg [31:0] main_lrph45i_185_reg;
reg  main_lrph45i_186;
reg [31:0] main_lrph45i_smax32;
reg [31:0] main_lrph45i_187;
reg [31:0] main_lrph45i_187_reg;
reg [31:0] main_188_indvar30;
reg [31:0] main_188_indvar30_reg;
reg [31:0] main_188_position2242i;
reg [31:0] main_188_position2242i_reg;
reg [31:0] main_188_189;
reg [31:0] main_188_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_188_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_188_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_188_190;
reg [31:0] main_188_191;
reg [31:0] main_188_191_reg;
reg [31:0] main_188_192;
reg [31:0] main_188_192_reg;
reg  main_188_193;
reg [31:0] main_194_d3143i;
reg [31:0] main_194_d3143i_reg;
reg [31:0] main_194_195;
reg [31:0] main_194_195_reg;
reg [31:0] main_196_position23i;
reg [31:0] main_196_position23i_reg;
reg [31:0] main_196_indvarnext31;
reg  main_196_exitcond33;
reg  main__crit_edge46i_197;
reg [31:0] main_198_indvar35;
reg [31:0] main_198_indvar35_reg;
reg [31:0] main_198_position2447i;
reg [31:0] main_198_position2447i_reg;
reg [31:0] main_198_199;
reg [31:0] main_198_d4048i;
reg [31:0] main_198_d4048i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep45_reg;
reg [31:0] main_198_200;
reg [31:0] main_198_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep44_reg;
reg [31:0] main_198_201;
reg [31:0] main_198_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep43_reg;
reg [31:0] main_198_202;
reg [31:0] main_198_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep42_reg;
reg [31:0] main_198_203;
reg [31:0] main_198_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep41_reg;
reg [31:0] main_198_204;
reg [31:0] main_198_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep40_reg;
reg [31:0] main_198_205;
reg [31:0] main_198_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep39_reg;
reg [31:0] main_198_206;
reg [31:0] main_198_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep38_reg;
reg [31:0] main_198_207;
reg [31:0] main_198_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_scevgep37_reg;
reg [31:0] main_198_208;
reg [31:0] main_198_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_209;
reg [31:0] main_198_210;
reg [31:0] main_198_210_reg;
reg [31:0] main_198_211;
reg [31:0] main_198_211_reg;
reg  main_198_212;
reg [31:0] main_213_214;
reg [31:0] main_213_214_reg;
reg [31:0] main_215_216;
reg [31:0] main_215_216_reg;
reg [31:0] main_215_position25i;
reg [31:0] main_215_position25i_reg;
reg [31:0] main_215_217;
reg [31:0] main_215_217_reg;
reg  main_215_218;
reg [31:0] main_219_220;
reg [31:0] main_219_220_reg;
reg [31:0] main_221_222;
reg [31:0] main_221_222_reg;
reg [31:0] main_221_position26i;
reg [31:0] main_221_position26i_reg;
reg [31:0] main_221_223;
reg [31:0] main_221_223_reg;
reg  main_221_224;
reg [31:0] main_225_226;
reg [31:0] main_225_226_reg;
reg [31:0] main_227_228;
reg [31:0] main_227_228_reg;
reg [31:0] main_227_position27i;
reg [31:0] main_227_position27i_reg;
reg [31:0] main_227_229;
reg [31:0] main_227_229_reg;
reg  main_227_230;
reg [31:0] main_231_232;
reg [31:0] main_231_232_reg;
reg [31:0] main_233_234;
reg [31:0] main_233_234_reg;
reg [31:0] main_233_position28i;
reg [31:0] main_233_position28i_reg;
reg [31:0] main_233_235;
reg [31:0] main_233_235_reg;
reg  main_233_236;
reg [31:0] main_237_238;
reg [31:0] main_237_238_reg;
reg [31:0] main_239_240;
reg [31:0] main_239_240_reg;
reg [31:0] main_239_position29i;
reg [31:0] main_239_position29i_reg;
reg [31:0] main_239_241;
reg [31:0] main_239_241_reg;
reg  main_239_242;
reg [31:0] main_243_244;
reg [31:0] main_243_244_reg;
reg [31:0] main_245_246;
reg [31:0] main_245_246_reg;
reg [31:0] main_245_position30i;
reg [31:0] main_245_position30i_reg;
reg [31:0] main_245_247;
reg [31:0] main_245_247_reg;
reg  main_245_248;
reg [31:0] main_249_250;
reg [31:0] main_249_250_reg;
reg [31:0] main_251_252;
reg [31:0] main_251_252_reg;
reg [31:0] main_251_position31i;
reg [31:0] main_251_position31i_reg;
reg [31:0] main_251_253;
reg [31:0] main_251_253_reg;
reg  main_251_254;
reg [31:0] main_255_256;
reg [31:0] main_255_256_reg;
reg [31:0] main_257_258;
reg [31:0] main_257_258_reg;
reg [31:0] main_257_position32i;
reg [31:0] main_257_position32i_reg;
reg [31:0] main_257_259;
reg [31:0] main_257_259_reg;
reg  main_257_260;
reg [31:0] main_261_262;
reg [31:0] main_261_262_reg;
reg [31:0] main_263_position33i;
reg [31:0] main_263_position33i_reg;
reg  main_263_264;
reg [31:0] main_263_indvarnext36;
reg [31:0] main__crit_edge51i_position24lcssai;
reg [31:0] main__crit_edge51i_position24lcssai_reg;
reg [31:0] main__crit_edge51i_265;
reg [31:0] main__crit_edge51i_265_reg;
reg [31:0] main__crit_edge51i_266;
reg  main__crit_edge51i_267;
reg [31:0] main_lrph56i_268;
reg [31:0] main_lrph56i_269;
reg [31:0] main_lrph56i_269_reg;
reg  main_lrph56i_270;
reg [31:0] main_lrph56i_smax48;
reg [31:0] main_lrph56i_271;
reg [31:0] main_lrph56i_271_reg;
reg [31:0] main_272_indvar46;
reg [31:0] main_272_indvar46_reg;
reg [31:0] main_272_position3453i;
reg [31:0] main_272_position3453i_reg;
reg [31:0] main_272_273;
reg [31:0] main_272_273_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_272_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_272_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_272_274;
reg [31:0] main_272_275;
reg [31:0] main_272_275_reg;
reg [31:0] main_272_276;
reg [31:0] main_272_276_reg;
reg  main_272_277;
reg [31:0] main_278_d4154i;
reg [31:0] main_278_d4154i_reg;
reg [31:0] main_278_279;
reg [31:0] main_278_279_reg;
reg [31:0] main_280_position35i;
reg [31:0] main_280_position35i_reg;
reg [31:0] main_280_indvarnext47;
reg  main_280_exitcond49;
reg  main__crit_edge57i_281;
reg [31:0] main_282_indvar51;
reg [31:0] main_282_indvar51_reg;
reg [31:0] main_282_position3658i;
reg [31:0] main_282_position3658i_reg;
reg [31:0] main_282_283;
reg [31:0] main_282_d5059i;
reg [31:0] main_282_d5059i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep61_reg;
reg [31:0] main_282_284;
reg [31:0] main_282_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep60_reg;
reg [31:0] main_282_285;
reg [31:0] main_282_285_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep59_reg;
reg [31:0] main_282_286;
reg [31:0] main_282_286_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep58_reg;
reg [31:0] main_282_287;
reg [31:0] main_282_287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep57_reg;
reg [31:0] main_282_288;
reg [31:0] main_282_288_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep56_reg;
reg [31:0] main_282_289;
reg [31:0] main_282_289_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep55_reg;
reg [31:0] main_282_290;
reg [31:0] main_282_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep54_reg;
reg [31:0] main_282_291;
reg [31:0] main_282_291_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_scevgep53_reg;
reg [31:0] main_282_292;
reg [31:0] main_282_292_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_282_293;
reg [31:0] main_282_294;
reg [31:0] main_282_294_reg;
reg [31:0] main_282_295;
reg [31:0] main_282_295_reg;
reg  main_282_296;
reg [31:0] main_297_298;
reg [31:0] main_297_298_reg;
reg [31:0] main_299_300;
reg [31:0] main_299_300_reg;
reg [31:0] main_299_position37i;
reg [31:0] main_299_position37i_reg;
reg [31:0] main_299_301;
reg [31:0] main_299_301_reg;
reg  main_299_302;
reg [31:0] main_303_304;
reg [31:0] main_303_304_reg;
reg [31:0] main_305_306;
reg [31:0] main_305_306_reg;
reg [31:0] main_305_position38i;
reg [31:0] main_305_position38i_reg;
reg [31:0] main_305_307;
reg [31:0] main_305_307_reg;
reg  main_305_308;
reg [31:0] main_309_310;
reg [31:0] main_309_310_reg;
reg [31:0] main_311_312;
reg [31:0] main_311_312_reg;
reg [31:0] main_311_position39i;
reg [31:0] main_311_position39i_reg;
reg [31:0] main_311_313;
reg [31:0] main_311_313_reg;
reg  main_311_314;
reg [31:0] main_315_316;
reg [31:0] main_315_316_reg;
reg [31:0] main_317_318;
reg [31:0] main_317_318_reg;
reg [31:0] main_317_position40i;
reg [31:0] main_317_position40i_reg;
reg [31:0] main_317_319;
reg [31:0] main_317_319_reg;
reg  main_317_320;
reg [31:0] main_321_322;
reg [31:0] main_321_322_reg;
reg [31:0] main_323_324;
reg [31:0] main_323_324_reg;
reg [31:0] main_323_position41i;
reg [31:0] main_323_position41i_reg;
reg [31:0] main_323_325;
reg [31:0] main_323_325_reg;
reg  main_323_326;
reg [31:0] main_327_328;
reg [31:0] main_327_328_reg;
reg [31:0] main_329_330;
reg [31:0] main_329_330_reg;
reg [31:0] main_329_position42i;
reg [31:0] main_329_position42i_reg;
reg [31:0] main_329_331;
reg [31:0] main_329_331_reg;
reg  main_329_332;
reg [31:0] main_333_334;
reg [31:0] main_333_334_reg;
reg [31:0] main_335_336;
reg [31:0] main_335_336_reg;
reg [31:0] main_335_position43i;
reg [31:0] main_335_position43i_reg;
reg [31:0] main_335_337;
reg [31:0] main_335_337_reg;
reg  main_335_338;
reg [31:0] main_339_340;
reg [31:0] main_339_340_reg;
reg [31:0] main_341_342;
reg [31:0] main_341_342_reg;
reg [31:0] main_341_position44i;
reg [31:0] main_341_position44i_reg;
reg [31:0] main_341_343;
reg [31:0] main_341_343_reg;
reg  main_341_344;
reg [31:0] main_345_346;
reg [31:0] main_345_346_reg;
reg [31:0] main_347_position45i;
reg [31:0] main_347_position45i_reg;
reg  main_347_348;
reg [31:0] main_347_indvarnext52;
reg [31:0] main__crit_edge62i_position36lcssai;
reg [31:0] main__crit_edge62i_position36lcssai_reg;
reg [31:0] main__crit_edge62i_349;
reg [31:0] main__crit_edge62i_349_reg;
reg [31:0] main__crit_edge62i_350;
reg  main__crit_edge62i_351;
reg [31:0] main_lrph67i_352;
reg [31:0] main_lrph67i_353;
reg [31:0] main_lrph67i_353_reg;
reg  main_lrph67i_354;
reg [31:0] main_lrph67i_smax64;
reg [31:0] main_lrph67i_355;
reg [31:0] main_lrph67i_355_reg;
reg [31:0] main_356_indvar62;
reg [31:0] main_356_indvar62_reg;
reg [31:0] main_356_position4664i;
reg [31:0] main_356_position4664i_reg;
reg [31:0] main_356_357;
reg [31:0] main_356_357_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_356_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_356_scevgep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_356_358;
reg [31:0] main_356_359;
reg [31:0] main_356_359_reg;
reg [31:0] main_356_360;
reg [31:0] main_356_360_reg;
reg  main_356_361;
reg [31:0] main_362_d5165i;
reg [31:0] main_362_d5165i_reg;
reg [31:0] main_362_363;
reg [31:0] main_362_363_reg;
reg [31:0] main_364_position47i;
reg [31:0] main_364_position47i_reg;
reg [31:0] main_364_indvarnext63;
reg  main_364_exitcond65;
reg  main__crit_edge68i_365;
reg [31:0] main_366_indvar67;
reg [31:0] main_366_indvar67_reg;
reg [31:0] main_366_position4869i;
reg [31:0] main_366_position4869i_reg;
reg [31:0] main_366_367;
reg [31:0] main_366_d6070i;
reg [31:0] main_366_d6070i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep77_reg;
reg [31:0] main_366_368;
reg [31:0] main_366_368_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep76_reg;
reg [31:0] main_366_369;
reg [31:0] main_366_369_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep75_reg;
reg [31:0] main_366_370;
reg [31:0] main_366_370_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep74_reg;
reg [31:0] main_366_371;
reg [31:0] main_366_371_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep73_reg;
reg [31:0] main_366_372;
reg [31:0] main_366_372_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep72_reg;
reg [31:0] main_366_373;
reg [31:0] main_366_373_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep71_reg;
reg [31:0] main_366_374;
reg [31:0] main_366_374_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep70_reg;
reg [31:0] main_366_375;
reg [31:0] main_366_375_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_scevgep69_reg;
reg [31:0] main_366_376;
reg [31:0] main_366_376_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_366_377;
reg [31:0] main_366_378;
reg [31:0] main_366_378_reg;
reg [31:0] main_366_379;
reg [31:0] main_366_379_reg;
reg  main_366_380;
reg [31:0] main_381_382;
reg [31:0] main_381_382_reg;
reg [31:0] main_383_384;
reg [31:0] main_383_384_reg;
reg [31:0] main_383_position49i;
reg [31:0] main_383_position49i_reg;
reg [31:0] main_383_385;
reg [31:0] main_383_385_reg;
reg  main_383_386;
reg [31:0] main_387_388;
reg [31:0] main_387_388_reg;
reg [31:0] main_389_390;
reg [31:0] main_389_390_reg;
reg [31:0] main_389_position50i;
reg [31:0] main_389_position50i_reg;
reg [31:0] main_389_391;
reg [31:0] main_389_391_reg;
reg  main_389_392;
reg [31:0] main_393_394;
reg [31:0] main_393_394_reg;
reg [31:0] main_395_396;
reg [31:0] main_395_396_reg;
reg [31:0] main_395_position51i;
reg [31:0] main_395_position51i_reg;
reg [31:0] main_395_397;
reg [31:0] main_395_397_reg;
reg  main_395_398;
reg [31:0] main_399_400;
reg [31:0] main_399_400_reg;
reg [31:0] main_401_402;
reg [31:0] main_401_402_reg;
reg [31:0] main_401_position52i;
reg [31:0] main_401_position52i_reg;
reg [31:0] main_401_403;
reg [31:0] main_401_403_reg;
reg  main_401_404;
reg [31:0] main_405_406;
reg [31:0] main_405_406_reg;
reg [31:0] main_407_408;
reg [31:0] main_407_408_reg;
reg [31:0] main_407_position53i;
reg [31:0] main_407_position53i_reg;
reg [31:0] main_407_409;
reg [31:0] main_407_409_reg;
reg  main_407_410;
reg [31:0] main_411_412;
reg [31:0] main_411_412_reg;
reg [31:0] main_413_414;
reg [31:0] main_413_414_reg;
reg [31:0] main_413_position54i;
reg [31:0] main_413_position54i_reg;
reg [31:0] main_413_415;
reg [31:0] main_413_415_reg;
reg  main_413_416;
reg [31:0] main_417_418;
reg [31:0] main_417_418_reg;
reg [31:0] main_419_420;
reg [31:0] main_419_420_reg;
reg [31:0] main_419_position55i;
reg [31:0] main_419_position55i_reg;
reg [31:0] main_419_421;
reg [31:0] main_419_421_reg;
reg  main_419_422;
reg [31:0] main_423_424;
reg [31:0] main_423_424_reg;
reg [31:0] main_425_426;
reg [31:0] main_425_426_reg;
reg [31:0] main_425_position56i;
reg [31:0] main_425_position56i_reg;
reg [31:0] main_425_427;
reg [31:0] main_425_427_reg;
reg  main_425_428;
reg [31:0] main_429_430;
reg [31:0] main_429_430_reg;
reg [31:0] main_431_position57i;
reg [31:0] main_431_position57i_reg;
reg  main_431_432;
reg [31:0] main_431_indvarnext68;
reg [31:0] main__crit_edge73i_position48lcssai;
reg [31:0] main__crit_edge73i_position48lcssai_reg;
reg [31:0] main__crit_edge73i_433;
reg [31:0] main__crit_edge73i_433_reg;
reg [31:0] main__crit_edge73i_434;
reg  main__crit_edge73i_435;
reg [31:0] main_lrph78i_436;
reg [31:0] main_lrph78i_437;
reg [31:0] main_lrph78i_437_reg;
reg  main_lrph78i_438;
reg [31:0] main_lrph78i_smax80;
reg [31:0] main_lrph78i_439;
reg [31:0] main_lrph78i_439_reg;
reg [31:0] main_440_indvar78;
reg [31:0] main_440_indvar78_reg;
reg [31:0] main_440_position5875i;
reg [31:0] main_440_position5875i_reg;
reg [31:0] main_440_441;
reg [31:0] main_440_441_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440_scevgep82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440_scevgep82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440_442;
reg [31:0] main_440_443;
reg [31:0] main_440_443_reg;
reg [31:0] main_440_444;
reg [31:0] main_440_444_reg;
reg  main_440_445;
reg [31:0] main_446_d6176i;
reg [31:0] main_446_d6176i_reg;
reg [31:0] main_446_447;
reg [31:0] main_446_447_reg;
reg [31:0] main_448_position59i;
reg [31:0] main_448_position59i_reg;
reg [31:0] main_448_indvarnext79;
reg  main_448_exitcond81;
reg  main__crit_edge79i_449;
reg [31:0] main_450_indvar83;
reg [31:0] main_450_indvar83_reg;
reg [31:0] main_450_position6080i;
reg [31:0] main_450_position6080i_reg;
reg [31:0] main_450_451;
reg [31:0] main_450_d7081i;
reg [31:0] main_450_d7081i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep93_reg;
reg [31:0] main_450_452;
reg [31:0] main_450_452_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep92_reg;
reg [31:0] main_450_453;
reg [31:0] main_450_453_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep91_reg;
reg [31:0] main_450_454;
reg [31:0] main_450_454_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep90_reg;
reg [31:0] main_450_455;
reg [31:0] main_450_455_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep89_reg;
reg [31:0] main_450_456;
reg [31:0] main_450_456_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep88_reg;
reg [31:0] main_450_457;
reg [31:0] main_450_457_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep87_reg;
reg [31:0] main_450_458;
reg [31:0] main_450_458_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep86_reg;
reg [31:0] main_450_459;
reg [31:0] main_450_459_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_scevgep85_reg;
reg [31:0] main_450_460;
reg [31:0] main_450_460_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_450_461;
reg [31:0] main_450_462;
reg [31:0] main_450_462_reg;
reg [31:0] main_450_463;
reg [31:0] main_450_463_reg;
reg  main_450_464;
reg [31:0] main_465_466;
reg [31:0] main_465_466_reg;
reg [31:0] main_467_468;
reg [31:0] main_467_468_reg;
reg [31:0] main_467_position61i;
reg [31:0] main_467_position61i_reg;
reg [31:0] main_467_469;
reg [31:0] main_467_469_reg;
reg  main_467_470;
reg [31:0] main_471_472;
reg [31:0] main_471_472_reg;
reg [31:0] main_473_474;
reg [31:0] main_473_474_reg;
reg [31:0] main_473_position62i;
reg [31:0] main_473_position62i_reg;
reg [31:0] main_473_475;
reg [31:0] main_473_475_reg;
reg  main_473_476;
reg [31:0] main_477_478;
reg [31:0] main_477_478_reg;
reg [31:0] main_479_480;
reg [31:0] main_479_480_reg;
reg [31:0] main_479_position63i;
reg [31:0] main_479_position63i_reg;
reg [31:0] main_479_481;
reg [31:0] main_479_481_reg;
reg  main_479_482;
reg [31:0] main_483_484;
reg [31:0] main_483_484_reg;
reg [31:0] main_485_486;
reg [31:0] main_485_486_reg;
reg [31:0] main_485_position64i;
reg [31:0] main_485_position64i_reg;
reg [31:0] main_485_487;
reg [31:0] main_485_487_reg;
reg  main_485_488;
reg [31:0] main_489_490;
reg [31:0] main_489_490_reg;
reg [31:0] main_491_492;
reg [31:0] main_491_492_reg;
reg [31:0] main_491_position65i;
reg [31:0] main_491_position65i_reg;
reg [31:0] main_491_493;
reg [31:0] main_491_493_reg;
reg  main_491_494;
reg [31:0] main_495_496;
reg [31:0] main_495_496_reg;
reg [31:0] main_497_498;
reg [31:0] main_497_498_reg;
reg [31:0] main_497_position66i;
reg [31:0] main_497_position66i_reg;
reg [31:0] main_497_499;
reg [31:0] main_497_499_reg;
reg  main_497_500;
reg [31:0] main_501_502;
reg [31:0] main_501_502_reg;
reg [31:0] main_503_504;
reg [31:0] main_503_504_reg;
reg [31:0] main_503_position67i;
reg [31:0] main_503_position67i_reg;
reg [31:0] main_503_505;
reg [31:0] main_503_505_reg;
reg  main_503_506;
reg [31:0] main_507_508;
reg [31:0] main_507_508_reg;
reg [31:0] main_509_510;
reg [31:0] main_509_510_reg;
reg [31:0] main_509_position68i;
reg [31:0] main_509_position68i_reg;
reg [31:0] main_509_511;
reg [31:0] main_509_511_reg;
reg  main_509_512;
reg [31:0] main_513_514;
reg [31:0] main_513_514_reg;
reg [31:0] main_515_position69i;
reg [31:0] main_515_position69i_reg;
reg  main_515_516;
reg [31:0] main_515_indvarnext84;
reg [31:0] main__crit_edge84i_position60lcssai;
reg [31:0] main__crit_edge84i_position60lcssai_reg;
reg [31:0] main__crit_edge84i_517;
reg [31:0] main__crit_edge84i_517_reg;
reg [31:0] main__crit_edge84i_518;
reg  main__crit_edge84i_519;
reg [31:0] main_lrph89i_520;
reg [31:0] main_lrph89i_521;
reg [31:0] main_lrph89i_521_reg;
reg  main_lrph89i_522;
reg [31:0] main_lrph89i_smax96;
reg [31:0] main_lrph89i_523;
reg [31:0] main_lrph89i_523_reg;
reg [31:0] main_524_indvar94;
reg [31:0] main_524_indvar94_reg;
reg [31:0] main_524_position7086i;
reg [31:0] main_524_position7086i_reg;
reg [31:0] main_524_525;
reg [31:0] main_524_525_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_scevgep98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_scevgep98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_526;
reg [31:0] main_524_527;
reg [31:0] main_524_527_reg;
reg [31:0] main_524_528;
reg [31:0] main_524_528_reg;
reg  main_524_529;
reg [31:0] main_530_d7187i;
reg [31:0] main_530_d7187i_reg;
reg [31:0] main_530_531;
reg [31:0] main_530_531_reg;
reg [31:0] main_532_position71i;
reg [31:0] main_532_position71i_reg;
reg [31:0] main_532_indvarnext95;
reg  main_532_exitcond97;
reg  main__crit_edge90i_533;
reg [31:0] main_534_indvar99;
reg [31:0] main_534_indvar99_reg;
reg [31:0] main_534_position7291i;
reg [31:0] main_534_position7291i_reg;
reg [31:0] main_534_535;
reg [31:0] main_534_d8092i;
reg [31:0] main_534_d8092i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep109_reg;
reg [31:0] main_534_536;
reg [31:0] main_534_536_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep108_reg;
reg [31:0] main_534_537;
reg [31:0] main_534_537_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep107_reg;
reg [31:0] main_534_538;
reg [31:0] main_534_538_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep106_reg;
reg [31:0] main_534_539;
reg [31:0] main_534_539_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep105_reg;
reg [31:0] main_534_540;
reg [31:0] main_534_540_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep104_reg;
reg [31:0] main_534_541;
reg [31:0] main_534_541_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep103_reg;
reg [31:0] main_534_542;
reg [31:0] main_534_542_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep102_reg;
reg [31:0] main_534_543;
reg [31:0] main_534_543_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_scevgep101_reg;
reg [31:0] main_534_544;
reg [31:0] main_534_544_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_534_545;
reg [31:0] main_534_546;
reg [31:0] main_534_546_reg;
reg [31:0] main_534_547;
reg [31:0] main_534_547_reg;
reg  main_534_548;
reg [31:0] main_549_550;
reg [31:0] main_549_550_reg;
reg [31:0] main_551_552;
reg [31:0] main_551_552_reg;
reg [31:0] main_551_position73i;
reg [31:0] main_551_position73i_reg;
reg [31:0] main_551_553;
reg [31:0] main_551_553_reg;
reg  main_551_554;
reg [31:0] main_555_556;
reg [31:0] main_555_556_reg;
reg [31:0] main_557_558;
reg [31:0] main_557_558_reg;
reg [31:0] main_557_position74i;
reg [31:0] main_557_position74i_reg;
reg [31:0] main_557_559;
reg [31:0] main_557_559_reg;
reg  main_557_560;
reg [31:0] main_561_562;
reg [31:0] main_561_562_reg;
reg [31:0] main_563_564;
reg [31:0] main_563_564_reg;
reg [31:0] main_563_position75i;
reg [31:0] main_563_position75i_reg;
reg [31:0] main_563_565;
reg [31:0] main_563_565_reg;
reg  main_563_566;
reg [31:0] main_567_568;
reg [31:0] main_567_568_reg;
reg [31:0] main_569_570;
reg [31:0] main_569_570_reg;
reg [31:0] main_569_position76i;
reg [31:0] main_569_position76i_reg;
reg [31:0] main_569_571;
reg [31:0] main_569_571_reg;
reg  main_569_572;
reg [31:0] main_573_574;
reg [31:0] main_573_574_reg;
reg [31:0] main_575_576;
reg [31:0] main_575_576_reg;
reg [31:0] main_575_position77i;
reg [31:0] main_575_position77i_reg;
reg [31:0] main_575_577;
reg [31:0] main_575_577_reg;
reg  main_575_578;
reg [31:0] main_579_580;
reg [31:0] main_579_580_reg;
reg [31:0] main_581_582;
reg [31:0] main_581_582_reg;
reg [31:0] main_581_position78i;
reg [31:0] main_581_position78i_reg;
reg [31:0] main_581_583;
reg [31:0] main_581_583_reg;
reg  main_581_584;
reg [31:0] main_585_586;
reg [31:0] main_585_586_reg;
reg [31:0] main_587_588;
reg [31:0] main_587_588_reg;
reg [31:0] main_587_position79i;
reg [31:0] main_587_position79i_reg;
reg [31:0] main_587_589;
reg [31:0] main_587_589_reg;
reg  main_587_590;
reg [31:0] main_591_592;
reg [31:0] main_591_592_reg;
reg [31:0] main_593_594;
reg [31:0] main_593_594_reg;
reg [31:0] main_593_position80i;
reg [31:0] main_593_position80i_reg;
reg [31:0] main_593_595;
reg [31:0] main_593_595_reg;
reg  main_593_596;
reg [31:0] main_597_598;
reg [31:0] main_597_598_reg;
reg [31:0] main_599_position81i;
reg [31:0] main_599_position81i_reg;
reg  main_599_600;
reg [31:0] main_599_indvarnext100;
reg [31:0] main__crit_edge95i_position72lcssai;
reg [31:0] main__crit_edge95i_position72lcssai_reg;
reg [31:0] main__crit_edge95i_601;
reg [31:0] main__crit_edge95i_601_reg;
reg [31:0] main__crit_edge95i_602;
reg  main__crit_edge95i_603;
reg [31:0] main_lrph100i_604;
reg [31:0] main_lrph100i_605;
reg [31:0] main_lrph100i_605_reg;
reg  main_lrph100i_606;
reg [31:0] main_lrph100i_smax112;
reg [31:0] main_lrph100i_607;
reg [31:0] main_lrph100i_607_reg;
reg [31:0] main_608_indvar110;
reg [31:0] main_608_indvar110_reg;
reg [31:0] main_608_position8297i;
reg [31:0] main_608_position8297i_reg;
reg [31:0] main_608_609;
reg [31:0] main_608_609_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_608_scevgep114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_608_scevgep114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_608_610;
reg [31:0] main_608_611;
reg [31:0] main_608_611_reg;
reg [31:0] main_608_612;
reg [31:0] main_608_612_reg;
reg  main_608_613;
reg [31:0] main_614_d8198i;
reg [31:0] main_614_d8198i_reg;
reg [31:0] main_614_615;
reg [31:0] main_614_615_reg;
reg [31:0] main_616_position83i;
reg [31:0] main_616_position83i_reg;
reg [31:0] main_616_indvarnext111;
reg  main_616_exitcond113;
reg  main__crit_edge101i_617;
reg [31:0] main_618_indvar115;
reg [31:0] main_618_indvar115_reg;
reg [31:0] main_618_position84102i;
reg [31:0] main_618_position84102i_reg;
reg [31:0] main_618_619;
reg [31:0] main_618_d90103i;
reg [31:0] main_618_d90103i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep125_reg;
reg [31:0] main_618_620;
reg [31:0] main_618_620_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep124_reg;
reg [31:0] main_618_621;
reg [31:0] main_618_621_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep123_reg;
reg [31:0] main_618_622;
reg [31:0] main_618_622_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep122_reg;
reg [31:0] main_618_623;
reg [31:0] main_618_623_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep121_reg;
reg [31:0] main_618_624;
reg [31:0] main_618_624_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep120_reg;
reg [31:0] main_618_625;
reg [31:0] main_618_625_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep119_reg;
reg [31:0] main_618_626;
reg [31:0] main_618_626_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep118_reg;
reg [31:0] main_618_627;
reg [31:0] main_618_627_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_scevgep117_reg;
reg [31:0] main_618_628;
reg [31:0] main_618_628_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_618_629;
reg [31:0] main_618_630;
reg [31:0] main_618_630_reg;
reg [31:0] main_618_631;
reg [31:0] main_618_631_reg;
reg  main_618_632;
reg [31:0] main_633_634;
reg [31:0] main_633_634_reg;
reg [31:0] main_635_636;
reg [31:0] main_635_636_reg;
reg [31:0] main_635_position85i;
reg [31:0] main_635_position85i_reg;
reg [31:0] main_635_637;
reg [31:0] main_635_637_reg;
reg  main_635_638;
reg [31:0] main_639_640;
reg [31:0] main_639_640_reg;
reg [31:0] main_641_642;
reg [31:0] main_641_642_reg;
reg [31:0] main_641_position86i;
reg [31:0] main_641_position86i_reg;
reg [31:0] main_641_643;
reg [31:0] main_641_643_reg;
reg  main_641_644;
reg [31:0] main_645_646;
reg [31:0] main_645_646_reg;
reg [31:0] main_647_648;
reg [31:0] main_647_648_reg;
reg [31:0] main_647_position87i;
reg [31:0] main_647_position87i_reg;
reg [31:0] main_647_649;
reg [31:0] main_647_649_reg;
reg  main_647_650;
reg [31:0] main_651_652;
reg [31:0] main_651_652_reg;
reg [31:0] main_653_654;
reg [31:0] main_653_654_reg;
reg [31:0] main_653_position88i;
reg [31:0] main_653_position88i_reg;
reg [31:0] main_653_655;
reg [31:0] main_653_655_reg;
reg  main_653_656;
reg [31:0] main_657_658;
reg [31:0] main_657_658_reg;
reg [31:0] main_659_660;
reg [31:0] main_659_660_reg;
reg [31:0] main_659_position89i;
reg [31:0] main_659_position89i_reg;
reg [31:0] main_659_661;
reg [31:0] main_659_661_reg;
reg  main_659_662;
reg [31:0] main_663_664;
reg [31:0] main_663_664_reg;
reg [31:0] main_665_666;
reg [31:0] main_665_666_reg;
reg [31:0] main_665_position90i;
reg [31:0] main_665_position90i_reg;
reg [31:0] main_665_667;
reg [31:0] main_665_667_reg;
reg  main_665_668;
reg [31:0] main_669_670;
reg [31:0] main_669_670_reg;
reg [31:0] main_671_672;
reg [31:0] main_671_672_reg;
reg [31:0] main_671_position91i;
reg [31:0] main_671_position91i_reg;
reg [31:0] main_671_673;
reg [31:0] main_671_673_reg;
reg  main_671_674;
reg [31:0] main_675_676;
reg [31:0] main_675_676_reg;
reg [31:0] main_677_678;
reg [31:0] main_677_678_reg;
reg [31:0] main_677_position92i;
reg [31:0] main_677_position92i_reg;
reg [31:0] main_677_679;
reg [31:0] main_677_679_reg;
reg  main_677_680;
reg [31:0] main_681_682;
reg [31:0] main_681_682_reg;
reg [31:0] main_683_position93i;
reg [31:0] main_683_position93i_reg;
reg  main_683_684;
reg [31:0] main_683_indvarnext116;
reg [31:0] main__crit_edge106i_position84lcssai;
reg [31:0] main__crit_edge106i_position84lcssai_reg;
reg [31:0] main__crit_edge106i_685;
reg [31:0] main__crit_edge106i_685_reg;
reg [31:0] main__crit_edge106i_686;
reg  main__crit_edge106i_687;
reg [31:0] main_lrph111i_688;
reg [31:0] main_lrph111i_689;
reg [31:0] main_lrph111i_689_reg;
reg  main_lrph111i_690;
reg [31:0] main_lrph111i_smax128;
reg [31:0] main_lrph111i_691;
reg [31:0] main_lrph111i_691_reg;
reg [31:0] main_692_indvar126;
reg [31:0] main_692_indvar126_reg;
reg [31:0] main_692_position94108i;
reg [31:0] main_692_position94108i_reg;
reg [31:0] main_692_693;
reg [31:0] main_692_693_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_scevgep130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_scevgep130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_694;
reg [31:0] main_692_695;
reg [31:0] main_692_695_reg;
reg [31:0] main_692_696;
reg [31:0] main_692_696_reg;
reg  main_692_697;
reg [31:0] main_698_d91109i;
reg [31:0] main_698_d91109i_reg;
reg [31:0] main_698_699;
reg [31:0] main_698_699_reg;
reg [31:0] main_700_position95i;
reg [31:0] main_700_position95i_reg;
reg [31:0] main_700_indvarnext127;
reg  main_700_exitcond129;
reg  main__crit_edge112i_701;
reg [31:0] main_702_indvar131;
reg [31:0] main_702_indvar131_reg;
reg [31:0] main_702_position96113i;
reg [31:0] main_702_position96113i_reg;
reg [31:0] main_702_703;
reg [31:0] main_702_d100114i;
reg [31:0] main_702_d100114i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep141_reg;
reg [31:0] main_702_704;
reg [31:0] main_702_704_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep140_reg;
reg [31:0] main_702_705;
reg [31:0] main_702_705_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep139_reg;
reg [31:0] main_702_706;
reg [31:0] main_702_706_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep138_reg;
reg [31:0] main_702_707;
reg [31:0] main_702_707_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep137_reg;
reg [31:0] main_702_708;
reg [31:0] main_702_708_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep136_reg;
reg [31:0] main_702_709;
reg [31:0] main_702_709_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep135_reg;
reg [31:0] main_702_710;
reg [31:0] main_702_710_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep134_reg;
reg [31:0] main_702_711;
reg [31:0] main_702_711_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_scevgep133_reg;
reg [31:0] main_702_712;
reg [31:0] main_702_712_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_702_713;
reg [31:0] main_702_714;
reg [31:0] main_702_714_reg;
reg [31:0] main_702_715;
reg [31:0] main_702_715_reg;
reg  main_702_716;
reg [31:0] main_717_718;
reg [31:0] main_717_718_reg;
reg [31:0] main_719_720;
reg [31:0] main_719_720_reg;
reg [31:0] main_719_position97i;
reg [31:0] main_719_position97i_reg;
reg [31:0] main_719_721;
reg [31:0] main_719_721_reg;
reg  main_719_722;
reg [31:0] main_723_724;
reg [31:0] main_723_724_reg;
reg [31:0] main_725_726;
reg [31:0] main_725_726_reg;
reg [31:0] main_725_position98i;
reg [31:0] main_725_position98i_reg;
reg [31:0] main_725_727;
reg [31:0] main_725_727_reg;
reg  main_725_728;
reg [31:0] main_729_730;
reg [31:0] main_729_730_reg;
reg [31:0] main_731_732;
reg [31:0] main_731_732_reg;
reg [31:0] main_731_position99i;
reg [31:0] main_731_position99i_reg;
reg [31:0] main_731_733;
reg [31:0] main_731_733_reg;
reg  main_731_734;
reg [31:0] main_735_736;
reg [31:0] main_735_736_reg;
reg [31:0] main_737_738;
reg [31:0] main_737_738_reg;
reg [31:0] main_737_position100i;
reg [31:0] main_737_position100i_reg;
reg [31:0] main_737_739;
reg [31:0] main_737_739_reg;
reg  main_737_740;
reg [31:0] main_741_742;
reg [31:0] main_741_742_reg;
reg [31:0] main_743_744;
reg [31:0] main_743_744_reg;
reg [31:0] main_743_position101i;
reg [31:0] main_743_position101i_reg;
reg [31:0] main_743_745;
reg [31:0] main_743_745_reg;
reg  main_743_746;
reg [31:0] main_747_748;
reg [31:0] main_747_748_reg;
reg [31:0] main_749_750;
reg [31:0] main_749_750_reg;
reg [31:0] main_749_position102i;
reg [31:0] main_749_position102i_reg;
reg [31:0] main_749_751;
reg [31:0] main_749_751_reg;
reg  main_749_752;
reg [31:0] main_753_754;
reg [31:0] main_753_754_reg;
reg [31:0] main_755_756;
reg [31:0] main_755_756_reg;
reg [31:0] main_755_position103i;
reg [31:0] main_755_position103i_reg;
reg [31:0] main_755_757;
reg [31:0] main_755_757_reg;
reg  main_755_758;
reg [31:0] main_759_760;
reg [31:0] main_759_760_reg;
reg [31:0] main_761_762;
reg [31:0] main_761_762_reg;
reg [31:0] main_761_position104i;
reg [31:0] main_761_position104i_reg;
reg [31:0] main_761_763;
reg [31:0] main_761_763_reg;
reg  main_761_764;
reg [31:0] main_765_766;
reg [31:0] main_765_766_reg;
reg [31:0] main_767_position105i;
reg [31:0] main_767_position105i_reg;
reg  main_767_768;
reg [31:0] main_767_indvarnext132;
reg [31:0] main__crit_edge117i_position96lcssai;
reg [31:0] main__crit_edge117i_position96lcssai_reg;
reg [31:0] main__crit_edge117i_769;
reg [31:0] main__crit_edge117i_769_reg;
reg [31:0] main__crit_edge117i_770;
reg  main__crit_edge117i_771;
reg [31:0] main_lrph122i_772;
reg [31:0] main_lrph122i_773;
reg [31:0] main_lrph122i_773_reg;
reg  main_lrph122i_774;
reg [31:0] main_lrph122i_smax144;
reg [31:0] main_lrph122i_775;
reg [31:0] main_lrph122i_775_reg;
reg [31:0] main_776_indvar142;
reg [31:0] main_776_indvar142_reg;
reg [31:0] main_776_position106119i;
reg [31:0] main_776_position106119i_reg;
reg [31:0] main_776_777;
reg [31:0] main_776_777_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_776_scevgep146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_776_scevgep146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_776_778;
reg [31:0] main_776_779;
reg [31:0] main_776_779_reg;
reg [31:0] main_776_780;
reg [31:0] main_776_780_reg;
reg  main_776_781;
reg [31:0] main_782_d101120i;
reg [31:0] main_782_d101120i_reg;
reg [31:0] main_782_783;
reg [31:0] main_782_783_reg;
reg [31:0] main_784_position107i;
reg [31:0] main_784_position107i_reg;
reg [31:0] main_784_indvarnext143;
reg  main_784_exitcond145;
reg [31:0] main_sortexit_i02;
reg [31:0] main_sortexit_i02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sortexit_scevgep3;
reg [31:0] main_sortexit_785;
reg [31:0] main_sortexit_787;
reg [31:0] main_sortexit_787_reg;
reg  main_sortexit_exitcond;
reg  main_sortexit_exitcond_reg;
reg [31:0] main_790_i11;
reg [31:0] main_790_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_790_scevgep;
reg [31:0] main_790_791;
reg [31:0] main_790_793;
reg [31:0] main_790_793_reg;
reg  main_790_exitcond2;
reg  main_790_exitcond2_reg;
reg [31:0] main_signed_modulus_32_0_op0;
reg [31:0] main_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_main__crit_edge28i_98_temp_out;
wire [31:0] main__crit_edge28i_98_unused;
reg  lpm_divide_main__crit_edge28i_98_en;
reg [31:0] lpm_divide_main__crit_edge28i_98_out;
reg [31:0] main_signed_modulus_32_0;
reg  lpm_mult_main_lrph27i_i10123i_en;
reg [31:0] main_lrph27i_i10123i_stage0_reg;
reg  lpm_mult_main_lrph27i_21_en;
reg [31:0] main_lrph27i_21_stage0_reg;
reg  lpm_mult_main_31_32_en;
reg [31:0] main_31_32_stage0_reg;
reg  lpm_mult_main_114_115_en;
reg [31:0] main_114_115_stage0_reg;
reg  lpm_mult_main_198_199_en;
reg [31:0] main_198_199_stage0_reg;
reg  lpm_mult_main_282_283_en;
reg [31:0] main_282_283_stage0_reg;
reg  lpm_mult_main_366_367_en;
reg [31:0] main_366_367_stage0_reg;
reg  lpm_mult_main_450_451_en;
reg [31:0] main_450_451_stage0_reg;
reg  lpm_mult_main_534_535_en;
reg [31:0] main_534_535_stage0_reg;
reg  lpm_mult_main_618_619_en;
reg [31:0] main_618_619_stage0_reg;
reg  lpm_mult_main_702_703_en;
reg [31:0] main_702_703_stage0_reg;

/*   %98 = srem i32 %30, 9*/
lpm_divide lpm_divide_main__crit_edge28i_98 (
	.quotient (main__crit_edge28i_98_unused),
	.remain (lpm_divide_main__crit_edge28i_98_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main__crit_edge28i_98_en),
	.numer (main_signed_modulus_32_0_op0),
	.denom (main_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_main__crit_edge28i_98.lpm_pipeline = 32,
	lpm_divide_main__crit_edge28i_98.lpm_widthn = 32,
	lpm_divide_main__crit_edge28i_98.lpm_widthd = 32,
	lpm_divide_main__crit_edge28i_98.lpm_drepresentation = "SIGNED",
	lpm_divide_main__crit_edge28i_98.lpm_nrepresentation = "SIGNED",
	lpm_divide_main__crit_edge28i_98.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sort.exit*/
	/*   %786 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %785) #1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1117)) begin
		$write("%d	", $signed(main_sortexit_785));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_sortexit_785) === 1'bX) finish <= 0;
	end
	/* main: %788*/
	/*   %789 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__788_1118)) begin
		$write("\n\n-----------\n");
	end
	/* main: %790*/
	/*   %792 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %791) #1*/
	if ((cur_state == LEGUP_F_main_BB__790_1121)) begin
		$write("%d	", $signed(main_790_791));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_790_791) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_lrph128i_1;
LEGUP_F_main_BB__110_125:
		next_state = LEGUP_F_main_BB__110_126;
LEGUP_F_main_BB__110_126:
		next_state = LEGUP_F_main_BB__110_127;
LEGUP_F_main_BB__110_127:
		next_state = LEGUP_F_main_BB__110_128;
LEGUP_F_main_BB__110_128:
		next_state = LEGUP_F_main_BB__110_129;
LEGUP_F_main_BB__110_129:
		next_state = LEGUP_F_main_BB__112_130;
LEGUP_F_main_BB__112_130:
	if ((main_112_exitcond17 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge35iloopexit_131;
	else if ((main_112_exitcond17 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph34i_121;
LEGUP_F_main_BB__114_134:
		next_state = LEGUP_F_main_BB__114_135;
LEGUP_F_main_BB__114_135:
		next_state = LEGUP_F_main_BB__114_136;
LEGUP_F_main_BB__114_136:
		next_state = LEGUP_F_main_BB__114_137;
LEGUP_F_main_BB__114_137:
		next_state = LEGUP_F_main_BB__114_138;
LEGUP_F_main_BB__114_138:
	if ((main_114_128 == 1'd1))
		next_state = LEGUP_F_main_BB__129_139;
	else if ((main_114_128 == 1'd0))
		next_state = LEGUP_F_main_BB__131_144;
LEGUP_F_main_BB__129_139:
		next_state = LEGUP_F_main_BB__129_140;
LEGUP_F_main_BB__129_140:
		next_state = LEGUP_F_main_BB__129_141;
LEGUP_F_main_BB__129_141:
		next_state = LEGUP_F_main_BB__129_142;
LEGUP_F_main_BB__129_142:
		next_state = LEGUP_F_main_BB__129_143;
LEGUP_F_main_BB__129_143:
		next_state = LEGUP_F_main_BB__131_144;
LEGUP_F_main_BB__131_144:
		next_state = LEGUP_F_main_BB__131_145;
LEGUP_F_main_BB__131_145:
		next_state = LEGUP_F_main_BB__131_146;
LEGUP_F_main_BB__131_146:
	if ((main_131_134 == 1'd1))
		next_state = LEGUP_F_main_BB__135_147;
	else if ((main_131_134 == 1'd0))
		next_state = LEGUP_F_main_BB__137_152;
LEGUP_F_main_BB__135_147:
		next_state = LEGUP_F_main_BB__135_148;
LEGUP_F_main_BB__135_148:
		next_state = LEGUP_F_main_BB__135_149;
LEGUP_F_main_BB__135_149:
		next_state = LEGUP_F_main_BB__135_150;
LEGUP_F_main_BB__135_150:
		next_state = LEGUP_F_main_BB__135_151;
LEGUP_F_main_BB__135_151:
		next_state = LEGUP_F_main_BB__137_152;
LEGUP_F_main_BB__137_152:
		next_state = LEGUP_F_main_BB__137_153;
LEGUP_F_main_BB__137_153:
		next_state = LEGUP_F_main_BB__137_154;
LEGUP_F_main_BB__137_154:
	if ((main_137_140 == 1'd1))
		next_state = LEGUP_F_main_BB__141_155;
	else if ((main_137_140 == 1'd0))
		next_state = LEGUP_F_main_BB__143_160;
LEGUP_F_main_BB__141_155:
		next_state = LEGUP_F_main_BB__141_156;
LEGUP_F_main_BB__141_156:
		next_state = LEGUP_F_main_BB__141_157;
LEGUP_F_main_BB__141_157:
		next_state = LEGUP_F_main_BB__141_158;
LEGUP_F_main_BB__141_158:
		next_state = LEGUP_F_main_BB__141_159;
LEGUP_F_main_BB__141_159:
		next_state = LEGUP_F_main_BB__143_160;
LEGUP_F_main_BB__143_160:
		next_state = LEGUP_F_main_BB__143_161;
LEGUP_F_main_BB__143_161:
		next_state = LEGUP_F_main_BB__143_162;
LEGUP_F_main_BB__143_162:
	if ((main_143_146 == 1'd1))
		next_state = LEGUP_F_main_BB__147_163;
	else if ((main_143_146 == 1'd0))
		next_state = LEGUP_F_main_BB__149_168;
LEGUP_F_main_BB__147_163:
		next_state = LEGUP_F_main_BB__147_164;
LEGUP_F_main_BB__147_164:
		next_state = LEGUP_F_main_BB__147_165;
LEGUP_F_main_BB__147_165:
		next_state = LEGUP_F_main_BB__147_166;
LEGUP_F_main_BB__147_166:
		next_state = LEGUP_F_main_BB__147_167;
LEGUP_F_main_BB__147_167:
		next_state = LEGUP_F_main_BB__149_168;
LEGUP_F_main_BB__149_168:
		next_state = LEGUP_F_main_BB__149_169;
LEGUP_F_main_BB__149_169:
		next_state = LEGUP_F_main_BB__149_170;
LEGUP_F_main_BB__149_170:
	if ((main_149_152 == 1'd1))
		next_state = LEGUP_F_main_BB__153_171;
	else if ((main_149_152 == 1'd0))
		next_state = LEGUP_F_main_BB__155_176;
LEGUP_F_main_BB__153_171:
		next_state = LEGUP_F_main_BB__153_172;
LEGUP_F_main_BB__153_172:
		next_state = LEGUP_F_main_BB__153_173;
LEGUP_F_main_BB__153_173:
		next_state = LEGUP_F_main_BB__153_174;
LEGUP_F_main_BB__153_174:
		next_state = LEGUP_F_main_BB__153_175;
LEGUP_F_main_BB__153_175:
		next_state = LEGUP_F_main_BB__155_176;
LEGUP_F_main_BB__155_176:
		next_state = LEGUP_F_main_BB__155_177;
LEGUP_F_main_BB__155_177:
		next_state = LEGUP_F_main_BB__155_178;
LEGUP_F_main_BB__155_178:
	if ((main_155_158 == 1'd1))
		next_state = LEGUP_F_main_BB__159_179;
	else if ((main_155_158 == 1'd0))
		next_state = LEGUP_F_main_BB__161_184;
LEGUP_F_main_BB__159_179:
		next_state = LEGUP_F_main_BB__159_180;
LEGUP_F_main_BB__159_180:
		next_state = LEGUP_F_main_BB__159_181;
LEGUP_F_main_BB__159_181:
		next_state = LEGUP_F_main_BB__159_182;
LEGUP_F_main_BB__159_182:
		next_state = LEGUP_F_main_BB__159_183;
LEGUP_F_main_BB__159_183:
		next_state = LEGUP_F_main_BB__161_184;
LEGUP_F_main_BB__161_184:
		next_state = LEGUP_F_main_BB__161_185;
LEGUP_F_main_BB__161_185:
		next_state = LEGUP_F_main_BB__161_186;
LEGUP_F_main_BB__161_186:
	if ((main_161_164 == 1'd1))
		next_state = LEGUP_F_main_BB__165_187;
	else if ((main_161_164 == 1'd0))
		next_state = LEGUP_F_main_BB__167_192;
LEGUP_F_main_BB__165_187:
		next_state = LEGUP_F_main_BB__165_188;
LEGUP_F_main_BB__165_188:
		next_state = LEGUP_F_main_BB__165_189;
LEGUP_F_main_BB__165_189:
		next_state = LEGUP_F_main_BB__165_190;
LEGUP_F_main_BB__165_190:
		next_state = LEGUP_F_main_BB__165_191;
LEGUP_F_main_BB__165_191:
		next_state = LEGUP_F_main_BB__167_192;
LEGUP_F_main_BB__167_192:
		next_state = LEGUP_F_main_BB__167_193;
LEGUP_F_main_BB__167_193:
		next_state = LEGUP_F_main_BB__167_194;
LEGUP_F_main_BB__167_194:
	if ((main_167_170 == 1'd1))
		next_state = LEGUP_F_main_BB__171_195;
	else if ((main_167_170 == 1'd0))
		next_state = LEGUP_F_main_BB__173_200;
LEGUP_F_main_BB__171_195:
		next_state = LEGUP_F_main_BB__171_196;
LEGUP_F_main_BB__171_196:
		next_state = LEGUP_F_main_BB__171_197;
LEGUP_F_main_BB__171_197:
		next_state = LEGUP_F_main_BB__171_198;
LEGUP_F_main_BB__171_198:
		next_state = LEGUP_F_main_BB__171_199;
LEGUP_F_main_BB__171_199:
		next_state = LEGUP_F_main_BB__173_200;
LEGUP_F_main_BB__173_200:
		next_state = LEGUP_F_main_BB__173_201;
LEGUP_F_main_BB__173_201:
		next_state = LEGUP_F_main_BB__173_202;
LEGUP_F_main_BB__173_202:
	if ((main_173_176 == 1'd1))
		next_state = LEGUP_F_main_BB__177_203;
	else if ((main_173_176 == 1'd0))
		next_state = LEGUP_F_main_BB__179_208;
LEGUP_F_main_BB__177_203:
		next_state = LEGUP_F_main_BB__177_204;
LEGUP_F_main_BB__177_204:
		next_state = LEGUP_F_main_BB__177_205;
LEGUP_F_main_BB__177_205:
		next_state = LEGUP_F_main_BB__177_206;
LEGUP_F_main_BB__177_206:
		next_state = LEGUP_F_main_BB__177_207;
LEGUP_F_main_BB__177_207:
		next_state = LEGUP_F_main_BB__179_208;
LEGUP_F_main_BB__179_208:
	if ((main_179_180 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge40iloopexit_209;
	else if ((main_179_180 == 1'd0))
		next_state = LEGUP_F_main_BB__114_134;
LEGUP_F_main_BB__188_244:
		next_state = LEGUP_F_main_BB__188_245;
LEGUP_F_main_BB__188_245:
		next_state = LEGUP_F_main_BB__188_246;
LEGUP_F_main_BB__188_246:
		next_state = LEGUP_F_main_BB__188_247;
LEGUP_F_main_BB__188_247:
	if ((main_188_193 == 1'd1))
		next_state = LEGUP_F_main_BB__194_248;
	else if ((main_188_193 == 1'd0))
		next_state = LEGUP_F_main_BB__196_253;
LEGUP_F_main_BB__194_248:
		next_state = LEGUP_F_main_BB__194_249;
LEGUP_F_main_BB__194_249:
		next_state = LEGUP_F_main_BB__194_250;
LEGUP_F_main_BB__194_250:
		next_state = LEGUP_F_main_BB__194_251;
LEGUP_F_main_BB__194_251:
		next_state = LEGUP_F_main_BB__194_252;
LEGUP_F_main_BB__194_252:
		next_state = LEGUP_F_main_BB__196_253;
LEGUP_F_main_BB__196_253:
	if ((main_196_exitcond33 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge46iloopexit_254;
	else if ((main_196_exitcond33 == 1'd0))
		next_state = LEGUP_F_main_BB__188_244;
LEGUP_F_main_BB__198_257:
		next_state = LEGUP_F_main_BB__198_258;
LEGUP_F_main_BB__198_258:
		next_state = LEGUP_F_main_BB__198_259;
LEGUP_F_main_BB__198_259:
		next_state = LEGUP_F_main_BB__198_260;
LEGUP_F_main_BB__198_260:
		next_state = LEGUP_F_main_BB__198_261;
LEGUP_F_main_BB__198_261:
	if ((main_198_212 == 1'd1))
		next_state = LEGUP_F_main_BB__213_262;
	else if ((main_198_212 == 1'd0))
		next_state = LEGUP_F_main_BB__215_267;
LEGUP_F_main_BB__213_262:
		next_state = LEGUP_F_main_BB__213_263;
LEGUP_F_main_BB__213_263:
		next_state = LEGUP_F_main_BB__213_264;
LEGUP_F_main_BB__213_264:
		next_state = LEGUP_F_main_BB__213_265;
LEGUP_F_main_BB__213_265:
		next_state = LEGUP_F_main_BB__213_266;
LEGUP_F_main_BB__213_266:
		next_state = LEGUP_F_main_BB__215_267;
LEGUP_F_main_BB__215_267:
		next_state = LEGUP_F_main_BB__215_268;
LEGUP_F_main_BB__215_268:
		next_state = LEGUP_F_main_BB__215_269;
LEGUP_F_main_BB__215_269:
	if ((main_215_218 == 1'd1))
		next_state = LEGUP_F_main_BB__219_270;
	else if ((main_215_218 == 1'd0))
		next_state = LEGUP_F_main_BB__221_275;
LEGUP_F_main_BB__219_270:
		next_state = LEGUP_F_main_BB__219_271;
LEGUP_F_main_BB__219_271:
		next_state = LEGUP_F_main_BB__219_272;
LEGUP_F_main_BB__219_272:
		next_state = LEGUP_F_main_BB__219_273;
LEGUP_F_main_BB__219_273:
		next_state = LEGUP_F_main_BB__219_274;
LEGUP_F_main_BB__219_274:
		next_state = LEGUP_F_main_BB__221_275;
LEGUP_F_main_BB__221_275:
		next_state = LEGUP_F_main_BB__221_276;
LEGUP_F_main_BB__221_276:
		next_state = LEGUP_F_main_BB__221_277;
LEGUP_F_main_BB__221_277:
	if ((main_221_224 == 1'd1))
		next_state = LEGUP_F_main_BB__225_278;
	else if ((main_221_224 == 1'd0))
		next_state = LEGUP_F_main_BB__227_283;
LEGUP_F_main_BB__225_278:
		next_state = LEGUP_F_main_BB__225_279;
LEGUP_F_main_BB__225_279:
		next_state = LEGUP_F_main_BB__225_280;
LEGUP_F_main_BB__225_280:
		next_state = LEGUP_F_main_BB__225_281;
LEGUP_F_main_BB__225_281:
		next_state = LEGUP_F_main_BB__225_282;
LEGUP_F_main_BB__225_282:
		next_state = LEGUP_F_main_BB__227_283;
LEGUP_F_main_BB__227_283:
		next_state = LEGUP_F_main_BB__227_284;
LEGUP_F_main_BB__227_284:
		next_state = LEGUP_F_main_BB__227_285;
LEGUP_F_main_BB__227_285:
	if ((main_227_230 == 1'd1))
		next_state = LEGUP_F_main_BB__231_286;
	else if ((main_227_230 == 1'd0))
		next_state = LEGUP_F_main_BB__233_291;
LEGUP_F_main_BB__231_286:
		next_state = LEGUP_F_main_BB__231_287;
LEGUP_F_main_BB__231_287:
		next_state = LEGUP_F_main_BB__231_288;
LEGUP_F_main_BB__231_288:
		next_state = LEGUP_F_main_BB__231_289;
LEGUP_F_main_BB__231_289:
		next_state = LEGUP_F_main_BB__231_290;
LEGUP_F_main_BB__231_290:
		next_state = LEGUP_F_main_BB__233_291;
LEGUP_F_main_BB__233_291:
		next_state = LEGUP_F_main_BB__233_292;
LEGUP_F_main_BB__233_292:
		next_state = LEGUP_F_main_BB__233_293;
LEGUP_F_main_BB__233_293:
	if ((main_233_236 == 1'd1))
		next_state = LEGUP_F_main_BB__237_294;
	else if ((main_233_236 == 1'd0))
		next_state = LEGUP_F_main_BB__239_299;
LEGUP_F_main_BB__237_294:
		next_state = LEGUP_F_main_BB__237_295;
LEGUP_F_main_BB__237_295:
		next_state = LEGUP_F_main_BB__237_296;
LEGUP_F_main_BB__237_296:
		next_state = LEGUP_F_main_BB__237_297;
LEGUP_F_main_BB__237_297:
		next_state = LEGUP_F_main_BB__237_298;
LEGUP_F_main_BB__237_298:
		next_state = LEGUP_F_main_BB__239_299;
LEGUP_F_main_BB__239_299:
		next_state = LEGUP_F_main_BB__239_300;
LEGUP_F_main_BB__239_300:
		next_state = LEGUP_F_main_BB__239_301;
LEGUP_F_main_BB__239_301:
	if ((main_239_242 == 1'd1))
		next_state = LEGUP_F_main_BB__243_302;
	else if ((main_239_242 == 1'd0))
		next_state = LEGUP_F_main_BB__245_307;
LEGUP_F_main_BB__243_302:
		next_state = LEGUP_F_main_BB__243_303;
LEGUP_F_main_BB__243_303:
		next_state = LEGUP_F_main_BB__243_304;
LEGUP_F_main_BB__243_304:
		next_state = LEGUP_F_main_BB__243_305;
LEGUP_F_main_BB__243_305:
		next_state = LEGUP_F_main_BB__243_306;
LEGUP_F_main_BB__243_306:
		next_state = LEGUP_F_main_BB__245_307;
LEGUP_F_main_BB__245_307:
		next_state = LEGUP_F_main_BB__245_308;
LEGUP_F_main_BB__245_308:
		next_state = LEGUP_F_main_BB__245_309;
LEGUP_F_main_BB__245_309:
	if ((main_245_248 == 1'd1))
		next_state = LEGUP_F_main_BB__249_310;
	else if ((main_245_248 == 1'd0))
		next_state = LEGUP_F_main_BB__251_315;
LEGUP_F_main_BB__249_310:
		next_state = LEGUP_F_main_BB__249_311;
LEGUP_F_main_BB__249_311:
		next_state = LEGUP_F_main_BB__249_312;
LEGUP_F_main_BB__249_312:
		next_state = LEGUP_F_main_BB__249_313;
LEGUP_F_main_BB__249_313:
		next_state = LEGUP_F_main_BB__249_314;
LEGUP_F_main_BB__249_314:
		next_state = LEGUP_F_main_BB__251_315;
LEGUP_F_main_BB__251_315:
		next_state = LEGUP_F_main_BB__251_316;
LEGUP_F_main_BB__251_316:
		next_state = LEGUP_F_main_BB__251_317;
LEGUP_F_main_BB__251_317:
	if ((main_251_254 == 1'd1))
		next_state = LEGUP_F_main_BB__255_318;
	else if ((main_251_254 == 1'd0))
		next_state = LEGUP_F_main_BB__257_323;
LEGUP_F_main_BB__255_318:
		next_state = LEGUP_F_main_BB__255_319;
LEGUP_F_main_BB__255_319:
		next_state = LEGUP_F_main_BB__255_320;
LEGUP_F_main_BB__255_320:
		next_state = LEGUP_F_main_BB__255_321;
LEGUP_F_main_BB__255_321:
		next_state = LEGUP_F_main_BB__255_322;
LEGUP_F_main_BB__255_322:
		next_state = LEGUP_F_main_BB__257_323;
LEGUP_F_main_BB__257_323:
		next_state = LEGUP_F_main_BB__257_324;
LEGUP_F_main_BB__257_324:
		next_state = LEGUP_F_main_BB__257_325;
LEGUP_F_main_BB__257_325:
	if ((main_257_260 == 1'd1))
		next_state = LEGUP_F_main_BB__261_326;
	else if ((main_257_260 == 1'd0))
		next_state = LEGUP_F_main_BB__263_331;
LEGUP_F_main_BB__261_326:
		next_state = LEGUP_F_main_BB__261_327;
LEGUP_F_main_BB__261_327:
		next_state = LEGUP_F_main_BB__261_328;
LEGUP_F_main_BB__261_328:
		next_state = LEGUP_F_main_BB__261_329;
LEGUP_F_main_BB__261_329:
		next_state = LEGUP_F_main_BB__261_330;
LEGUP_F_main_BB__261_330:
		next_state = LEGUP_F_main_BB__263_331;
LEGUP_F_main_BB__263_331:
	if ((main_263_264 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge51iloopexit_332;
	else if ((main_263_264 == 1'd0))
		next_state = LEGUP_F_main_BB__198_257;
LEGUP_F_main_BB__272_367:
		next_state = LEGUP_F_main_BB__272_368;
LEGUP_F_main_BB__272_368:
		next_state = LEGUP_F_main_BB__272_369;
LEGUP_F_main_BB__272_369:
		next_state = LEGUP_F_main_BB__272_370;
LEGUP_F_main_BB__272_370:
	if ((main_272_277 == 1'd1))
		next_state = LEGUP_F_main_BB__278_371;
	else if ((main_272_277 == 1'd0))
		next_state = LEGUP_F_main_BB__280_376;
LEGUP_F_main_BB__278_371:
		next_state = LEGUP_F_main_BB__278_372;
LEGUP_F_main_BB__278_372:
		next_state = LEGUP_F_main_BB__278_373;
LEGUP_F_main_BB__278_373:
		next_state = LEGUP_F_main_BB__278_374;
LEGUP_F_main_BB__278_374:
		next_state = LEGUP_F_main_BB__278_375;
LEGUP_F_main_BB__278_375:
		next_state = LEGUP_F_main_BB__280_376;
LEGUP_F_main_BB__280_376:
	if ((main_280_exitcond49 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge57iloopexit_377;
	else if ((main_280_exitcond49 == 1'd0))
		next_state = LEGUP_F_main_BB__272_367;
LEGUP_F_main_BB__282_380:
		next_state = LEGUP_F_main_BB__282_381;
LEGUP_F_main_BB__282_381:
		next_state = LEGUP_F_main_BB__282_382;
LEGUP_F_main_BB__282_382:
		next_state = LEGUP_F_main_BB__282_383;
LEGUP_F_main_BB__282_383:
		next_state = LEGUP_F_main_BB__282_384;
LEGUP_F_main_BB__282_384:
	if ((main_282_296 == 1'd1))
		next_state = LEGUP_F_main_BB__297_385;
	else if ((main_282_296 == 1'd0))
		next_state = LEGUP_F_main_BB__299_390;
LEGUP_F_main_BB__297_385:
		next_state = LEGUP_F_main_BB__297_386;
LEGUP_F_main_BB__297_386:
		next_state = LEGUP_F_main_BB__297_387;
LEGUP_F_main_BB__297_387:
		next_state = LEGUP_F_main_BB__297_388;
LEGUP_F_main_BB__297_388:
		next_state = LEGUP_F_main_BB__297_389;
LEGUP_F_main_BB__297_389:
		next_state = LEGUP_F_main_BB__299_390;
LEGUP_F_main_BB__299_390:
		next_state = LEGUP_F_main_BB__299_391;
LEGUP_F_main_BB__299_391:
		next_state = LEGUP_F_main_BB__299_392;
LEGUP_F_main_BB__299_392:
	if ((main_299_302 == 1'd1))
		next_state = LEGUP_F_main_BB__303_393;
	else if ((main_299_302 == 1'd0))
		next_state = LEGUP_F_main_BB__305_398;
LEGUP_F_main_BB__303_393:
		next_state = LEGUP_F_main_BB__303_394;
LEGUP_F_main_BB__303_394:
		next_state = LEGUP_F_main_BB__303_395;
LEGUP_F_main_BB__303_395:
		next_state = LEGUP_F_main_BB__303_396;
LEGUP_F_main_BB__303_396:
		next_state = LEGUP_F_main_BB__303_397;
LEGUP_F_main_BB__303_397:
		next_state = LEGUP_F_main_BB__305_398;
LEGUP_F_main_BB__305_398:
		next_state = LEGUP_F_main_BB__305_399;
LEGUP_F_main_BB__305_399:
		next_state = LEGUP_F_main_BB__305_400;
LEGUP_F_main_BB__305_400:
	if ((main_305_308 == 1'd1))
		next_state = LEGUP_F_main_BB__309_401;
	else if ((main_305_308 == 1'd0))
		next_state = LEGUP_F_main_BB__311_406;
LEGUP_F_main_BB__309_401:
		next_state = LEGUP_F_main_BB__309_402;
LEGUP_F_main_BB__309_402:
		next_state = LEGUP_F_main_BB__309_403;
LEGUP_F_main_BB__309_403:
		next_state = LEGUP_F_main_BB__309_404;
LEGUP_F_main_BB__309_404:
		next_state = LEGUP_F_main_BB__309_405;
LEGUP_F_main_BB__309_405:
		next_state = LEGUP_F_main_BB__311_406;
LEGUP_F_main_BB__311_406:
		next_state = LEGUP_F_main_BB__311_407;
LEGUP_F_main_BB__311_407:
		next_state = LEGUP_F_main_BB__311_408;
LEGUP_F_main_BB__311_408:
	if ((main_311_314 == 1'd1))
		next_state = LEGUP_F_main_BB__315_409;
	else if ((main_311_314 == 1'd0))
		next_state = LEGUP_F_main_BB__317_414;
LEGUP_F_main_BB__315_409:
		next_state = LEGUP_F_main_BB__315_410;
LEGUP_F_main_BB__315_410:
		next_state = LEGUP_F_main_BB__315_411;
LEGUP_F_main_BB__315_411:
		next_state = LEGUP_F_main_BB__315_412;
LEGUP_F_main_BB__315_412:
		next_state = LEGUP_F_main_BB__315_413;
LEGUP_F_main_BB__315_413:
		next_state = LEGUP_F_main_BB__317_414;
LEGUP_F_main_BB__317_414:
		next_state = LEGUP_F_main_BB__317_415;
LEGUP_F_main_BB__317_415:
		next_state = LEGUP_F_main_BB__317_416;
LEGUP_F_main_BB__317_416:
	if ((main_317_320 == 1'd1))
		next_state = LEGUP_F_main_BB__321_417;
	else if ((main_317_320 == 1'd0))
		next_state = LEGUP_F_main_BB__323_422;
LEGUP_F_main_BB__31_12:
		next_state = LEGUP_F_main_BB__31_13;
LEGUP_F_main_BB__31_13:
		next_state = LEGUP_F_main_BB__31_14;
LEGUP_F_main_BB__31_14:
		next_state = LEGUP_F_main_BB__31_15;
LEGUP_F_main_BB__31_15:
		next_state = LEGUP_F_main_BB__31_16;
LEGUP_F_main_BB__31_16:
	if ((main_31_45 == 1'd1))
		next_state = LEGUP_F_main_BB__46_17;
	else if ((main_31_45 == 1'd0))
		next_state = LEGUP_F_main_BB__48_22;
LEGUP_F_main_BB__321_417:
		next_state = LEGUP_F_main_BB__321_418;
LEGUP_F_main_BB__321_418:
		next_state = LEGUP_F_main_BB__321_419;
LEGUP_F_main_BB__321_419:
		next_state = LEGUP_F_main_BB__321_420;
LEGUP_F_main_BB__321_420:
		next_state = LEGUP_F_main_BB__321_421;
LEGUP_F_main_BB__321_421:
		next_state = LEGUP_F_main_BB__323_422;
LEGUP_F_main_BB__323_422:
		next_state = LEGUP_F_main_BB__323_423;
LEGUP_F_main_BB__323_423:
		next_state = LEGUP_F_main_BB__323_424;
LEGUP_F_main_BB__323_424:
	if ((main_323_326 == 1'd1))
		next_state = LEGUP_F_main_BB__327_425;
	else if ((main_323_326 == 1'd0))
		next_state = LEGUP_F_main_BB__329_430;
LEGUP_F_main_BB__327_425:
		next_state = LEGUP_F_main_BB__327_426;
LEGUP_F_main_BB__327_426:
		next_state = LEGUP_F_main_BB__327_427;
LEGUP_F_main_BB__327_427:
		next_state = LEGUP_F_main_BB__327_428;
LEGUP_F_main_BB__327_428:
		next_state = LEGUP_F_main_BB__327_429;
LEGUP_F_main_BB__327_429:
		next_state = LEGUP_F_main_BB__329_430;
LEGUP_F_main_BB__329_430:
		next_state = LEGUP_F_main_BB__329_431;
LEGUP_F_main_BB__329_431:
		next_state = LEGUP_F_main_BB__329_432;
LEGUP_F_main_BB__329_432:
	if ((main_329_332 == 1'd1))
		next_state = LEGUP_F_main_BB__333_433;
	else if ((main_329_332 == 1'd0))
		next_state = LEGUP_F_main_BB__335_438;
LEGUP_F_main_BB__333_433:
		next_state = LEGUP_F_main_BB__333_434;
LEGUP_F_main_BB__333_434:
		next_state = LEGUP_F_main_BB__333_435;
LEGUP_F_main_BB__333_435:
		next_state = LEGUP_F_main_BB__333_436;
LEGUP_F_main_BB__333_436:
		next_state = LEGUP_F_main_BB__333_437;
LEGUP_F_main_BB__333_437:
		next_state = LEGUP_F_main_BB__335_438;
LEGUP_F_main_BB__335_438:
		next_state = LEGUP_F_main_BB__335_439;
LEGUP_F_main_BB__335_439:
		next_state = LEGUP_F_main_BB__335_440;
LEGUP_F_main_BB__335_440:
	if ((main_335_338 == 1'd1))
		next_state = LEGUP_F_main_BB__339_441;
	else if ((main_335_338 == 1'd0))
		next_state = LEGUP_F_main_BB__341_446;
LEGUP_F_main_BB__339_441:
		next_state = LEGUP_F_main_BB__339_442;
LEGUP_F_main_BB__339_442:
		next_state = LEGUP_F_main_BB__339_443;
LEGUP_F_main_BB__339_443:
		next_state = LEGUP_F_main_BB__339_444;
LEGUP_F_main_BB__339_444:
		next_state = LEGUP_F_main_BB__339_445;
LEGUP_F_main_BB__339_445:
		next_state = LEGUP_F_main_BB__341_446;
LEGUP_F_main_BB__341_446:
		next_state = LEGUP_F_main_BB__341_447;
LEGUP_F_main_BB__341_447:
		next_state = LEGUP_F_main_BB__341_448;
LEGUP_F_main_BB__341_448:
	if ((main_341_344 == 1'd1))
		next_state = LEGUP_F_main_BB__345_449;
	else if ((main_341_344 == 1'd0))
		next_state = LEGUP_F_main_BB__347_454;
LEGUP_F_main_BB__345_449:
		next_state = LEGUP_F_main_BB__345_450;
LEGUP_F_main_BB__345_450:
		next_state = LEGUP_F_main_BB__345_451;
LEGUP_F_main_BB__345_451:
		next_state = LEGUP_F_main_BB__345_452;
LEGUP_F_main_BB__345_452:
		next_state = LEGUP_F_main_BB__345_453;
LEGUP_F_main_BB__345_453:
		next_state = LEGUP_F_main_BB__347_454;
LEGUP_F_main_BB__347_454:
	if ((main_347_348 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge62iloopexit_455;
	else if ((main_347_348 == 1'd0))
		next_state = LEGUP_F_main_BB__282_380;
LEGUP_F_main_BB__356_490:
		next_state = LEGUP_F_main_BB__356_491;
LEGUP_F_main_BB__356_491:
		next_state = LEGUP_F_main_BB__356_492;
LEGUP_F_main_BB__356_492:
		next_state = LEGUP_F_main_BB__356_493;
LEGUP_F_main_BB__356_493:
	if ((main_356_361 == 1'd1))
		next_state = LEGUP_F_main_BB__362_494;
	else if ((main_356_361 == 1'd0))
		next_state = LEGUP_F_main_BB__364_499;
LEGUP_F_main_BB__362_494:
		next_state = LEGUP_F_main_BB__362_495;
LEGUP_F_main_BB__362_495:
		next_state = LEGUP_F_main_BB__362_496;
LEGUP_F_main_BB__362_496:
		next_state = LEGUP_F_main_BB__362_497;
LEGUP_F_main_BB__362_497:
		next_state = LEGUP_F_main_BB__362_498;
LEGUP_F_main_BB__362_498:
		next_state = LEGUP_F_main_BB__364_499;
LEGUP_F_main_BB__364_499:
	if ((main_364_exitcond65 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge68iloopexit_500;
	else if ((main_364_exitcond65 == 1'd0))
		next_state = LEGUP_F_main_BB__356_490;
LEGUP_F_main_BB__366_503:
		next_state = LEGUP_F_main_BB__366_504;
LEGUP_F_main_BB__366_504:
		next_state = LEGUP_F_main_BB__366_505;
LEGUP_F_main_BB__366_505:
		next_state = LEGUP_F_main_BB__366_506;
LEGUP_F_main_BB__366_506:
		next_state = LEGUP_F_main_BB__366_507;
LEGUP_F_main_BB__366_507:
	if ((main_366_380 == 1'd1))
		next_state = LEGUP_F_main_BB__381_508;
	else if ((main_366_380 == 1'd0))
		next_state = LEGUP_F_main_BB__383_513;
LEGUP_F_main_BB__381_508:
		next_state = LEGUP_F_main_BB__381_509;
LEGUP_F_main_BB__381_509:
		next_state = LEGUP_F_main_BB__381_510;
LEGUP_F_main_BB__381_510:
		next_state = LEGUP_F_main_BB__381_511;
LEGUP_F_main_BB__381_511:
		next_state = LEGUP_F_main_BB__381_512;
LEGUP_F_main_BB__381_512:
		next_state = LEGUP_F_main_BB__383_513;
LEGUP_F_main_BB__383_513:
		next_state = LEGUP_F_main_BB__383_514;
LEGUP_F_main_BB__383_514:
		next_state = LEGUP_F_main_BB__383_515;
LEGUP_F_main_BB__383_515:
	if ((main_383_386 == 1'd1))
		next_state = LEGUP_F_main_BB__387_516;
	else if ((main_383_386 == 1'd0))
		next_state = LEGUP_F_main_BB__389_521;
LEGUP_F_main_BB__387_516:
		next_state = LEGUP_F_main_BB__387_517;
LEGUP_F_main_BB__387_517:
		next_state = LEGUP_F_main_BB__387_518;
LEGUP_F_main_BB__387_518:
		next_state = LEGUP_F_main_BB__387_519;
LEGUP_F_main_BB__387_519:
		next_state = LEGUP_F_main_BB__387_520;
LEGUP_F_main_BB__387_520:
		next_state = LEGUP_F_main_BB__389_521;
LEGUP_F_main_BB__389_521:
		next_state = LEGUP_F_main_BB__389_522;
LEGUP_F_main_BB__389_522:
		next_state = LEGUP_F_main_BB__389_523;
LEGUP_F_main_BB__389_523:
	if ((main_389_392 == 1'd1))
		next_state = LEGUP_F_main_BB__393_524;
	else if ((main_389_392 == 1'd0))
		next_state = LEGUP_F_main_BB__395_529;
LEGUP_F_main_BB__393_524:
		next_state = LEGUP_F_main_BB__393_525;
LEGUP_F_main_BB__393_525:
		next_state = LEGUP_F_main_BB__393_526;
LEGUP_F_main_BB__393_526:
		next_state = LEGUP_F_main_BB__393_527;
LEGUP_F_main_BB__393_527:
		next_state = LEGUP_F_main_BB__393_528;
LEGUP_F_main_BB__393_528:
		next_state = LEGUP_F_main_BB__395_529;
LEGUP_F_main_BB__395_529:
		next_state = LEGUP_F_main_BB__395_530;
LEGUP_F_main_BB__395_530:
		next_state = LEGUP_F_main_BB__395_531;
LEGUP_F_main_BB__395_531:
	if ((main_395_398 == 1'd1))
		next_state = LEGUP_F_main_BB__399_532;
	else if ((main_395_398 == 1'd0))
		next_state = LEGUP_F_main_BB__401_537;
LEGUP_F_main_BB__399_532:
		next_state = LEGUP_F_main_BB__399_533;
LEGUP_F_main_BB__399_533:
		next_state = LEGUP_F_main_BB__399_534;
LEGUP_F_main_BB__399_534:
		next_state = LEGUP_F_main_BB__399_535;
LEGUP_F_main_BB__399_535:
		next_state = LEGUP_F_main_BB__399_536;
LEGUP_F_main_BB__399_536:
		next_state = LEGUP_F_main_BB__401_537;
LEGUP_F_main_BB__401_537:
		next_state = LEGUP_F_main_BB__401_538;
LEGUP_F_main_BB__401_538:
		next_state = LEGUP_F_main_BB__401_539;
LEGUP_F_main_BB__401_539:
	if ((main_401_404 == 1'd1))
		next_state = LEGUP_F_main_BB__405_540;
	else if ((main_401_404 == 1'd0))
		next_state = LEGUP_F_main_BB__407_545;
LEGUP_F_main_BB__405_540:
		next_state = LEGUP_F_main_BB__405_541;
LEGUP_F_main_BB__405_541:
		next_state = LEGUP_F_main_BB__405_542;
LEGUP_F_main_BB__405_542:
		next_state = LEGUP_F_main_BB__405_543;
LEGUP_F_main_BB__405_543:
		next_state = LEGUP_F_main_BB__405_544;
LEGUP_F_main_BB__405_544:
		next_state = LEGUP_F_main_BB__407_545;
LEGUP_F_main_BB__407_545:
		next_state = LEGUP_F_main_BB__407_546;
LEGUP_F_main_BB__407_546:
		next_state = LEGUP_F_main_BB__407_547;
LEGUP_F_main_BB__407_547:
	if ((main_407_410 == 1'd1))
		next_state = LEGUP_F_main_BB__411_548;
	else if ((main_407_410 == 1'd0))
		next_state = LEGUP_F_main_BB__413_553;
LEGUP_F_main_BB__411_548:
		next_state = LEGUP_F_main_BB__411_549;
LEGUP_F_main_BB__411_549:
		next_state = LEGUP_F_main_BB__411_550;
LEGUP_F_main_BB__411_550:
		next_state = LEGUP_F_main_BB__411_551;
LEGUP_F_main_BB__411_551:
		next_state = LEGUP_F_main_BB__411_552;
LEGUP_F_main_BB__411_552:
		next_state = LEGUP_F_main_BB__413_553;
LEGUP_F_main_BB__413_553:
		next_state = LEGUP_F_main_BB__413_554;
LEGUP_F_main_BB__413_554:
		next_state = LEGUP_F_main_BB__413_555;
LEGUP_F_main_BB__413_555:
	if ((main_413_416 == 1'd1))
		next_state = LEGUP_F_main_BB__417_556;
	else if ((main_413_416 == 1'd0))
		next_state = LEGUP_F_main_BB__419_561;
LEGUP_F_main_BB__417_556:
		next_state = LEGUP_F_main_BB__417_557;
LEGUP_F_main_BB__417_557:
		next_state = LEGUP_F_main_BB__417_558;
LEGUP_F_main_BB__417_558:
		next_state = LEGUP_F_main_BB__417_559;
LEGUP_F_main_BB__417_559:
		next_state = LEGUP_F_main_BB__417_560;
LEGUP_F_main_BB__417_560:
		next_state = LEGUP_F_main_BB__419_561;
LEGUP_F_main_BB__419_561:
		next_state = LEGUP_F_main_BB__419_562;
LEGUP_F_main_BB__419_562:
		next_state = LEGUP_F_main_BB__419_563;
LEGUP_F_main_BB__419_563:
	if ((main_419_422 == 1'd1))
		next_state = LEGUP_F_main_BB__423_564;
	else if ((main_419_422 == 1'd0))
		next_state = LEGUP_F_main_BB__425_569;
LEGUP_F_main_BB__423_564:
		next_state = LEGUP_F_main_BB__423_565;
LEGUP_F_main_BB__423_565:
		next_state = LEGUP_F_main_BB__423_566;
LEGUP_F_main_BB__423_566:
		next_state = LEGUP_F_main_BB__423_567;
LEGUP_F_main_BB__423_567:
		next_state = LEGUP_F_main_BB__423_568;
LEGUP_F_main_BB__423_568:
		next_state = LEGUP_F_main_BB__425_569;
LEGUP_F_main_BB__425_569:
		next_state = LEGUP_F_main_BB__425_570;
LEGUP_F_main_BB__425_570:
		next_state = LEGUP_F_main_BB__425_571;
LEGUP_F_main_BB__425_571:
	if ((main_425_428 == 1'd1))
		next_state = LEGUP_F_main_BB__429_572;
	else if ((main_425_428 == 1'd0))
		next_state = LEGUP_F_main_BB__431_577;
LEGUP_F_main_BB__429_572:
		next_state = LEGUP_F_main_BB__429_573;
LEGUP_F_main_BB__429_573:
		next_state = LEGUP_F_main_BB__429_574;
LEGUP_F_main_BB__429_574:
		next_state = LEGUP_F_main_BB__429_575;
LEGUP_F_main_BB__429_575:
		next_state = LEGUP_F_main_BB__429_576;
LEGUP_F_main_BB__429_576:
		next_state = LEGUP_F_main_BB__431_577;
LEGUP_F_main_BB__431_577:
	if ((main_431_432 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge73iloopexit_578;
	else if ((main_431_432 == 1'd0))
		next_state = LEGUP_F_main_BB__366_503;
LEGUP_F_main_BB__440_613:
		next_state = LEGUP_F_main_BB__440_614;
LEGUP_F_main_BB__440_614:
		next_state = LEGUP_F_main_BB__440_615;
LEGUP_F_main_BB__440_615:
		next_state = LEGUP_F_main_BB__440_616;
LEGUP_F_main_BB__440_616:
	if ((main_440_445 == 1'd1))
		next_state = LEGUP_F_main_BB__446_617;
	else if ((main_440_445 == 1'd0))
		next_state = LEGUP_F_main_BB__448_622;
LEGUP_F_main_BB__446_617:
		next_state = LEGUP_F_main_BB__446_618;
LEGUP_F_main_BB__446_618:
		next_state = LEGUP_F_main_BB__446_619;
LEGUP_F_main_BB__446_619:
		next_state = LEGUP_F_main_BB__446_620;
LEGUP_F_main_BB__446_620:
		next_state = LEGUP_F_main_BB__446_621;
LEGUP_F_main_BB__446_621:
		next_state = LEGUP_F_main_BB__448_622;
LEGUP_F_main_BB__448_622:
	if ((main_448_exitcond81 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge79iloopexit_623;
	else if ((main_448_exitcond81 == 1'd0))
		next_state = LEGUP_F_main_BB__440_613;
LEGUP_F_main_BB__450_626:
		next_state = LEGUP_F_main_BB__450_627;
LEGUP_F_main_BB__450_627:
		next_state = LEGUP_F_main_BB__450_628;
LEGUP_F_main_BB__450_628:
		next_state = LEGUP_F_main_BB__450_629;
LEGUP_F_main_BB__450_629:
		next_state = LEGUP_F_main_BB__450_630;
LEGUP_F_main_BB__450_630:
	if ((main_450_464 == 1'd1))
		next_state = LEGUP_F_main_BB__465_631;
	else if ((main_450_464 == 1'd0))
		next_state = LEGUP_F_main_BB__467_636;
LEGUP_F_main_BB__465_631:
		next_state = LEGUP_F_main_BB__465_632;
LEGUP_F_main_BB__465_632:
		next_state = LEGUP_F_main_BB__465_633;
LEGUP_F_main_BB__465_633:
		next_state = LEGUP_F_main_BB__465_634;
LEGUP_F_main_BB__465_634:
		next_state = LEGUP_F_main_BB__465_635;
LEGUP_F_main_BB__465_635:
		next_state = LEGUP_F_main_BB__467_636;
LEGUP_F_main_BB__467_636:
		next_state = LEGUP_F_main_BB__467_637;
LEGUP_F_main_BB__467_637:
		next_state = LEGUP_F_main_BB__467_638;
LEGUP_F_main_BB__467_638:
	if ((main_467_470 == 1'd1))
		next_state = LEGUP_F_main_BB__471_639;
	else if ((main_467_470 == 1'd0))
		next_state = LEGUP_F_main_BB__473_644;
LEGUP_F_main_BB__46_17:
		next_state = LEGUP_F_main_BB__46_18;
LEGUP_F_main_BB__46_18:
		next_state = LEGUP_F_main_BB__46_19;
LEGUP_F_main_BB__46_19:
		next_state = LEGUP_F_main_BB__46_20;
LEGUP_F_main_BB__46_20:
		next_state = LEGUP_F_main_BB__46_21;
LEGUP_F_main_BB__46_21:
		next_state = LEGUP_F_main_BB__48_22;
LEGUP_F_main_BB__471_639:
		next_state = LEGUP_F_main_BB__471_640;
LEGUP_F_main_BB__471_640:
		next_state = LEGUP_F_main_BB__471_641;
LEGUP_F_main_BB__471_641:
		next_state = LEGUP_F_main_BB__471_642;
LEGUP_F_main_BB__471_642:
		next_state = LEGUP_F_main_BB__471_643;
LEGUP_F_main_BB__471_643:
		next_state = LEGUP_F_main_BB__473_644;
LEGUP_F_main_BB__473_644:
		next_state = LEGUP_F_main_BB__473_645;
LEGUP_F_main_BB__473_645:
		next_state = LEGUP_F_main_BB__473_646;
LEGUP_F_main_BB__473_646:
	if ((main_473_476 == 1'd1))
		next_state = LEGUP_F_main_BB__477_647;
	else if ((main_473_476 == 1'd0))
		next_state = LEGUP_F_main_BB__479_652;
LEGUP_F_main_BB__477_647:
		next_state = LEGUP_F_main_BB__477_648;
LEGUP_F_main_BB__477_648:
		next_state = LEGUP_F_main_BB__477_649;
LEGUP_F_main_BB__477_649:
		next_state = LEGUP_F_main_BB__477_650;
LEGUP_F_main_BB__477_650:
		next_state = LEGUP_F_main_BB__477_651;
LEGUP_F_main_BB__477_651:
		next_state = LEGUP_F_main_BB__479_652;
LEGUP_F_main_BB__479_652:
		next_state = LEGUP_F_main_BB__479_653;
LEGUP_F_main_BB__479_653:
		next_state = LEGUP_F_main_BB__479_654;
LEGUP_F_main_BB__479_654:
	if ((main_479_482 == 1'd1))
		next_state = LEGUP_F_main_BB__483_655;
	else if ((main_479_482 == 1'd0))
		next_state = LEGUP_F_main_BB__485_660;
LEGUP_F_main_BB__483_655:
		next_state = LEGUP_F_main_BB__483_656;
LEGUP_F_main_BB__483_656:
		next_state = LEGUP_F_main_BB__483_657;
LEGUP_F_main_BB__483_657:
		next_state = LEGUP_F_main_BB__483_658;
LEGUP_F_main_BB__483_658:
		next_state = LEGUP_F_main_BB__483_659;
LEGUP_F_main_BB__483_659:
		next_state = LEGUP_F_main_BB__485_660;
LEGUP_F_main_BB__485_660:
		next_state = LEGUP_F_main_BB__485_661;
LEGUP_F_main_BB__485_661:
		next_state = LEGUP_F_main_BB__485_662;
LEGUP_F_main_BB__485_662:
	if ((main_485_488 == 1'd1))
		next_state = LEGUP_F_main_BB__489_663;
	else if ((main_485_488 == 1'd0))
		next_state = LEGUP_F_main_BB__491_668;
LEGUP_F_main_BB__489_663:
		next_state = LEGUP_F_main_BB__489_664;
LEGUP_F_main_BB__489_664:
		next_state = LEGUP_F_main_BB__489_665;
LEGUP_F_main_BB__489_665:
		next_state = LEGUP_F_main_BB__489_666;
LEGUP_F_main_BB__489_666:
		next_state = LEGUP_F_main_BB__489_667;
LEGUP_F_main_BB__489_667:
		next_state = LEGUP_F_main_BB__491_668;
LEGUP_F_main_BB__48_22:
		next_state = LEGUP_F_main_BB__48_23;
LEGUP_F_main_BB__48_23:
		next_state = LEGUP_F_main_BB__48_24;
LEGUP_F_main_BB__48_24:
	if ((main_48_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_25;
	else if ((main_48_51 == 1'd0))
		next_state = LEGUP_F_main_BB__54_30;
LEGUP_F_main_BB__491_668:
		next_state = LEGUP_F_main_BB__491_669;
LEGUP_F_main_BB__491_669:
		next_state = LEGUP_F_main_BB__491_670;
LEGUP_F_main_BB__491_670:
	if ((main_491_494 == 1'd1))
		next_state = LEGUP_F_main_BB__495_671;
	else if ((main_491_494 == 1'd0))
		next_state = LEGUP_F_main_BB__497_676;
LEGUP_F_main_BB__495_671:
		next_state = LEGUP_F_main_BB__495_672;
LEGUP_F_main_BB__495_672:
		next_state = LEGUP_F_main_BB__495_673;
LEGUP_F_main_BB__495_673:
		next_state = LEGUP_F_main_BB__495_674;
LEGUP_F_main_BB__495_674:
		next_state = LEGUP_F_main_BB__495_675;
LEGUP_F_main_BB__495_675:
		next_state = LEGUP_F_main_BB__497_676;
LEGUP_F_main_BB__497_676:
		next_state = LEGUP_F_main_BB__497_677;
LEGUP_F_main_BB__497_677:
		next_state = LEGUP_F_main_BB__497_678;
LEGUP_F_main_BB__497_678:
	if ((main_497_500 == 1'd1))
		next_state = LEGUP_F_main_BB__501_679;
	else if ((main_497_500 == 1'd0))
		next_state = LEGUP_F_main_BB__503_684;
LEGUP_F_main_BB__501_679:
		next_state = LEGUP_F_main_BB__501_680;
LEGUP_F_main_BB__501_680:
		next_state = LEGUP_F_main_BB__501_681;
LEGUP_F_main_BB__501_681:
		next_state = LEGUP_F_main_BB__501_682;
LEGUP_F_main_BB__501_682:
		next_state = LEGUP_F_main_BB__501_683;
LEGUP_F_main_BB__501_683:
		next_state = LEGUP_F_main_BB__503_684;
LEGUP_F_main_BB__503_684:
		next_state = LEGUP_F_main_BB__503_685;
LEGUP_F_main_BB__503_685:
		next_state = LEGUP_F_main_BB__503_686;
LEGUP_F_main_BB__503_686:
	if ((main_503_506 == 1'd1))
		next_state = LEGUP_F_main_BB__507_687;
	else if ((main_503_506 == 1'd0))
		next_state = LEGUP_F_main_BB__509_692;
LEGUP_F_main_BB__507_687:
		next_state = LEGUP_F_main_BB__507_688;
LEGUP_F_main_BB__507_688:
		next_state = LEGUP_F_main_BB__507_689;
LEGUP_F_main_BB__507_689:
		next_state = LEGUP_F_main_BB__507_690;
LEGUP_F_main_BB__507_690:
		next_state = LEGUP_F_main_BB__507_691;
LEGUP_F_main_BB__507_691:
		next_state = LEGUP_F_main_BB__509_692;
LEGUP_F_main_BB__509_692:
		next_state = LEGUP_F_main_BB__509_693;
LEGUP_F_main_BB__509_693:
		next_state = LEGUP_F_main_BB__509_694;
LEGUP_F_main_BB__509_694:
	if ((main_509_512 == 1'd1))
		next_state = LEGUP_F_main_BB__513_695;
	else if ((main_509_512 == 1'd0))
		next_state = LEGUP_F_main_BB__515_700;
LEGUP_F_main_BB__513_695:
		next_state = LEGUP_F_main_BB__513_696;
LEGUP_F_main_BB__513_696:
		next_state = LEGUP_F_main_BB__513_697;
LEGUP_F_main_BB__513_697:
		next_state = LEGUP_F_main_BB__513_698;
LEGUP_F_main_BB__513_698:
		next_state = LEGUP_F_main_BB__513_699;
LEGUP_F_main_BB__513_699:
		next_state = LEGUP_F_main_BB__515_700;
LEGUP_F_main_BB__515_700:
	if ((main_515_516 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge84iloopexit_701;
	else if ((main_515_516 == 1'd0))
		next_state = LEGUP_F_main_BB__450_626;
LEGUP_F_main_BB__524_736:
		next_state = LEGUP_F_main_BB__524_737;
LEGUP_F_main_BB__524_737:
		next_state = LEGUP_F_main_BB__524_738;
LEGUP_F_main_BB__524_738:
		next_state = LEGUP_F_main_BB__524_739;
LEGUP_F_main_BB__524_739:
	if ((main_524_529 == 1'd1))
		next_state = LEGUP_F_main_BB__530_740;
	else if ((main_524_529 == 1'd0))
		next_state = LEGUP_F_main_BB__532_745;
LEGUP_F_main_BB__52_25:
		next_state = LEGUP_F_main_BB__52_26;
LEGUP_F_main_BB__52_26:
		next_state = LEGUP_F_main_BB__52_27;
LEGUP_F_main_BB__52_27:
		next_state = LEGUP_F_main_BB__52_28;
LEGUP_F_main_BB__52_28:
		next_state = LEGUP_F_main_BB__52_29;
LEGUP_F_main_BB__52_29:
		next_state = LEGUP_F_main_BB__54_30;
LEGUP_F_main_BB__530_740:
		next_state = LEGUP_F_main_BB__530_741;
LEGUP_F_main_BB__530_741:
		next_state = LEGUP_F_main_BB__530_742;
LEGUP_F_main_BB__530_742:
		next_state = LEGUP_F_main_BB__530_743;
LEGUP_F_main_BB__530_743:
		next_state = LEGUP_F_main_BB__530_744;
LEGUP_F_main_BB__530_744:
		next_state = LEGUP_F_main_BB__532_745;
LEGUP_F_main_BB__532_745:
	if ((main_532_exitcond97 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge90iloopexit_746;
	else if ((main_532_exitcond97 == 1'd0))
		next_state = LEGUP_F_main_BB__524_736;
LEGUP_F_main_BB__534_749:
		next_state = LEGUP_F_main_BB__534_750;
LEGUP_F_main_BB__534_750:
		next_state = LEGUP_F_main_BB__534_751;
LEGUP_F_main_BB__534_751:
		next_state = LEGUP_F_main_BB__534_752;
LEGUP_F_main_BB__534_752:
		next_state = LEGUP_F_main_BB__534_753;
LEGUP_F_main_BB__534_753:
	if ((main_534_548 == 1'd1))
		next_state = LEGUP_F_main_BB__549_754;
	else if ((main_534_548 == 1'd0))
		next_state = LEGUP_F_main_BB__551_759;
LEGUP_F_main_BB__549_754:
		next_state = LEGUP_F_main_BB__549_755;
LEGUP_F_main_BB__549_755:
		next_state = LEGUP_F_main_BB__549_756;
LEGUP_F_main_BB__549_756:
		next_state = LEGUP_F_main_BB__549_757;
LEGUP_F_main_BB__549_757:
		next_state = LEGUP_F_main_BB__549_758;
LEGUP_F_main_BB__549_758:
		next_state = LEGUP_F_main_BB__551_759;
LEGUP_F_main_BB__54_30:
		next_state = LEGUP_F_main_BB__54_31;
LEGUP_F_main_BB__54_31:
		next_state = LEGUP_F_main_BB__54_32;
LEGUP_F_main_BB__54_32:
	if ((main_54_57 == 1'd1))
		next_state = LEGUP_F_main_BB__58_33;
	else if ((main_54_57 == 1'd0))
		next_state = LEGUP_F_main_BB__60_38;
LEGUP_F_main_BB__551_759:
		next_state = LEGUP_F_main_BB__551_760;
LEGUP_F_main_BB__551_760:
		next_state = LEGUP_F_main_BB__551_761;
LEGUP_F_main_BB__551_761:
	if ((main_551_554 == 1'd1))
		next_state = LEGUP_F_main_BB__555_762;
	else if ((main_551_554 == 1'd0))
		next_state = LEGUP_F_main_BB__557_767;
LEGUP_F_main_BB__555_762:
		next_state = LEGUP_F_main_BB__555_763;
LEGUP_F_main_BB__555_763:
		next_state = LEGUP_F_main_BB__555_764;
LEGUP_F_main_BB__555_764:
		next_state = LEGUP_F_main_BB__555_765;
LEGUP_F_main_BB__555_765:
		next_state = LEGUP_F_main_BB__555_766;
LEGUP_F_main_BB__555_766:
		next_state = LEGUP_F_main_BB__557_767;
LEGUP_F_main_BB__557_767:
		next_state = LEGUP_F_main_BB__557_768;
LEGUP_F_main_BB__557_768:
		next_state = LEGUP_F_main_BB__557_769;
LEGUP_F_main_BB__557_769:
	if ((main_557_560 == 1'd1))
		next_state = LEGUP_F_main_BB__561_770;
	else if ((main_557_560 == 1'd0))
		next_state = LEGUP_F_main_BB__563_775;
LEGUP_F_main_BB__561_770:
		next_state = LEGUP_F_main_BB__561_771;
LEGUP_F_main_BB__561_771:
		next_state = LEGUP_F_main_BB__561_772;
LEGUP_F_main_BB__561_772:
		next_state = LEGUP_F_main_BB__561_773;
LEGUP_F_main_BB__561_773:
		next_state = LEGUP_F_main_BB__561_774;
LEGUP_F_main_BB__561_774:
		next_state = LEGUP_F_main_BB__563_775;
LEGUP_F_main_BB__563_775:
		next_state = LEGUP_F_main_BB__563_776;
LEGUP_F_main_BB__563_776:
		next_state = LEGUP_F_main_BB__563_777;
LEGUP_F_main_BB__563_777:
	if ((main_563_566 == 1'd1))
		next_state = LEGUP_F_main_BB__567_778;
	else if ((main_563_566 == 1'd0))
		next_state = LEGUP_F_main_BB__569_783;
LEGUP_F_main_BB__567_778:
		next_state = LEGUP_F_main_BB__567_779;
LEGUP_F_main_BB__567_779:
		next_state = LEGUP_F_main_BB__567_780;
LEGUP_F_main_BB__567_780:
		next_state = LEGUP_F_main_BB__567_781;
LEGUP_F_main_BB__567_781:
		next_state = LEGUP_F_main_BB__567_782;
LEGUP_F_main_BB__567_782:
		next_state = LEGUP_F_main_BB__569_783;
LEGUP_F_main_BB__569_783:
		next_state = LEGUP_F_main_BB__569_784;
LEGUP_F_main_BB__569_784:
		next_state = LEGUP_F_main_BB__569_785;
LEGUP_F_main_BB__569_785:
	if ((main_569_572 == 1'd1))
		next_state = LEGUP_F_main_BB__573_786;
	else if ((main_569_572 == 1'd0))
		next_state = LEGUP_F_main_BB__575_791;
LEGUP_F_main_BB__573_786:
		next_state = LEGUP_F_main_BB__573_787;
LEGUP_F_main_BB__573_787:
		next_state = LEGUP_F_main_BB__573_788;
LEGUP_F_main_BB__573_788:
		next_state = LEGUP_F_main_BB__573_789;
LEGUP_F_main_BB__573_789:
		next_state = LEGUP_F_main_BB__573_790;
LEGUP_F_main_BB__573_790:
		next_state = LEGUP_F_main_BB__575_791;
LEGUP_F_main_BB__575_791:
		next_state = LEGUP_F_main_BB__575_792;
LEGUP_F_main_BB__575_792:
		next_state = LEGUP_F_main_BB__575_793;
LEGUP_F_main_BB__575_793:
	if ((main_575_578 == 1'd1))
		next_state = LEGUP_F_main_BB__579_794;
	else if ((main_575_578 == 1'd0))
		next_state = LEGUP_F_main_BB__581_799;
LEGUP_F_main_BB__579_794:
		next_state = LEGUP_F_main_BB__579_795;
LEGUP_F_main_BB__579_795:
		next_state = LEGUP_F_main_BB__579_796;
LEGUP_F_main_BB__579_796:
		next_state = LEGUP_F_main_BB__579_797;
LEGUP_F_main_BB__579_797:
		next_state = LEGUP_F_main_BB__579_798;
LEGUP_F_main_BB__579_798:
		next_state = LEGUP_F_main_BB__581_799;
LEGUP_F_main_BB__581_799:
		next_state = LEGUP_F_main_BB__581_800;
LEGUP_F_main_BB__581_800:
		next_state = LEGUP_F_main_BB__581_801;
LEGUP_F_main_BB__581_801:
	if ((main_581_584 == 1'd1))
		next_state = LEGUP_F_main_BB__585_802;
	else if ((main_581_584 == 1'd0))
		next_state = LEGUP_F_main_BB__587_807;
LEGUP_F_main_BB__585_802:
		next_state = LEGUP_F_main_BB__585_803;
LEGUP_F_main_BB__585_803:
		next_state = LEGUP_F_main_BB__585_804;
LEGUP_F_main_BB__585_804:
		next_state = LEGUP_F_main_BB__585_805;
LEGUP_F_main_BB__585_805:
		next_state = LEGUP_F_main_BB__585_806;
LEGUP_F_main_BB__585_806:
		next_state = LEGUP_F_main_BB__587_807;
LEGUP_F_main_BB__587_807:
		next_state = LEGUP_F_main_BB__587_808;
LEGUP_F_main_BB__587_808:
		next_state = LEGUP_F_main_BB__587_809;
LEGUP_F_main_BB__587_809:
	if ((main_587_590 == 1'd1))
		next_state = LEGUP_F_main_BB__591_810;
	else if ((main_587_590 == 1'd0))
		next_state = LEGUP_F_main_BB__593_815;
LEGUP_F_main_BB__58_33:
		next_state = LEGUP_F_main_BB__58_34;
LEGUP_F_main_BB__58_34:
		next_state = LEGUP_F_main_BB__58_35;
LEGUP_F_main_BB__58_35:
		next_state = LEGUP_F_main_BB__58_36;
LEGUP_F_main_BB__58_36:
		next_state = LEGUP_F_main_BB__58_37;
LEGUP_F_main_BB__58_37:
		next_state = LEGUP_F_main_BB__60_38;
LEGUP_F_main_BB__591_810:
		next_state = LEGUP_F_main_BB__591_811;
LEGUP_F_main_BB__591_811:
		next_state = LEGUP_F_main_BB__591_812;
LEGUP_F_main_BB__591_812:
		next_state = LEGUP_F_main_BB__591_813;
LEGUP_F_main_BB__591_813:
		next_state = LEGUP_F_main_BB__591_814;
LEGUP_F_main_BB__591_814:
		next_state = LEGUP_F_main_BB__593_815;
LEGUP_F_main_BB__593_815:
		next_state = LEGUP_F_main_BB__593_816;
LEGUP_F_main_BB__593_816:
		next_state = LEGUP_F_main_BB__593_817;
LEGUP_F_main_BB__593_817:
	if ((main_593_596 == 1'd1))
		next_state = LEGUP_F_main_BB__597_818;
	else if ((main_593_596 == 1'd0))
		next_state = LEGUP_F_main_BB__599_823;
LEGUP_F_main_BB__597_818:
		next_state = LEGUP_F_main_BB__597_819;
LEGUP_F_main_BB__597_819:
		next_state = LEGUP_F_main_BB__597_820;
LEGUP_F_main_BB__597_820:
		next_state = LEGUP_F_main_BB__597_821;
LEGUP_F_main_BB__597_821:
		next_state = LEGUP_F_main_BB__597_822;
LEGUP_F_main_BB__597_822:
		next_state = LEGUP_F_main_BB__599_823;
LEGUP_F_main_BB__599_823:
	if ((main_599_600 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge95iloopexit_824;
	else if ((main_599_600 == 1'd0))
		next_state = LEGUP_F_main_BB__534_749;
LEGUP_F_main_BB__608_859:
		next_state = LEGUP_F_main_BB__608_860;
LEGUP_F_main_BB__608_860:
		next_state = LEGUP_F_main_BB__608_861;
LEGUP_F_main_BB__608_861:
		next_state = LEGUP_F_main_BB__608_862;
LEGUP_F_main_BB__608_862:
	if ((main_608_613 == 1'd1))
		next_state = LEGUP_F_main_BB__614_863;
	else if ((main_608_613 == 1'd0))
		next_state = LEGUP_F_main_BB__616_868;
LEGUP_F_main_BB__60_38:
		next_state = LEGUP_F_main_BB__60_39;
LEGUP_F_main_BB__60_39:
		next_state = LEGUP_F_main_BB__60_40;
LEGUP_F_main_BB__60_40:
	if ((main_60_63 == 1'd1))
		next_state = LEGUP_F_main_BB__64_41;
	else if ((main_60_63 == 1'd0))
		next_state = LEGUP_F_main_BB__66_46;
LEGUP_F_main_BB__614_863:
		next_state = LEGUP_F_main_BB__614_864;
LEGUP_F_main_BB__614_864:
		next_state = LEGUP_F_main_BB__614_865;
LEGUP_F_main_BB__614_865:
		next_state = LEGUP_F_main_BB__614_866;
LEGUP_F_main_BB__614_866:
		next_state = LEGUP_F_main_BB__614_867;
LEGUP_F_main_BB__614_867:
		next_state = LEGUP_F_main_BB__616_868;
LEGUP_F_main_BB__616_868:
	if ((main_616_exitcond113 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge101iloopexit_869;
	else if ((main_616_exitcond113 == 1'd0))
		next_state = LEGUP_F_main_BB__608_859;
LEGUP_F_main_BB__618_872:
		next_state = LEGUP_F_main_BB__618_873;
LEGUP_F_main_BB__618_873:
		next_state = LEGUP_F_main_BB__618_874;
LEGUP_F_main_BB__618_874:
		next_state = LEGUP_F_main_BB__618_875;
LEGUP_F_main_BB__618_875:
		next_state = LEGUP_F_main_BB__618_876;
LEGUP_F_main_BB__618_876:
	if ((main_618_632 == 1'd1))
		next_state = LEGUP_F_main_BB__633_877;
	else if ((main_618_632 == 1'd0))
		next_state = LEGUP_F_main_BB__635_882;
LEGUP_F_main_BB__633_877:
		next_state = LEGUP_F_main_BB__633_878;
LEGUP_F_main_BB__633_878:
		next_state = LEGUP_F_main_BB__633_879;
LEGUP_F_main_BB__633_879:
		next_state = LEGUP_F_main_BB__633_880;
LEGUP_F_main_BB__633_880:
		next_state = LEGUP_F_main_BB__633_881;
LEGUP_F_main_BB__633_881:
		next_state = LEGUP_F_main_BB__635_882;
LEGUP_F_main_BB__635_882:
		next_state = LEGUP_F_main_BB__635_883;
LEGUP_F_main_BB__635_883:
		next_state = LEGUP_F_main_BB__635_884;
LEGUP_F_main_BB__635_884:
	if ((main_635_638 == 1'd1))
		next_state = LEGUP_F_main_BB__639_885;
	else if ((main_635_638 == 1'd0))
		next_state = LEGUP_F_main_BB__641_890;
LEGUP_F_main_BB__639_885:
		next_state = LEGUP_F_main_BB__639_886;
LEGUP_F_main_BB__639_886:
		next_state = LEGUP_F_main_BB__639_887;
LEGUP_F_main_BB__639_887:
		next_state = LEGUP_F_main_BB__639_888;
LEGUP_F_main_BB__639_888:
		next_state = LEGUP_F_main_BB__639_889;
LEGUP_F_main_BB__639_889:
		next_state = LEGUP_F_main_BB__641_890;
LEGUP_F_main_BB__641_890:
		next_state = LEGUP_F_main_BB__641_891;
LEGUP_F_main_BB__641_891:
		next_state = LEGUP_F_main_BB__641_892;
LEGUP_F_main_BB__641_892:
	if ((main_641_644 == 1'd1))
		next_state = LEGUP_F_main_BB__645_893;
	else if ((main_641_644 == 1'd0))
		next_state = LEGUP_F_main_BB__647_898;
LEGUP_F_main_BB__645_893:
		next_state = LEGUP_F_main_BB__645_894;
LEGUP_F_main_BB__645_894:
		next_state = LEGUP_F_main_BB__645_895;
LEGUP_F_main_BB__645_895:
		next_state = LEGUP_F_main_BB__645_896;
LEGUP_F_main_BB__645_896:
		next_state = LEGUP_F_main_BB__645_897;
LEGUP_F_main_BB__645_897:
		next_state = LEGUP_F_main_BB__647_898;
LEGUP_F_main_BB__647_898:
		next_state = LEGUP_F_main_BB__647_899;
LEGUP_F_main_BB__647_899:
		next_state = LEGUP_F_main_BB__647_900;
LEGUP_F_main_BB__647_900:
	if ((main_647_650 == 1'd1))
		next_state = LEGUP_F_main_BB__651_901;
	else if ((main_647_650 == 1'd0))
		next_state = LEGUP_F_main_BB__653_906;
LEGUP_F_main_BB__64_41:
		next_state = LEGUP_F_main_BB__64_42;
LEGUP_F_main_BB__64_42:
		next_state = LEGUP_F_main_BB__64_43;
LEGUP_F_main_BB__64_43:
		next_state = LEGUP_F_main_BB__64_44;
LEGUP_F_main_BB__64_44:
		next_state = LEGUP_F_main_BB__64_45;
LEGUP_F_main_BB__64_45:
		next_state = LEGUP_F_main_BB__66_46;
LEGUP_F_main_BB__651_901:
		next_state = LEGUP_F_main_BB__651_902;
LEGUP_F_main_BB__651_902:
		next_state = LEGUP_F_main_BB__651_903;
LEGUP_F_main_BB__651_903:
		next_state = LEGUP_F_main_BB__651_904;
LEGUP_F_main_BB__651_904:
		next_state = LEGUP_F_main_BB__651_905;
LEGUP_F_main_BB__651_905:
		next_state = LEGUP_F_main_BB__653_906;
LEGUP_F_main_BB__653_906:
		next_state = LEGUP_F_main_BB__653_907;
LEGUP_F_main_BB__653_907:
		next_state = LEGUP_F_main_BB__653_908;
LEGUP_F_main_BB__653_908:
	if ((main_653_656 == 1'd1))
		next_state = LEGUP_F_main_BB__657_909;
	else if ((main_653_656 == 1'd0))
		next_state = LEGUP_F_main_BB__659_914;
LEGUP_F_main_BB__657_909:
		next_state = LEGUP_F_main_BB__657_910;
LEGUP_F_main_BB__657_910:
		next_state = LEGUP_F_main_BB__657_911;
LEGUP_F_main_BB__657_911:
		next_state = LEGUP_F_main_BB__657_912;
LEGUP_F_main_BB__657_912:
		next_state = LEGUP_F_main_BB__657_913;
LEGUP_F_main_BB__657_913:
		next_state = LEGUP_F_main_BB__659_914;
LEGUP_F_main_BB__659_914:
		next_state = LEGUP_F_main_BB__659_915;
LEGUP_F_main_BB__659_915:
		next_state = LEGUP_F_main_BB__659_916;
LEGUP_F_main_BB__659_916:
	if ((main_659_662 == 1'd1))
		next_state = LEGUP_F_main_BB__663_917;
	else if ((main_659_662 == 1'd0))
		next_state = LEGUP_F_main_BB__665_922;
LEGUP_F_main_BB__663_917:
		next_state = LEGUP_F_main_BB__663_918;
LEGUP_F_main_BB__663_918:
		next_state = LEGUP_F_main_BB__663_919;
LEGUP_F_main_BB__663_919:
		next_state = LEGUP_F_main_BB__663_920;
LEGUP_F_main_BB__663_920:
		next_state = LEGUP_F_main_BB__663_921;
LEGUP_F_main_BB__663_921:
		next_state = LEGUP_F_main_BB__665_922;
LEGUP_F_main_BB__665_922:
		next_state = LEGUP_F_main_BB__665_923;
LEGUP_F_main_BB__665_923:
		next_state = LEGUP_F_main_BB__665_924;
LEGUP_F_main_BB__665_924:
	if ((main_665_668 == 1'd1))
		next_state = LEGUP_F_main_BB__669_925;
	else if ((main_665_668 == 1'd0))
		next_state = LEGUP_F_main_BB__671_930;
LEGUP_F_main_BB__669_925:
		next_state = LEGUP_F_main_BB__669_926;
LEGUP_F_main_BB__669_926:
		next_state = LEGUP_F_main_BB__669_927;
LEGUP_F_main_BB__669_927:
		next_state = LEGUP_F_main_BB__669_928;
LEGUP_F_main_BB__669_928:
		next_state = LEGUP_F_main_BB__669_929;
LEGUP_F_main_BB__669_929:
		next_state = LEGUP_F_main_BB__671_930;
LEGUP_F_main_BB__66_46:
		next_state = LEGUP_F_main_BB__66_47;
LEGUP_F_main_BB__66_47:
		next_state = LEGUP_F_main_BB__66_48;
LEGUP_F_main_BB__66_48:
	if ((main_66_69 == 1'd1))
		next_state = LEGUP_F_main_BB__70_49;
	else if ((main_66_69 == 1'd0))
		next_state = LEGUP_F_main_BB__72_54;
LEGUP_F_main_BB__671_930:
		next_state = LEGUP_F_main_BB__671_931;
LEGUP_F_main_BB__671_931:
		next_state = LEGUP_F_main_BB__671_932;
LEGUP_F_main_BB__671_932:
	if ((main_671_674 == 1'd1))
		next_state = LEGUP_F_main_BB__675_933;
	else if ((main_671_674 == 1'd0))
		next_state = LEGUP_F_main_BB__677_938;
LEGUP_F_main_BB__675_933:
		next_state = LEGUP_F_main_BB__675_934;
LEGUP_F_main_BB__675_934:
		next_state = LEGUP_F_main_BB__675_935;
LEGUP_F_main_BB__675_935:
		next_state = LEGUP_F_main_BB__675_936;
LEGUP_F_main_BB__675_936:
		next_state = LEGUP_F_main_BB__675_937;
LEGUP_F_main_BB__675_937:
		next_state = LEGUP_F_main_BB__677_938;
LEGUP_F_main_BB__677_938:
		next_state = LEGUP_F_main_BB__677_939;
LEGUP_F_main_BB__677_939:
		next_state = LEGUP_F_main_BB__677_940;
LEGUP_F_main_BB__677_940:
	if ((main_677_680 == 1'd1))
		next_state = LEGUP_F_main_BB__681_941;
	else if ((main_677_680 == 1'd0))
		next_state = LEGUP_F_main_BB__683_946;
LEGUP_F_main_BB__681_941:
		next_state = LEGUP_F_main_BB__681_942;
LEGUP_F_main_BB__681_942:
		next_state = LEGUP_F_main_BB__681_943;
LEGUP_F_main_BB__681_943:
		next_state = LEGUP_F_main_BB__681_944;
LEGUP_F_main_BB__681_944:
		next_state = LEGUP_F_main_BB__681_945;
LEGUP_F_main_BB__681_945:
		next_state = LEGUP_F_main_BB__683_946;
LEGUP_F_main_BB__683_946:
	if ((main_683_684 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge106iloopexit_947;
	else if ((main_683_684 == 1'd0))
		next_state = LEGUP_F_main_BB__618_872;
LEGUP_F_main_BB__692_982:
		next_state = LEGUP_F_main_BB__692_983;
LEGUP_F_main_BB__692_983:
		next_state = LEGUP_F_main_BB__692_984;
LEGUP_F_main_BB__692_984:
		next_state = LEGUP_F_main_BB__692_985;
LEGUP_F_main_BB__692_985:
	if ((main_692_697 == 1'd1))
		next_state = LEGUP_F_main_BB__698_986;
	else if ((main_692_697 == 1'd0))
		next_state = LEGUP_F_main_BB__700_991;
LEGUP_F_main_BB__698_986:
		next_state = LEGUP_F_main_BB__698_987;
LEGUP_F_main_BB__698_987:
		next_state = LEGUP_F_main_BB__698_988;
LEGUP_F_main_BB__698_988:
		next_state = LEGUP_F_main_BB__698_989;
LEGUP_F_main_BB__698_989:
		next_state = LEGUP_F_main_BB__698_990;
LEGUP_F_main_BB__698_990:
		next_state = LEGUP_F_main_BB__700_991;
LEGUP_F_main_BB__700_991:
	if ((main_700_exitcond129 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge112iloopexit_992;
	else if ((main_700_exitcond129 == 1'd0))
		next_state = LEGUP_F_main_BB__692_982;
LEGUP_F_main_BB__702_995:
		next_state = LEGUP_F_main_BB__702_996;
LEGUP_F_main_BB__702_996:
		next_state = LEGUP_F_main_BB__702_997;
LEGUP_F_main_BB__702_997:
		next_state = LEGUP_F_main_BB__702_998;
LEGUP_F_main_BB__702_998:
		next_state = LEGUP_F_main_BB__702_999;
LEGUP_F_main_BB__702_999:
	if ((main_702_716 == 1'd1))
		next_state = LEGUP_F_main_BB__717_1000;
	else if ((main_702_716 == 1'd0))
		next_state = LEGUP_F_main_BB__719_1005;
LEGUP_F_main_BB__70_49:
		next_state = LEGUP_F_main_BB__70_50;
LEGUP_F_main_BB__70_50:
		next_state = LEGUP_F_main_BB__70_51;
LEGUP_F_main_BB__70_51:
		next_state = LEGUP_F_main_BB__70_52;
LEGUP_F_main_BB__70_52:
		next_state = LEGUP_F_main_BB__70_53;
LEGUP_F_main_BB__70_53:
		next_state = LEGUP_F_main_BB__72_54;
LEGUP_F_main_BB__717_1000:
		next_state = LEGUP_F_main_BB__717_1001;
LEGUP_F_main_BB__717_1001:
		next_state = LEGUP_F_main_BB__717_1002;
LEGUP_F_main_BB__717_1002:
		next_state = LEGUP_F_main_BB__717_1003;
LEGUP_F_main_BB__717_1003:
		next_state = LEGUP_F_main_BB__717_1004;
LEGUP_F_main_BB__717_1004:
		next_state = LEGUP_F_main_BB__719_1005;
LEGUP_F_main_BB__719_1005:
		next_state = LEGUP_F_main_BB__719_1006;
LEGUP_F_main_BB__719_1006:
		next_state = LEGUP_F_main_BB__719_1007;
LEGUP_F_main_BB__719_1007:
	if ((main_719_722 == 1'd1))
		next_state = LEGUP_F_main_BB__723_1008;
	else if ((main_719_722 == 1'd0))
		next_state = LEGUP_F_main_BB__725_1013;
LEGUP_F_main_BB__723_1008:
		next_state = LEGUP_F_main_BB__723_1009;
LEGUP_F_main_BB__723_1009:
		next_state = LEGUP_F_main_BB__723_1010;
LEGUP_F_main_BB__723_1010:
		next_state = LEGUP_F_main_BB__723_1011;
LEGUP_F_main_BB__723_1011:
		next_state = LEGUP_F_main_BB__723_1012;
LEGUP_F_main_BB__723_1012:
		next_state = LEGUP_F_main_BB__725_1013;
LEGUP_F_main_BB__725_1013:
		next_state = LEGUP_F_main_BB__725_1014;
LEGUP_F_main_BB__725_1014:
		next_state = LEGUP_F_main_BB__725_1015;
LEGUP_F_main_BB__725_1015:
	if ((main_725_728 == 1'd1))
		next_state = LEGUP_F_main_BB__729_1016;
	else if ((main_725_728 == 1'd0))
		next_state = LEGUP_F_main_BB__731_1021;
LEGUP_F_main_BB__729_1016:
		next_state = LEGUP_F_main_BB__729_1017;
LEGUP_F_main_BB__729_1017:
		next_state = LEGUP_F_main_BB__729_1018;
LEGUP_F_main_BB__729_1018:
		next_state = LEGUP_F_main_BB__729_1019;
LEGUP_F_main_BB__729_1019:
		next_state = LEGUP_F_main_BB__729_1020;
LEGUP_F_main_BB__729_1020:
		next_state = LEGUP_F_main_BB__731_1021;
LEGUP_F_main_BB__72_54:
		next_state = LEGUP_F_main_BB__72_55;
LEGUP_F_main_BB__72_55:
		next_state = LEGUP_F_main_BB__72_56;
LEGUP_F_main_BB__72_56:
	if ((main_72_75 == 1'd1))
		next_state = LEGUP_F_main_BB__76_57;
	else if ((main_72_75 == 1'd0))
		next_state = LEGUP_F_main_BB__78_62;
LEGUP_F_main_BB__731_1021:
		next_state = LEGUP_F_main_BB__731_1022;
LEGUP_F_main_BB__731_1022:
		next_state = LEGUP_F_main_BB__731_1023;
LEGUP_F_main_BB__731_1023:
	if ((main_731_734 == 1'd1))
		next_state = LEGUP_F_main_BB__735_1024;
	else if ((main_731_734 == 1'd0))
		next_state = LEGUP_F_main_BB__737_1029;
LEGUP_F_main_BB__735_1024:
		next_state = LEGUP_F_main_BB__735_1025;
LEGUP_F_main_BB__735_1025:
		next_state = LEGUP_F_main_BB__735_1026;
LEGUP_F_main_BB__735_1026:
		next_state = LEGUP_F_main_BB__735_1027;
LEGUP_F_main_BB__735_1027:
		next_state = LEGUP_F_main_BB__735_1028;
LEGUP_F_main_BB__735_1028:
		next_state = LEGUP_F_main_BB__737_1029;
LEGUP_F_main_BB__737_1029:
		next_state = LEGUP_F_main_BB__737_1030;
LEGUP_F_main_BB__737_1030:
		next_state = LEGUP_F_main_BB__737_1031;
LEGUP_F_main_BB__737_1031:
	if ((main_737_740 == 1'd1))
		next_state = LEGUP_F_main_BB__741_1032;
	else if ((main_737_740 == 1'd0))
		next_state = LEGUP_F_main_BB__743_1037;
LEGUP_F_main_BB__741_1032:
		next_state = LEGUP_F_main_BB__741_1033;
LEGUP_F_main_BB__741_1033:
		next_state = LEGUP_F_main_BB__741_1034;
LEGUP_F_main_BB__741_1034:
		next_state = LEGUP_F_main_BB__741_1035;
LEGUP_F_main_BB__741_1035:
		next_state = LEGUP_F_main_BB__741_1036;
LEGUP_F_main_BB__741_1036:
		next_state = LEGUP_F_main_BB__743_1037;
LEGUP_F_main_BB__743_1037:
		next_state = LEGUP_F_main_BB__743_1038;
LEGUP_F_main_BB__743_1038:
		next_state = LEGUP_F_main_BB__743_1039;
LEGUP_F_main_BB__743_1039:
	if ((main_743_746 == 1'd1))
		next_state = LEGUP_F_main_BB__747_1040;
	else if ((main_743_746 == 1'd0))
		next_state = LEGUP_F_main_BB__749_1045;
LEGUP_F_main_BB__747_1040:
		next_state = LEGUP_F_main_BB__747_1041;
LEGUP_F_main_BB__747_1041:
		next_state = LEGUP_F_main_BB__747_1042;
LEGUP_F_main_BB__747_1042:
		next_state = LEGUP_F_main_BB__747_1043;
LEGUP_F_main_BB__747_1043:
		next_state = LEGUP_F_main_BB__747_1044;
LEGUP_F_main_BB__747_1044:
		next_state = LEGUP_F_main_BB__749_1045;
LEGUP_F_main_BB__749_1045:
		next_state = LEGUP_F_main_BB__749_1046;
LEGUP_F_main_BB__749_1046:
		next_state = LEGUP_F_main_BB__749_1047;
LEGUP_F_main_BB__749_1047:
	if ((main_749_752 == 1'd1))
		next_state = LEGUP_F_main_BB__753_1048;
	else if ((main_749_752 == 1'd0))
		next_state = LEGUP_F_main_BB__755_1053;
LEGUP_F_main_BB__753_1048:
		next_state = LEGUP_F_main_BB__753_1049;
LEGUP_F_main_BB__753_1049:
		next_state = LEGUP_F_main_BB__753_1050;
LEGUP_F_main_BB__753_1050:
		next_state = LEGUP_F_main_BB__753_1051;
LEGUP_F_main_BB__753_1051:
		next_state = LEGUP_F_main_BB__753_1052;
LEGUP_F_main_BB__753_1052:
		next_state = LEGUP_F_main_BB__755_1053;
LEGUP_F_main_BB__755_1053:
		next_state = LEGUP_F_main_BB__755_1054;
LEGUP_F_main_BB__755_1054:
		next_state = LEGUP_F_main_BB__755_1055;
LEGUP_F_main_BB__755_1055:
	if ((main_755_758 == 1'd1))
		next_state = LEGUP_F_main_BB__759_1056;
	else if ((main_755_758 == 1'd0))
		next_state = LEGUP_F_main_BB__761_1061;
LEGUP_F_main_BB__759_1056:
		next_state = LEGUP_F_main_BB__759_1057;
LEGUP_F_main_BB__759_1057:
		next_state = LEGUP_F_main_BB__759_1058;
LEGUP_F_main_BB__759_1058:
		next_state = LEGUP_F_main_BB__759_1059;
LEGUP_F_main_BB__759_1059:
		next_state = LEGUP_F_main_BB__759_1060;
LEGUP_F_main_BB__759_1060:
		next_state = LEGUP_F_main_BB__761_1061;
LEGUP_F_main_BB__761_1061:
		next_state = LEGUP_F_main_BB__761_1062;
LEGUP_F_main_BB__761_1062:
		next_state = LEGUP_F_main_BB__761_1063;
LEGUP_F_main_BB__761_1063:
	if ((main_761_764 == 1'd1))
		next_state = LEGUP_F_main_BB__765_1064;
	else if ((main_761_764 == 1'd0))
		next_state = LEGUP_F_main_BB__767_1069;
LEGUP_F_main_BB__765_1064:
		next_state = LEGUP_F_main_BB__765_1065;
LEGUP_F_main_BB__765_1065:
		next_state = LEGUP_F_main_BB__765_1066;
LEGUP_F_main_BB__765_1066:
		next_state = LEGUP_F_main_BB__765_1067;
LEGUP_F_main_BB__765_1067:
		next_state = LEGUP_F_main_BB__765_1068;
LEGUP_F_main_BB__765_1068:
		next_state = LEGUP_F_main_BB__767_1069;
LEGUP_F_main_BB__767_1069:
	if ((main_767_768 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge117iloopexit_1070;
	else if ((main_767_768 == 1'd0))
		next_state = LEGUP_F_main_BB__702_995;
LEGUP_F_main_BB__76_57:
		next_state = LEGUP_F_main_BB__76_58;
LEGUP_F_main_BB__76_58:
		next_state = LEGUP_F_main_BB__76_59;
LEGUP_F_main_BB__76_59:
		next_state = LEGUP_F_main_BB__76_60;
LEGUP_F_main_BB__76_60:
		next_state = LEGUP_F_main_BB__76_61;
LEGUP_F_main_BB__76_61:
		next_state = LEGUP_F_main_BB__78_62;
LEGUP_F_main_BB__776_1105:
		next_state = LEGUP_F_main_BB__776_1106;
LEGUP_F_main_BB__776_1106:
		next_state = LEGUP_F_main_BB__776_1107;
LEGUP_F_main_BB__776_1107:
		next_state = LEGUP_F_main_BB__776_1108;
LEGUP_F_main_BB__776_1108:
	if ((main_776_781 == 1'd1))
		next_state = LEGUP_F_main_BB__782_1109;
	else if ((main_776_781 == 1'd0))
		next_state = LEGUP_F_main_BB__784_1114;
LEGUP_F_main_BB__782_1109:
		next_state = LEGUP_F_main_BB__782_1110;
LEGUP_F_main_BB__782_1110:
		next_state = LEGUP_F_main_BB__782_1111;
LEGUP_F_main_BB__782_1111:
		next_state = LEGUP_F_main_BB__782_1112;
LEGUP_F_main_BB__782_1112:
		next_state = LEGUP_F_main_BB__782_1113;
LEGUP_F_main_BB__782_1113:
		next_state = LEGUP_F_main_BB__784_1114;
LEGUP_F_main_BB__784_1114:
	if ((main_784_exitcond145 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexit12iloopexit_6;
	else if ((main_784_exitcond145 == 1'd0))
		next_state = LEGUP_F_main_BB__776_1105;
LEGUP_F_main_BB__788_1118:
		next_state = LEGUP_F_main_BB__790_1119;
LEGUP_F_main_BB__78_62:
		next_state = LEGUP_F_main_BB__78_63;
LEGUP_F_main_BB__78_63:
		next_state = LEGUP_F_main_BB__78_64;
LEGUP_F_main_BB__78_64:
	if ((main_78_81 == 1'd1))
		next_state = LEGUP_F_main_BB__82_65;
	else if ((main_78_81 == 1'd0))
		next_state = LEGUP_F_main_BB__84_70;
LEGUP_F_main_BB__790_1119:
		next_state = LEGUP_F_main_BB__790_1120;
LEGUP_F_main_BB__790_1120:
		next_state = LEGUP_F_main_BB__790_1121;
LEGUP_F_main_BB__790_1121:
	if ((main_790_exitcond2_reg == 1'd1))
		next_state = LEGUP_F_main_BB__794_1122;
	else if ((main_790_exitcond2_reg == 1'd0))
		next_state = LEGUP_F_main_BB__790_1119;
LEGUP_F_main_BB__794_1122:
		next_state = LEGUP_0;
LEGUP_F_main_BB__82_65:
		next_state = LEGUP_F_main_BB__82_66;
LEGUP_F_main_BB__82_66:
		next_state = LEGUP_F_main_BB__82_67;
LEGUP_F_main_BB__82_67:
		next_state = LEGUP_F_main_BB__82_68;
LEGUP_F_main_BB__82_68:
		next_state = LEGUP_F_main_BB__82_69;
LEGUP_F_main_BB__82_69:
		next_state = LEGUP_F_main_BB__84_70;
LEGUP_F_main_BB__84_70:
		next_state = LEGUP_F_main_BB__84_71;
LEGUP_F_main_BB__84_71:
		next_state = LEGUP_F_main_BB__84_72;
LEGUP_F_main_BB__84_72:
	if ((main_84_87 == 1'd1))
		next_state = LEGUP_F_main_BB__88_73;
	else if ((main_84_87 == 1'd0))
		next_state = LEGUP_F_main_BB__90_78;
LEGUP_F_main_BB__88_73:
		next_state = LEGUP_F_main_BB__88_74;
LEGUP_F_main_BB__88_74:
		next_state = LEGUP_F_main_BB__88_75;
LEGUP_F_main_BB__88_75:
		next_state = LEGUP_F_main_BB__88_76;
LEGUP_F_main_BB__88_76:
		next_state = LEGUP_F_main_BB__88_77;
LEGUP_F_main_BB__88_77:
		next_state = LEGUP_F_main_BB__90_78;
LEGUP_F_main_BB__90_78:
		next_state = LEGUP_F_main_BB__90_79;
LEGUP_F_main_BB__90_79:
		next_state = LEGUP_F_main_BB__90_80;
LEGUP_F_main_BB__90_80:
	if ((main_90_93 == 1'd1))
		next_state = LEGUP_F_main_BB__94_81;
	else if ((main_90_93 == 1'd0))
		next_state = LEGUP_F_main_BB__96_86;
LEGUP_F_main_BB__94_81:
		next_state = LEGUP_F_main_BB__94_82;
LEGUP_F_main_BB__94_82:
		next_state = LEGUP_F_main_BB__94_83;
LEGUP_F_main_BB__94_83:
		next_state = LEGUP_F_main_BB__94_84;
LEGUP_F_main_BB__94_84:
		next_state = LEGUP_F_main_BB__94_85;
LEGUP_F_main_BB__94_85:
		next_state = LEGUP_F_main_BB__96_86;
LEGUP_F_main_BB__96_86:
	if ((main_96_97 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge28i_87;
	else if ((main_96_97 == 1'd0))
		next_state = LEGUP_F_main_BB__31_12;
LEGUP_F_main_BB__crit_edge101i_870:
	if ((main__crit_edge101i_617 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge106i_948;
	else if ((main__crit_edge101i_617 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph105i_871;
LEGUP_F_main_BB__crit_edge101iloopexit_869:
		next_state = LEGUP_F_main_BB__crit_edge101i_870;
LEGUP_F_main_BB__crit_edge106i_948:
		next_state = LEGUP_F_main_BB__crit_edge106i_949;
LEGUP_F_main_BB__crit_edge106i_949:
		next_state = LEGUP_F_main_BB__crit_edge106i_950;
LEGUP_F_main_BB__crit_edge106i_950:
		next_state = LEGUP_F_main_BB__crit_edge106i_951;
LEGUP_F_main_BB__crit_edge106i_951:
		next_state = LEGUP_F_main_BB__crit_edge106i_952;
LEGUP_F_main_BB__crit_edge106i_952:
		next_state = LEGUP_F_main_BB__crit_edge106i_953;
LEGUP_F_main_BB__crit_edge106i_953:
		next_state = LEGUP_F_main_BB__crit_edge106i_954;
LEGUP_F_main_BB__crit_edge106i_954:
		next_state = LEGUP_F_main_BB__crit_edge106i_955;
LEGUP_F_main_BB__crit_edge106i_955:
		next_state = LEGUP_F_main_BB__crit_edge106i_956;
LEGUP_F_main_BB__crit_edge106i_956:
		next_state = LEGUP_F_main_BB__crit_edge106i_957;
LEGUP_F_main_BB__crit_edge106i_957:
		next_state = LEGUP_F_main_BB__crit_edge106i_958;
LEGUP_F_main_BB__crit_edge106i_958:
		next_state = LEGUP_F_main_BB__crit_edge106i_959;
LEGUP_F_main_BB__crit_edge106i_959:
		next_state = LEGUP_F_main_BB__crit_edge106i_960;
LEGUP_F_main_BB__crit_edge106i_960:
		next_state = LEGUP_F_main_BB__crit_edge106i_961;
LEGUP_F_main_BB__crit_edge106i_961:
		next_state = LEGUP_F_main_BB__crit_edge106i_962;
LEGUP_F_main_BB__crit_edge106i_962:
		next_state = LEGUP_F_main_BB__crit_edge106i_963;
LEGUP_F_main_BB__crit_edge106i_963:
		next_state = LEGUP_F_main_BB__crit_edge106i_964;
LEGUP_F_main_BB__crit_edge106i_964:
		next_state = LEGUP_F_main_BB__crit_edge106i_965;
LEGUP_F_main_BB__crit_edge106i_965:
		next_state = LEGUP_F_main_BB__crit_edge106i_966;
LEGUP_F_main_BB__crit_edge106i_966:
		next_state = LEGUP_F_main_BB__crit_edge106i_967;
LEGUP_F_main_BB__crit_edge106i_967:
		next_state = LEGUP_F_main_BB__crit_edge106i_968;
LEGUP_F_main_BB__crit_edge106i_968:
		next_state = LEGUP_F_main_BB__crit_edge106i_969;
LEGUP_F_main_BB__crit_edge106i_969:
		next_state = LEGUP_F_main_BB__crit_edge106i_970;
LEGUP_F_main_BB__crit_edge106i_970:
		next_state = LEGUP_F_main_BB__crit_edge106i_971;
LEGUP_F_main_BB__crit_edge106i_971:
		next_state = LEGUP_F_main_BB__crit_edge106i_972;
LEGUP_F_main_BB__crit_edge106i_972:
		next_state = LEGUP_F_main_BB__crit_edge106i_973;
LEGUP_F_main_BB__crit_edge106i_973:
		next_state = LEGUP_F_main_BB__crit_edge106i_974;
LEGUP_F_main_BB__crit_edge106i_974:
		next_state = LEGUP_F_main_BB__crit_edge106i_975;
LEGUP_F_main_BB__crit_edge106i_975:
		next_state = LEGUP_F_main_BB__crit_edge106i_976;
LEGUP_F_main_BB__crit_edge106i_976:
		next_state = LEGUP_F_main_BB__crit_edge106i_977;
LEGUP_F_main_BB__crit_edge106i_977:
		next_state = LEGUP_F_main_BB__crit_edge106i_978;
LEGUP_F_main_BB__crit_edge106i_978:
		next_state = LEGUP_F_main_BB__crit_edge106i_979;
LEGUP_F_main_BB__crit_edge106i_979:
		next_state = LEGUP_F_main_BB__crit_edge106i_980;
LEGUP_F_main_BB__crit_edge106i_980:
	if ((main__crit_edge106i_687 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge112i_993;
	else if ((main__crit_edge106i_687 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph111i_981;
LEGUP_F_main_BB__crit_edge106iloopexit_947:
		next_state = LEGUP_F_main_BB__crit_edge106i_948;
LEGUP_F_main_BB__crit_edge112i_993:
	if ((main__crit_edge112i_701 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge117i_1071;
	else if ((main__crit_edge112i_701 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph116i_994;
LEGUP_F_main_BB__crit_edge112iloopexit_992:
		next_state = LEGUP_F_main_BB__crit_edge112i_993;
LEGUP_F_main_BB__crit_edge117i_1071:
		next_state = LEGUP_F_main_BB__crit_edge117i_1072;
LEGUP_F_main_BB__crit_edge117i_1072:
		next_state = LEGUP_F_main_BB__crit_edge117i_1073;
LEGUP_F_main_BB__crit_edge117i_1073:
		next_state = LEGUP_F_main_BB__crit_edge117i_1074;
LEGUP_F_main_BB__crit_edge117i_1074:
		next_state = LEGUP_F_main_BB__crit_edge117i_1075;
LEGUP_F_main_BB__crit_edge117i_1075:
		next_state = LEGUP_F_main_BB__crit_edge117i_1076;
LEGUP_F_main_BB__crit_edge117i_1076:
		next_state = LEGUP_F_main_BB__crit_edge117i_1077;
LEGUP_F_main_BB__crit_edge117i_1077:
		next_state = LEGUP_F_main_BB__crit_edge117i_1078;
LEGUP_F_main_BB__crit_edge117i_1078:
		next_state = LEGUP_F_main_BB__crit_edge117i_1079;
LEGUP_F_main_BB__crit_edge117i_1079:
		next_state = LEGUP_F_main_BB__crit_edge117i_1080;
LEGUP_F_main_BB__crit_edge117i_1080:
		next_state = LEGUP_F_main_BB__crit_edge117i_1081;
LEGUP_F_main_BB__crit_edge117i_1081:
		next_state = LEGUP_F_main_BB__crit_edge117i_1082;
LEGUP_F_main_BB__crit_edge117i_1082:
		next_state = LEGUP_F_main_BB__crit_edge117i_1083;
LEGUP_F_main_BB__crit_edge117i_1083:
		next_state = LEGUP_F_main_BB__crit_edge117i_1084;
LEGUP_F_main_BB__crit_edge117i_1084:
		next_state = LEGUP_F_main_BB__crit_edge117i_1085;
LEGUP_F_main_BB__crit_edge117i_1085:
		next_state = LEGUP_F_main_BB__crit_edge117i_1086;
LEGUP_F_main_BB__crit_edge117i_1086:
		next_state = LEGUP_F_main_BB__crit_edge117i_1087;
LEGUP_F_main_BB__crit_edge117i_1087:
		next_state = LEGUP_F_main_BB__crit_edge117i_1088;
LEGUP_F_main_BB__crit_edge117i_1088:
		next_state = LEGUP_F_main_BB__crit_edge117i_1089;
LEGUP_F_main_BB__crit_edge117i_1089:
		next_state = LEGUP_F_main_BB__crit_edge117i_1090;
LEGUP_F_main_BB__crit_edge117i_1090:
		next_state = LEGUP_F_main_BB__crit_edge117i_1091;
LEGUP_F_main_BB__crit_edge117i_1091:
		next_state = LEGUP_F_main_BB__crit_edge117i_1092;
LEGUP_F_main_BB__crit_edge117i_1092:
		next_state = LEGUP_F_main_BB__crit_edge117i_1093;
LEGUP_F_main_BB__crit_edge117i_1093:
		next_state = LEGUP_F_main_BB__crit_edge117i_1094;
LEGUP_F_main_BB__crit_edge117i_1094:
		next_state = LEGUP_F_main_BB__crit_edge117i_1095;
LEGUP_F_main_BB__crit_edge117i_1095:
		next_state = LEGUP_F_main_BB__crit_edge117i_1096;
LEGUP_F_main_BB__crit_edge117i_1096:
		next_state = LEGUP_F_main_BB__crit_edge117i_1097;
LEGUP_F_main_BB__crit_edge117i_1097:
		next_state = LEGUP_F_main_BB__crit_edge117i_1098;
LEGUP_F_main_BB__crit_edge117i_1098:
		next_state = LEGUP_F_main_BB__crit_edge117i_1099;
LEGUP_F_main_BB__crit_edge117i_1099:
		next_state = LEGUP_F_main_BB__crit_edge117i_1100;
LEGUP_F_main_BB__crit_edge117i_1100:
		next_state = LEGUP_F_main_BB__crit_edge117i_1101;
LEGUP_F_main_BB__crit_edge117i_1101:
		next_state = LEGUP_F_main_BB__crit_edge117i_1102;
LEGUP_F_main_BB__crit_edge117i_1102:
		next_state = LEGUP_F_main_BB__crit_edge117i_1103;
LEGUP_F_main_BB__crit_edge117i_1103:
	if ((main__crit_edge117i_771 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexit12i_7;
	else if ((main__crit_edge117i_771 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph122i_1104;
LEGUP_F_main_BB__crit_edge117iloopexit_1070:
		next_state = LEGUP_F_main_BB__crit_edge117i_1071;
LEGUP_F_main_BB__crit_edge28i_100:
		next_state = LEGUP_F_main_BB__crit_edge28i_101;
LEGUP_F_main_BB__crit_edge28i_101:
		next_state = LEGUP_F_main_BB__crit_edge28i_102;
LEGUP_F_main_BB__crit_edge28i_102:
		next_state = LEGUP_F_main_BB__crit_edge28i_103;
LEGUP_F_main_BB__crit_edge28i_103:
		next_state = LEGUP_F_main_BB__crit_edge28i_104;
LEGUP_F_main_BB__crit_edge28i_104:
		next_state = LEGUP_F_main_BB__crit_edge28i_105;
LEGUP_F_main_BB__crit_edge28i_105:
		next_state = LEGUP_F_main_BB__crit_edge28i_106;
LEGUP_F_main_BB__crit_edge28i_106:
		next_state = LEGUP_F_main_BB__crit_edge28i_107;
LEGUP_F_main_BB__crit_edge28i_107:
		next_state = LEGUP_F_main_BB__crit_edge28i_108;
LEGUP_F_main_BB__crit_edge28i_108:
		next_state = LEGUP_F_main_BB__crit_edge28i_109;
LEGUP_F_main_BB__crit_edge28i_109:
		next_state = LEGUP_F_main_BB__crit_edge28i_110;
LEGUP_F_main_BB__crit_edge28i_110:
		next_state = LEGUP_F_main_BB__crit_edge28i_111;
LEGUP_F_main_BB__crit_edge28i_111:
		next_state = LEGUP_F_main_BB__crit_edge28i_112;
LEGUP_F_main_BB__crit_edge28i_112:
		next_state = LEGUP_F_main_BB__crit_edge28i_113;
LEGUP_F_main_BB__crit_edge28i_113:
		next_state = LEGUP_F_main_BB__crit_edge28i_114;
LEGUP_F_main_BB__crit_edge28i_114:
		next_state = LEGUP_F_main_BB__crit_edge28i_115;
LEGUP_F_main_BB__crit_edge28i_115:
		next_state = LEGUP_F_main_BB__crit_edge28i_116;
LEGUP_F_main_BB__crit_edge28i_116:
		next_state = LEGUP_F_main_BB__crit_edge28i_117;
LEGUP_F_main_BB__crit_edge28i_117:
		next_state = LEGUP_F_main_BB__crit_edge28i_118;
LEGUP_F_main_BB__crit_edge28i_118:
		next_state = LEGUP_F_main_BB__crit_edge28i_119;
LEGUP_F_main_BB__crit_edge28i_119:
	if ((main__crit_edge28i_100 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge35i_132;
	else if ((main__crit_edge28i_100 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph34ipreheader_120;
LEGUP_F_main_BB__crit_edge28i_87:
		next_state = LEGUP_F_main_BB__crit_edge28i_88;
LEGUP_F_main_BB__crit_edge28i_88:
		next_state = LEGUP_F_main_BB__crit_edge28i_89;
LEGUP_F_main_BB__crit_edge28i_89:
		next_state = LEGUP_F_main_BB__crit_edge28i_90;
LEGUP_F_main_BB__crit_edge28i_90:
		next_state = LEGUP_F_main_BB__crit_edge28i_91;
LEGUP_F_main_BB__crit_edge28i_91:
		next_state = LEGUP_F_main_BB__crit_edge28i_92;
LEGUP_F_main_BB__crit_edge28i_92:
		next_state = LEGUP_F_main_BB__crit_edge28i_93;
LEGUP_F_main_BB__crit_edge28i_93:
		next_state = LEGUP_F_main_BB__crit_edge28i_94;
LEGUP_F_main_BB__crit_edge28i_94:
		next_state = LEGUP_F_main_BB__crit_edge28i_95;
LEGUP_F_main_BB__crit_edge28i_95:
		next_state = LEGUP_F_main_BB__crit_edge28i_96;
LEGUP_F_main_BB__crit_edge28i_96:
		next_state = LEGUP_F_main_BB__crit_edge28i_97;
LEGUP_F_main_BB__crit_edge28i_97:
		next_state = LEGUP_F_main_BB__crit_edge28i_98;
LEGUP_F_main_BB__crit_edge28i_98:
		next_state = LEGUP_F_main_BB__crit_edge28i_99;
LEGUP_F_main_BB__crit_edge28i_99:
		next_state = LEGUP_F_main_BB__crit_edge28i_100;
LEGUP_F_main_BB__crit_edge35i_132:
	if ((main__crit_edge35i_113 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge40i_210;
	else if ((main__crit_edge35i_113 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph39i_133;
LEGUP_F_main_BB__crit_edge35iloopexit_131:
		next_state = LEGUP_F_main_BB__crit_edge35i_132;
LEGUP_F_main_BB__crit_edge40i_210:
		next_state = LEGUP_F_main_BB__crit_edge40i_211;
LEGUP_F_main_BB__crit_edge40i_211:
		next_state = LEGUP_F_main_BB__crit_edge40i_212;
LEGUP_F_main_BB__crit_edge40i_212:
		next_state = LEGUP_F_main_BB__crit_edge40i_213;
LEGUP_F_main_BB__crit_edge40i_213:
		next_state = LEGUP_F_main_BB__crit_edge40i_214;
LEGUP_F_main_BB__crit_edge40i_214:
		next_state = LEGUP_F_main_BB__crit_edge40i_215;
LEGUP_F_main_BB__crit_edge40i_215:
		next_state = LEGUP_F_main_BB__crit_edge40i_216;
LEGUP_F_main_BB__crit_edge40i_216:
		next_state = LEGUP_F_main_BB__crit_edge40i_217;
LEGUP_F_main_BB__crit_edge40i_217:
		next_state = LEGUP_F_main_BB__crit_edge40i_218;
LEGUP_F_main_BB__crit_edge40i_218:
		next_state = LEGUP_F_main_BB__crit_edge40i_219;
LEGUP_F_main_BB__crit_edge40i_219:
		next_state = LEGUP_F_main_BB__crit_edge40i_220;
LEGUP_F_main_BB__crit_edge40i_220:
		next_state = LEGUP_F_main_BB__crit_edge40i_221;
LEGUP_F_main_BB__crit_edge40i_221:
		next_state = LEGUP_F_main_BB__crit_edge40i_222;
LEGUP_F_main_BB__crit_edge40i_222:
		next_state = LEGUP_F_main_BB__crit_edge40i_223;
LEGUP_F_main_BB__crit_edge40i_223:
		next_state = LEGUP_F_main_BB__crit_edge40i_224;
LEGUP_F_main_BB__crit_edge40i_224:
		next_state = LEGUP_F_main_BB__crit_edge40i_225;
LEGUP_F_main_BB__crit_edge40i_225:
		next_state = LEGUP_F_main_BB__crit_edge40i_226;
LEGUP_F_main_BB__crit_edge40i_226:
		next_state = LEGUP_F_main_BB__crit_edge40i_227;
LEGUP_F_main_BB__crit_edge40i_227:
		next_state = LEGUP_F_main_BB__crit_edge40i_228;
LEGUP_F_main_BB__crit_edge40i_228:
		next_state = LEGUP_F_main_BB__crit_edge40i_229;
LEGUP_F_main_BB__crit_edge40i_229:
		next_state = LEGUP_F_main_BB__crit_edge40i_230;
LEGUP_F_main_BB__crit_edge40i_230:
		next_state = LEGUP_F_main_BB__crit_edge40i_231;
LEGUP_F_main_BB__crit_edge40i_231:
		next_state = LEGUP_F_main_BB__crit_edge40i_232;
LEGUP_F_main_BB__crit_edge40i_232:
		next_state = LEGUP_F_main_BB__crit_edge40i_233;
LEGUP_F_main_BB__crit_edge40i_233:
		next_state = LEGUP_F_main_BB__crit_edge40i_234;
LEGUP_F_main_BB__crit_edge40i_234:
		next_state = LEGUP_F_main_BB__crit_edge40i_235;
LEGUP_F_main_BB__crit_edge40i_235:
		next_state = LEGUP_F_main_BB__crit_edge40i_236;
LEGUP_F_main_BB__crit_edge40i_236:
		next_state = LEGUP_F_main_BB__crit_edge40i_237;
LEGUP_F_main_BB__crit_edge40i_237:
		next_state = LEGUP_F_main_BB__crit_edge40i_238;
LEGUP_F_main_BB__crit_edge40i_238:
		next_state = LEGUP_F_main_BB__crit_edge40i_239;
LEGUP_F_main_BB__crit_edge40i_239:
		next_state = LEGUP_F_main_BB__crit_edge40i_240;
LEGUP_F_main_BB__crit_edge40i_240:
		next_state = LEGUP_F_main_BB__crit_edge40i_241;
LEGUP_F_main_BB__crit_edge40i_241:
		next_state = LEGUP_F_main_BB__crit_edge40i_242;
LEGUP_F_main_BB__crit_edge40i_242:
	if ((main__crit_edge40i_183 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge46i_255;
	else if ((main__crit_edge40i_183 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph45i_243;
LEGUP_F_main_BB__crit_edge40iloopexit_209:
		next_state = LEGUP_F_main_BB__crit_edge40i_210;
LEGUP_F_main_BB__crit_edge46i_255:
	if ((main__crit_edge46i_197 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge51i_333;
	else if ((main__crit_edge46i_197 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph50i_256;
LEGUP_F_main_BB__crit_edge46iloopexit_254:
		next_state = LEGUP_F_main_BB__crit_edge46i_255;
LEGUP_F_main_BB__crit_edge51i_333:
		next_state = LEGUP_F_main_BB__crit_edge51i_334;
LEGUP_F_main_BB__crit_edge51i_334:
		next_state = LEGUP_F_main_BB__crit_edge51i_335;
LEGUP_F_main_BB__crit_edge51i_335:
		next_state = LEGUP_F_main_BB__crit_edge51i_336;
LEGUP_F_main_BB__crit_edge51i_336:
		next_state = LEGUP_F_main_BB__crit_edge51i_337;
LEGUP_F_main_BB__crit_edge51i_337:
		next_state = LEGUP_F_main_BB__crit_edge51i_338;
LEGUP_F_main_BB__crit_edge51i_338:
		next_state = LEGUP_F_main_BB__crit_edge51i_339;
LEGUP_F_main_BB__crit_edge51i_339:
		next_state = LEGUP_F_main_BB__crit_edge51i_340;
LEGUP_F_main_BB__crit_edge51i_340:
		next_state = LEGUP_F_main_BB__crit_edge51i_341;
LEGUP_F_main_BB__crit_edge51i_341:
		next_state = LEGUP_F_main_BB__crit_edge51i_342;
LEGUP_F_main_BB__crit_edge51i_342:
		next_state = LEGUP_F_main_BB__crit_edge51i_343;
LEGUP_F_main_BB__crit_edge51i_343:
		next_state = LEGUP_F_main_BB__crit_edge51i_344;
LEGUP_F_main_BB__crit_edge51i_344:
		next_state = LEGUP_F_main_BB__crit_edge51i_345;
LEGUP_F_main_BB__crit_edge51i_345:
		next_state = LEGUP_F_main_BB__crit_edge51i_346;
LEGUP_F_main_BB__crit_edge51i_346:
		next_state = LEGUP_F_main_BB__crit_edge51i_347;
LEGUP_F_main_BB__crit_edge51i_347:
		next_state = LEGUP_F_main_BB__crit_edge51i_348;
LEGUP_F_main_BB__crit_edge51i_348:
		next_state = LEGUP_F_main_BB__crit_edge51i_349;
LEGUP_F_main_BB__crit_edge51i_349:
		next_state = LEGUP_F_main_BB__crit_edge51i_350;
LEGUP_F_main_BB__crit_edge51i_350:
		next_state = LEGUP_F_main_BB__crit_edge51i_351;
LEGUP_F_main_BB__crit_edge51i_351:
		next_state = LEGUP_F_main_BB__crit_edge51i_352;
LEGUP_F_main_BB__crit_edge51i_352:
		next_state = LEGUP_F_main_BB__crit_edge51i_353;
LEGUP_F_main_BB__crit_edge51i_353:
		next_state = LEGUP_F_main_BB__crit_edge51i_354;
LEGUP_F_main_BB__crit_edge51i_354:
		next_state = LEGUP_F_main_BB__crit_edge51i_355;
LEGUP_F_main_BB__crit_edge51i_355:
		next_state = LEGUP_F_main_BB__crit_edge51i_356;
LEGUP_F_main_BB__crit_edge51i_356:
		next_state = LEGUP_F_main_BB__crit_edge51i_357;
LEGUP_F_main_BB__crit_edge51i_357:
		next_state = LEGUP_F_main_BB__crit_edge51i_358;
LEGUP_F_main_BB__crit_edge51i_358:
		next_state = LEGUP_F_main_BB__crit_edge51i_359;
LEGUP_F_main_BB__crit_edge51i_359:
		next_state = LEGUP_F_main_BB__crit_edge51i_360;
LEGUP_F_main_BB__crit_edge51i_360:
		next_state = LEGUP_F_main_BB__crit_edge51i_361;
LEGUP_F_main_BB__crit_edge51i_361:
		next_state = LEGUP_F_main_BB__crit_edge51i_362;
LEGUP_F_main_BB__crit_edge51i_362:
		next_state = LEGUP_F_main_BB__crit_edge51i_363;
LEGUP_F_main_BB__crit_edge51i_363:
		next_state = LEGUP_F_main_BB__crit_edge51i_364;
LEGUP_F_main_BB__crit_edge51i_364:
		next_state = LEGUP_F_main_BB__crit_edge51i_365;
LEGUP_F_main_BB__crit_edge51i_365:
	if ((main__crit_edge51i_267 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge57i_378;
	else if ((main__crit_edge51i_267 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph56i_366;
LEGUP_F_main_BB__crit_edge51iloopexit_332:
		next_state = LEGUP_F_main_BB__crit_edge51i_333;
LEGUP_F_main_BB__crit_edge57i_378:
	if ((main__crit_edge57i_281 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge62i_456;
	else if ((main__crit_edge57i_281 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph61i_379;
LEGUP_F_main_BB__crit_edge57iloopexit_377:
		next_state = LEGUP_F_main_BB__crit_edge57i_378;
LEGUP_F_main_BB__crit_edge62i_456:
		next_state = LEGUP_F_main_BB__crit_edge62i_457;
LEGUP_F_main_BB__crit_edge62i_457:
		next_state = LEGUP_F_main_BB__crit_edge62i_458;
LEGUP_F_main_BB__crit_edge62i_458:
		next_state = LEGUP_F_main_BB__crit_edge62i_459;
LEGUP_F_main_BB__crit_edge62i_459:
		next_state = LEGUP_F_main_BB__crit_edge62i_460;
LEGUP_F_main_BB__crit_edge62i_460:
		next_state = LEGUP_F_main_BB__crit_edge62i_461;
LEGUP_F_main_BB__crit_edge62i_461:
		next_state = LEGUP_F_main_BB__crit_edge62i_462;
LEGUP_F_main_BB__crit_edge62i_462:
		next_state = LEGUP_F_main_BB__crit_edge62i_463;
LEGUP_F_main_BB__crit_edge62i_463:
		next_state = LEGUP_F_main_BB__crit_edge62i_464;
LEGUP_F_main_BB__crit_edge62i_464:
		next_state = LEGUP_F_main_BB__crit_edge62i_465;
LEGUP_F_main_BB__crit_edge62i_465:
		next_state = LEGUP_F_main_BB__crit_edge62i_466;
LEGUP_F_main_BB__crit_edge62i_466:
		next_state = LEGUP_F_main_BB__crit_edge62i_467;
LEGUP_F_main_BB__crit_edge62i_467:
		next_state = LEGUP_F_main_BB__crit_edge62i_468;
LEGUP_F_main_BB__crit_edge62i_468:
		next_state = LEGUP_F_main_BB__crit_edge62i_469;
LEGUP_F_main_BB__crit_edge62i_469:
		next_state = LEGUP_F_main_BB__crit_edge62i_470;
LEGUP_F_main_BB__crit_edge62i_470:
		next_state = LEGUP_F_main_BB__crit_edge62i_471;
LEGUP_F_main_BB__crit_edge62i_471:
		next_state = LEGUP_F_main_BB__crit_edge62i_472;
LEGUP_F_main_BB__crit_edge62i_472:
		next_state = LEGUP_F_main_BB__crit_edge62i_473;
LEGUP_F_main_BB__crit_edge62i_473:
		next_state = LEGUP_F_main_BB__crit_edge62i_474;
LEGUP_F_main_BB__crit_edge62i_474:
		next_state = LEGUP_F_main_BB__crit_edge62i_475;
LEGUP_F_main_BB__crit_edge62i_475:
		next_state = LEGUP_F_main_BB__crit_edge62i_476;
LEGUP_F_main_BB__crit_edge62i_476:
		next_state = LEGUP_F_main_BB__crit_edge62i_477;
LEGUP_F_main_BB__crit_edge62i_477:
		next_state = LEGUP_F_main_BB__crit_edge62i_478;
LEGUP_F_main_BB__crit_edge62i_478:
		next_state = LEGUP_F_main_BB__crit_edge62i_479;
LEGUP_F_main_BB__crit_edge62i_479:
		next_state = LEGUP_F_main_BB__crit_edge62i_480;
LEGUP_F_main_BB__crit_edge62i_480:
		next_state = LEGUP_F_main_BB__crit_edge62i_481;
LEGUP_F_main_BB__crit_edge62i_481:
		next_state = LEGUP_F_main_BB__crit_edge62i_482;
LEGUP_F_main_BB__crit_edge62i_482:
		next_state = LEGUP_F_main_BB__crit_edge62i_483;
LEGUP_F_main_BB__crit_edge62i_483:
		next_state = LEGUP_F_main_BB__crit_edge62i_484;
LEGUP_F_main_BB__crit_edge62i_484:
		next_state = LEGUP_F_main_BB__crit_edge62i_485;
LEGUP_F_main_BB__crit_edge62i_485:
		next_state = LEGUP_F_main_BB__crit_edge62i_486;
LEGUP_F_main_BB__crit_edge62i_486:
		next_state = LEGUP_F_main_BB__crit_edge62i_487;
LEGUP_F_main_BB__crit_edge62i_487:
		next_state = LEGUP_F_main_BB__crit_edge62i_488;
LEGUP_F_main_BB__crit_edge62i_488:
	if ((main__crit_edge62i_351 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge68i_501;
	else if ((main__crit_edge62i_351 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph67i_489;
LEGUP_F_main_BB__crit_edge62iloopexit_455:
		next_state = LEGUP_F_main_BB__crit_edge62i_456;
LEGUP_F_main_BB__crit_edge68i_501:
	if ((main__crit_edge68i_365 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge73i_579;
	else if ((main__crit_edge68i_365 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph72i_502;
LEGUP_F_main_BB__crit_edge68iloopexit_500:
		next_state = LEGUP_F_main_BB__crit_edge68i_501;
LEGUP_F_main_BB__crit_edge73i_579:
		next_state = LEGUP_F_main_BB__crit_edge73i_580;
LEGUP_F_main_BB__crit_edge73i_580:
		next_state = LEGUP_F_main_BB__crit_edge73i_581;
LEGUP_F_main_BB__crit_edge73i_581:
		next_state = LEGUP_F_main_BB__crit_edge73i_582;
LEGUP_F_main_BB__crit_edge73i_582:
		next_state = LEGUP_F_main_BB__crit_edge73i_583;
LEGUP_F_main_BB__crit_edge73i_583:
		next_state = LEGUP_F_main_BB__crit_edge73i_584;
LEGUP_F_main_BB__crit_edge73i_584:
		next_state = LEGUP_F_main_BB__crit_edge73i_585;
LEGUP_F_main_BB__crit_edge73i_585:
		next_state = LEGUP_F_main_BB__crit_edge73i_586;
LEGUP_F_main_BB__crit_edge73i_586:
		next_state = LEGUP_F_main_BB__crit_edge73i_587;
LEGUP_F_main_BB__crit_edge73i_587:
		next_state = LEGUP_F_main_BB__crit_edge73i_588;
LEGUP_F_main_BB__crit_edge73i_588:
		next_state = LEGUP_F_main_BB__crit_edge73i_589;
LEGUP_F_main_BB__crit_edge73i_589:
		next_state = LEGUP_F_main_BB__crit_edge73i_590;
LEGUP_F_main_BB__crit_edge73i_590:
		next_state = LEGUP_F_main_BB__crit_edge73i_591;
LEGUP_F_main_BB__crit_edge73i_591:
		next_state = LEGUP_F_main_BB__crit_edge73i_592;
LEGUP_F_main_BB__crit_edge73i_592:
		next_state = LEGUP_F_main_BB__crit_edge73i_593;
LEGUP_F_main_BB__crit_edge73i_593:
		next_state = LEGUP_F_main_BB__crit_edge73i_594;
LEGUP_F_main_BB__crit_edge73i_594:
		next_state = LEGUP_F_main_BB__crit_edge73i_595;
LEGUP_F_main_BB__crit_edge73i_595:
		next_state = LEGUP_F_main_BB__crit_edge73i_596;
LEGUP_F_main_BB__crit_edge73i_596:
		next_state = LEGUP_F_main_BB__crit_edge73i_597;
LEGUP_F_main_BB__crit_edge73i_597:
		next_state = LEGUP_F_main_BB__crit_edge73i_598;
LEGUP_F_main_BB__crit_edge73i_598:
		next_state = LEGUP_F_main_BB__crit_edge73i_599;
LEGUP_F_main_BB__crit_edge73i_599:
		next_state = LEGUP_F_main_BB__crit_edge73i_600;
LEGUP_F_main_BB__crit_edge73i_600:
		next_state = LEGUP_F_main_BB__crit_edge73i_601;
LEGUP_F_main_BB__crit_edge73i_601:
		next_state = LEGUP_F_main_BB__crit_edge73i_602;
LEGUP_F_main_BB__crit_edge73i_602:
		next_state = LEGUP_F_main_BB__crit_edge73i_603;
LEGUP_F_main_BB__crit_edge73i_603:
		next_state = LEGUP_F_main_BB__crit_edge73i_604;
LEGUP_F_main_BB__crit_edge73i_604:
		next_state = LEGUP_F_main_BB__crit_edge73i_605;
LEGUP_F_main_BB__crit_edge73i_605:
		next_state = LEGUP_F_main_BB__crit_edge73i_606;
LEGUP_F_main_BB__crit_edge73i_606:
		next_state = LEGUP_F_main_BB__crit_edge73i_607;
LEGUP_F_main_BB__crit_edge73i_607:
		next_state = LEGUP_F_main_BB__crit_edge73i_608;
LEGUP_F_main_BB__crit_edge73i_608:
		next_state = LEGUP_F_main_BB__crit_edge73i_609;
LEGUP_F_main_BB__crit_edge73i_609:
		next_state = LEGUP_F_main_BB__crit_edge73i_610;
LEGUP_F_main_BB__crit_edge73i_610:
		next_state = LEGUP_F_main_BB__crit_edge73i_611;
LEGUP_F_main_BB__crit_edge73i_611:
	if ((main__crit_edge73i_435 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge79i_624;
	else if ((main__crit_edge73i_435 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph78i_612;
LEGUP_F_main_BB__crit_edge73iloopexit_578:
		next_state = LEGUP_F_main_BB__crit_edge73i_579;
LEGUP_F_main_BB__crit_edge79i_624:
	if ((main__crit_edge79i_449 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge84i_702;
	else if ((main__crit_edge79i_449 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph83i_625;
LEGUP_F_main_BB__crit_edge79iloopexit_623:
		next_state = LEGUP_F_main_BB__crit_edge79i_624;
LEGUP_F_main_BB__crit_edge84i_702:
		next_state = LEGUP_F_main_BB__crit_edge84i_703;
LEGUP_F_main_BB__crit_edge84i_703:
		next_state = LEGUP_F_main_BB__crit_edge84i_704;
LEGUP_F_main_BB__crit_edge84i_704:
		next_state = LEGUP_F_main_BB__crit_edge84i_705;
LEGUP_F_main_BB__crit_edge84i_705:
		next_state = LEGUP_F_main_BB__crit_edge84i_706;
LEGUP_F_main_BB__crit_edge84i_706:
		next_state = LEGUP_F_main_BB__crit_edge84i_707;
LEGUP_F_main_BB__crit_edge84i_707:
		next_state = LEGUP_F_main_BB__crit_edge84i_708;
LEGUP_F_main_BB__crit_edge84i_708:
		next_state = LEGUP_F_main_BB__crit_edge84i_709;
LEGUP_F_main_BB__crit_edge84i_709:
		next_state = LEGUP_F_main_BB__crit_edge84i_710;
LEGUP_F_main_BB__crit_edge84i_710:
		next_state = LEGUP_F_main_BB__crit_edge84i_711;
LEGUP_F_main_BB__crit_edge84i_711:
		next_state = LEGUP_F_main_BB__crit_edge84i_712;
LEGUP_F_main_BB__crit_edge84i_712:
		next_state = LEGUP_F_main_BB__crit_edge84i_713;
LEGUP_F_main_BB__crit_edge84i_713:
		next_state = LEGUP_F_main_BB__crit_edge84i_714;
LEGUP_F_main_BB__crit_edge84i_714:
		next_state = LEGUP_F_main_BB__crit_edge84i_715;
LEGUP_F_main_BB__crit_edge84i_715:
		next_state = LEGUP_F_main_BB__crit_edge84i_716;
LEGUP_F_main_BB__crit_edge84i_716:
		next_state = LEGUP_F_main_BB__crit_edge84i_717;
LEGUP_F_main_BB__crit_edge84i_717:
		next_state = LEGUP_F_main_BB__crit_edge84i_718;
LEGUP_F_main_BB__crit_edge84i_718:
		next_state = LEGUP_F_main_BB__crit_edge84i_719;
LEGUP_F_main_BB__crit_edge84i_719:
		next_state = LEGUP_F_main_BB__crit_edge84i_720;
LEGUP_F_main_BB__crit_edge84i_720:
		next_state = LEGUP_F_main_BB__crit_edge84i_721;
LEGUP_F_main_BB__crit_edge84i_721:
		next_state = LEGUP_F_main_BB__crit_edge84i_722;
LEGUP_F_main_BB__crit_edge84i_722:
		next_state = LEGUP_F_main_BB__crit_edge84i_723;
LEGUP_F_main_BB__crit_edge84i_723:
		next_state = LEGUP_F_main_BB__crit_edge84i_724;
LEGUP_F_main_BB__crit_edge84i_724:
		next_state = LEGUP_F_main_BB__crit_edge84i_725;
LEGUP_F_main_BB__crit_edge84i_725:
		next_state = LEGUP_F_main_BB__crit_edge84i_726;
LEGUP_F_main_BB__crit_edge84i_726:
		next_state = LEGUP_F_main_BB__crit_edge84i_727;
LEGUP_F_main_BB__crit_edge84i_727:
		next_state = LEGUP_F_main_BB__crit_edge84i_728;
LEGUP_F_main_BB__crit_edge84i_728:
		next_state = LEGUP_F_main_BB__crit_edge84i_729;
LEGUP_F_main_BB__crit_edge84i_729:
		next_state = LEGUP_F_main_BB__crit_edge84i_730;
LEGUP_F_main_BB__crit_edge84i_730:
		next_state = LEGUP_F_main_BB__crit_edge84i_731;
LEGUP_F_main_BB__crit_edge84i_731:
		next_state = LEGUP_F_main_BB__crit_edge84i_732;
LEGUP_F_main_BB__crit_edge84i_732:
		next_state = LEGUP_F_main_BB__crit_edge84i_733;
LEGUP_F_main_BB__crit_edge84i_733:
		next_state = LEGUP_F_main_BB__crit_edge84i_734;
LEGUP_F_main_BB__crit_edge84i_734:
	if ((main__crit_edge84i_519 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge90i_747;
	else if ((main__crit_edge84i_519 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph89i_735;
LEGUP_F_main_BB__crit_edge84iloopexit_701:
		next_state = LEGUP_F_main_BB__crit_edge84i_702;
LEGUP_F_main_BB__crit_edge90i_747:
	if ((main__crit_edge90i_533 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge95i_825;
	else if ((main__crit_edge90i_533 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph94i_748;
LEGUP_F_main_BB__crit_edge90iloopexit_746:
		next_state = LEGUP_F_main_BB__crit_edge90i_747;
LEGUP_F_main_BB__crit_edge95i_825:
		next_state = LEGUP_F_main_BB__crit_edge95i_826;
LEGUP_F_main_BB__crit_edge95i_826:
		next_state = LEGUP_F_main_BB__crit_edge95i_827;
LEGUP_F_main_BB__crit_edge95i_827:
		next_state = LEGUP_F_main_BB__crit_edge95i_828;
LEGUP_F_main_BB__crit_edge95i_828:
		next_state = LEGUP_F_main_BB__crit_edge95i_829;
LEGUP_F_main_BB__crit_edge95i_829:
		next_state = LEGUP_F_main_BB__crit_edge95i_830;
LEGUP_F_main_BB__crit_edge95i_830:
		next_state = LEGUP_F_main_BB__crit_edge95i_831;
LEGUP_F_main_BB__crit_edge95i_831:
		next_state = LEGUP_F_main_BB__crit_edge95i_832;
LEGUP_F_main_BB__crit_edge95i_832:
		next_state = LEGUP_F_main_BB__crit_edge95i_833;
LEGUP_F_main_BB__crit_edge95i_833:
		next_state = LEGUP_F_main_BB__crit_edge95i_834;
LEGUP_F_main_BB__crit_edge95i_834:
		next_state = LEGUP_F_main_BB__crit_edge95i_835;
LEGUP_F_main_BB__crit_edge95i_835:
		next_state = LEGUP_F_main_BB__crit_edge95i_836;
LEGUP_F_main_BB__crit_edge95i_836:
		next_state = LEGUP_F_main_BB__crit_edge95i_837;
LEGUP_F_main_BB__crit_edge95i_837:
		next_state = LEGUP_F_main_BB__crit_edge95i_838;
LEGUP_F_main_BB__crit_edge95i_838:
		next_state = LEGUP_F_main_BB__crit_edge95i_839;
LEGUP_F_main_BB__crit_edge95i_839:
		next_state = LEGUP_F_main_BB__crit_edge95i_840;
LEGUP_F_main_BB__crit_edge95i_840:
		next_state = LEGUP_F_main_BB__crit_edge95i_841;
LEGUP_F_main_BB__crit_edge95i_841:
		next_state = LEGUP_F_main_BB__crit_edge95i_842;
LEGUP_F_main_BB__crit_edge95i_842:
		next_state = LEGUP_F_main_BB__crit_edge95i_843;
LEGUP_F_main_BB__crit_edge95i_843:
		next_state = LEGUP_F_main_BB__crit_edge95i_844;
LEGUP_F_main_BB__crit_edge95i_844:
		next_state = LEGUP_F_main_BB__crit_edge95i_845;
LEGUP_F_main_BB__crit_edge95i_845:
		next_state = LEGUP_F_main_BB__crit_edge95i_846;
LEGUP_F_main_BB__crit_edge95i_846:
		next_state = LEGUP_F_main_BB__crit_edge95i_847;
LEGUP_F_main_BB__crit_edge95i_847:
		next_state = LEGUP_F_main_BB__crit_edge95i_848;
LEGUP_F_main_BB__crit_edge95i_848:
		next_state = LEGUP_F_main_BB__crit_edge95i_849;
LEGUP_F_main_BB__crit_edge95i_849:
		next_state = LEGUP_F_main_BB__crit_edge95i_850;
LEGUP_F_main_BB__crit_edge95i_850:
		next_state = LEGUP_F_main_BB__crit_edge95i_851;
LEGUP_F_main_BB__crit_edge95i_851:
		next_state = LEGUP_F_main_BB__crit_edge95i_852;
LEGUP_F_main_BB__crit_edge95i_852:
		next_state = LEGUP_F_main_BB__crit_edge95i_853;
LEGUP_F_main_BB__crit_edge95i_853:
		next_state = LEGUP_F_main_BB__crit_edge95i_854;
LEGUP_F_main_BB__crit_edge95i_854:
		next_state = LEGUP_F_main_BB__crit_edge95i_855;
LEGUP_F_main_BB__crit_edge95i_855:
		next_state = LEGUP_F_main_BB__crit_edge95i_856;
LEGUP_F_main_BB__crit_edge95i_856:
		next_state = LEGUP_F_main_BB__crit_edge95i_857;
LEGUP_F_main_BB__crit_edge95i_857:
	if ((main__crit_edge95i_603 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge101i_870;
	else if ((main__crit_edge95i_603 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph100i_858;
LEGUP_F_main_BB__crit_edge95iloopexit_824:
		next_state = LEGUP_F_main_BB__crit_edge95i_825;
LEGUP_F_main_BB_loopexit12i_7:
	if ((main_loopexit12i_exitcond147 == 1'd1))
		next_state = LEGUP_F_main_BB_sortexitpreheader_8;
	else if ((main_loopexit12i_exitcond147 == 1'd0))
		next_state = LEGUP_F_main_BB_lrph27i_9;
LEGUP_F_main_BB_loopexit12iloopexit_6:
		next_state = LEGUP_F_main_BB_loopexit12i_7;
LEGUP_F_main_BB_lrph100i_858:
		next_state = LEGUP_F_main_BB__608_859;
LEGUP_F_main_BB_lrph105i_871:
		next_state = LEGUP_F_main_BB__618_872;
LEGUP_F_main_BB_lrph111i_981:
		next_state = LEGUP_F_main_BB__692_982;
LEGUP_F_main_BB_lrph116i_994:
		next_state = LEGUP_F_main_BB__702_995;
LEGUP_F_main_BB_lrph122i_1104:
		next_state = LEGUP_F_main_BB__776_1105;
LEGUP_F_main_BB_lrph128i_1:
		next_state = LEGUP_F_main_BB_lrph128i_2;
LEGUP_F_main_BB_lrph128i_2:
		next_state = LEGUP_F_main_BB_lrph128i_3;
LEGUP_F_main_BB_lrph128i_3:
		next_state = LEGUP_F_main_BB_lrph128i_4;
LEGUP_F_main_BB_lrph128i_4:
	if ((main_lrph128i_exitcond238_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrph27ipreheader_5;
	else if ((main_lrph128i_exitcond238_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph128i_1;
LEGUP_F_main_BB_lrph27i_10:
		next_state = LEGUP_F_main_BB_lrph27i_11;
LEGUP_F_main_BB_lrph27i_11:
		next_state = LEGUP_F_main_BB__31_12;
LEGUP_F_main_BB_lrph27i_9:
		next_state = LEGUP_F_main_BB_lrph27i_10;
LEGUP_F_main_BB_lrph27ipreheader_5:
		next_state = LEGUP_F_main_BB_lrph27i_9;
LEGUP_F_main_BB_lrph34i_121:
		next_state = LEGUP_F_main_BB_lrph34i_122;
LEGUP_F_main_BB_lrph34i_122:
		next_state = LEGUP_F_main_BB_lrph34i_123;
LEGUP_F_main_BB_lrph34i_123:
		next_state = LEGUP_F_main_BB_lrph34i_124;
LEGUP_F_main_BB_lrph34i_124:
	if ((main_lrph34i_109 == 1'd1))
		next_state = LEGUP_F_main_BB__110_125;
	else if ((main_lrph34i_109 == 1'd0))
		next_state = LEGUP_F_main_BB__112_130;
LEGUP_F_main_BB_lrph34ipreheader_120:
		next_state = LEGUP_F_main_BB_lrph34i_121;
LEGUP_F_main_BB_lrph39i_133:
		next_state = LEGUP_F_main_BB__114_134;
LEGUP_F_main_BB_lrph45i_243:
		next_state = LEGUP_F_main_BB__188_244;
LEGUP_F_main_BB_lrph50i_256:
		next_state = LEGUP_F_main_BB__198_257;
LEGUP_F_main_BB_lrph56i_366:
		next_state = LEGUP_F_main_BB__272_367;
LEGUP_F_main_BB_lrph61i_379:
		next_state = LEGUP_F_main_BB__282_380;
LEGUP_F_main_BB_lrph67i_489:
		next_state = LEGUP_F_main_BB__356_490;
LEGUP_F_main_BB_lrph72i_502:
		next_state = LEGUP_F_main_BB__366_503;
LEGUP_F_main_BB_lrph78i_612:
		next_state = LEGUP_F_main_BB__440_613;
LEGUP_F_main_BB_lrph83i_625:
		next_state = LEGUP_F_main_BB__450_626;
LEGUP_F_main_BB_lrph89i_735:
		next_state = LEGUP_F_main_BB__524_736;
LEGUP_F_main_BB_lrph94i_748:
		next_state = LEGUP_F_main_BB__534_749;
LEGUP_F_main_BB_sortexit_1115:
		next_state = LEGUP_F_main_BB_sortexit_1116;
LEGUP_F_main_BB_sortexit_1116:
		next_state = LEGUP_F_main_BB_sortexit_1117;
LEGUP_F_main_BB_sortexit_1117:
	if ((main_sortexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__788_1118;
	else if ((main_sortexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_sortexit_1115;
LEGUP_F_main_BB_sortexitpreheader_8:
		next_state = LEGUP_F_main_BB_sortexit_1115;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %i.0126.i = phi i32 [ %2, %.lr.ph128.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_lrph128i_i0126i = 32'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   %i.0126.i = phi i32 [ %2, %.lr.ph128.i ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrph128i_4) & (memory_controller_waitrequest == 1'd0)) & (main_lrph128i_exitcond238_reg == 1'd0))) */ begin
		main_lrph128i_i0126i = main_lrph128i_2_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph128.i*/
	/*   %i.0126.i = phi i32 [ %2, %.lr.ph128.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_lrph128i_i0126i_reg <= main_lrph128i_i0126i;
		if (start == 1'b0 && ^(main_lrph128i_i0126i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph128i_i0126i_reg"); $finish; end
	end
	/* main: %.lr.ph128.i*/
	/*   %i.0126.i = phi i32 [ %2, %.lr.ph128.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph128i_4) & (memory_controller_waitrequest == 1'd0)) & (main_lrph128i_exitcond238_reg == 1'd0))) begin
		main_lrph128i_i0126i_reg <= main_lrph128i_i0126i;
		if (start == 1'b0 && ^(main_lrph128i_i0126i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph128i_i0126i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %scevgep239 = getelementptr [100 x i32]* @y, i32 0, i32 %i.0126.i*/
		main_lrph128i_scevgep239 = (`TAG_g_y_a + (4 * main_lrph128i_i0126i_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph128.i*/
	/*   %scevgep239 = getelementptr [100 x i32]* @y, i32 0, i32 %i.0126.i*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		main_lrph128i_scevgep239_reg <= main_lrph128i_scevgep239;
		if (start == 1'b0 && ^(main_lrph128i_scevgep239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph128i_scevgep239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %scevgep240 = getelementptr [100 x i32]* @input, i32 0, i32 %i.0126.i*/
		main_lrph128i_scevgep240 = (`TAG_g_input_var0_a + (4 * main_lrph128i_i0126i_reg));
end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %1 = load i32* %scevgep240, align 4, !tbaa !1*/
		main_lrph128i_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %2 = add nsw i32 %i.0126.i, 1*/
		main_lrph128i_2 = (main_lrph128i_i0126i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph128.i*/
	/*   %2 = add nsw i32 %i.0126.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		main_lrph128i_2_reg <= main_lrph128i_2;
		if (start == 1'b0 && ^(main_lrph128i_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph128i_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph128.i*/
	/*   %exitcond238 = icmp eq i32 %2, 100*/
		main_lrph128i_exitcond238 = (main_lrph128i_2 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.lr.ph128.i*/
	/*   %exitcond238 = icmp eq i32 %2, 100*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		main_lrph128i_exitcond238_reg <= main_lrph128i_exitcond238;
		if (start == 1'b0 && ^(main_lrph128i_exitcond238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph128i_exitcond238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit12.i*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_loopexit12i_indvarnext5 = (main_lrph27i_indvar4_reg + 32'd1);
end
always @(*) begin
	/* main: %.loopexit12.i*/
	/*   %exitcond147 = icmp eq i32 %indvar.next5, 11*/
		main_loopexit12i_exitcond147 = (main_loopexit12i_indvarnext5 == 32'd11);
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %indvar4 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next5, %.loopexit12.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27ipreheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph27i_indvar4 = 32'd0;
	end
	/* main: %.lr.ph27.i*/
	/*   %indvar4 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next5, %.loopexit12.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_loopexit12i_7) & (memory_controller_waitrequest == 1'd0)) & (main_loopexit12i_exitcond147 == 1'd0))) */ begin
		main_lrph27i_indvar4 = main_loopexit12i_indvarnext5;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %indvar4 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next5, %.loopexit12.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27ipreheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph27i_indvar4_reg <= main_lrph27i_indvar4;
		if (start == 1'b0 && ^(main_lrph27i_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_indvar4_reg"); $finish; end
	end
	/* main: %.lr.ph27.i*/
	/*   %indvar4 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next5, %.loopexit12.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_loopexit12i_7) & (memory_controller_waitrequest == 1'd0)) & (main_loopexit12i_exitcond147 == 1'd0))) begin
		main_lrph27i_indvar4_reg <= main_lrph27i_indvar4;
		if (start == 1'b0 && ^(main_lrph27i_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	main_lrph27i_i10123i = main_lrph27i_i10123i_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %i1.0123.i = mul i32 %indvar4, 9*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_i10123i_reg <= main_lrph27i_i10123i;
		if (start == 1'b0 && ^(main_lrph27i_i10123i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_i10123i_reg"); $finish; end
	end
	/* main: %.lr.ph27.i*/
	/*   %i1.0123.i = mul i32 %indvar4, 9*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_i10123i_reg <= main_lrph27i_i10123i;
		if (start == 1'b0 && ^(main_lrph27i_i10123i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_i10123i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %3 = add i32 %i1.0123.i, 9*/
		main_lrph27i_3 = (main_lrph27i_i10123i + 32'd9);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %3 = add i32 %i1.0123.i, 9*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_3_reg <= main_lrph27i_3;
		if (start == 1'b0 && ^(main_lrph27i_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %4 = add i32 %i1.0123.i, 10*/
		main_lrph27i_4 = (main_lrph27i_i10123i + 32'd10);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %4 = add i32 %i1.0123.i, 10*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_4_reg <= main_lrph27i_4;
		if (start == 1'b0 && ^(main_lrph27i_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %5 = add i32 %i1.0123.i, 11*/
		main_lrph27i_5 = (main_lrph27i_i10123i + 32'd11);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %5 = add i32 %i1.0123.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_5_reg <= main_lrph27i_5;
		if (start == 1'b0 && ^(main_lrph27i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %6 = add i32 %i1.0123.i, 12*/
		main_lrph27i_6 = (main_lrph27i_i10123i + 32'd12);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %6 = add i32 %i1.0123.i, 12*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_6_reg <= main_lrph27i_6;
		if (start == 1'b0 && ^(main_lrph27i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %7 = add i32 %i1.0123.i, 13*/
		main_lrph27i_7 = (main_lrph27i_i10123i + 32'd13);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %7 = add i32 %i1.0123.i, 13*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_7_reg <= main_lrph27i_7;
		if (start == 1'b0 && ^(main_lrph27i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %8 = add i32 %i1.0123.i, 14*/
		main_lrph27i_8 = (main_lrph27i_i10123i + 32'd14);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %8 = add i32 %i1.0123.i, 14*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_8_reg <= main_lrph27i_8;
		if (start == 1'b0 && ^(main_lrph27i_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %9 = add i32 %i1.0123.i, 15*/
		main_lrph27i_9 = (main_lrph27i_i10123i + 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %9 = add i32 %i1.0123.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_9_reg <= main_lrph27i_9;
		if (start == 1'b0 && ^(main_lrph27i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %10 = add i32 %i1.0123.i, 16*/
		main_lrph27i_10 = (main_lrph27i_i10123i + 32'd16);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %10 = add i32 %i1.0123.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_10_reg <= main_lrph27i_10;
		if (start == 1'b0 && ^(main_lrph27i_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %11 = add i32 %i1.0123.i, 17*/
		main_lrph27i_11 = (main_lrph27i_i10123i + 32'd17);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %11 = add i32 %i1.0123.i, 17*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_11_reg <= main_lrph27i_11;
		if (start == 1'b0 && ^(main_lrph27i_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %12 = add i32 %i1.0123.i, 18*/
		main_lrph27i_12 = (main_lrph27i_i10123i + 32'd18);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %12 = add i32 %i1.0123.i, 18*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_12_reg <= main_lrph27i_12;
		if (start == 1'b0 && ^(main_lrph27i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %13 = add i32 %i1.0123.i, 8*/
		main_lrph27i_13 = (main_lrph27i_i10123i + 32'd8);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %13 = add i32 %i1.0123.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_13_reg <= main_lrph27i_13;
		if (start == 1'b0 && ^(main_lrph27i_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %14 = add i32 %i1.0123.i, 7*/
		main_lrph27i_14 = (main_lrph27i_i10123i + 32'd7);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %14 = add i32 %i1.0123.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_14_reg <= main_lrph27i_14;
		if (start == 1'b0 && ^(main_lrph27i_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %15 = add i32 %i1.0123.i, 6*/
		main_lrph27i_15 = (main_lrph27i_i10123i + 32'd6);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %15 = add i32 %i1.0123.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_15_reg <= main_lrph27i_15;
		if (start == 1'b0 && ^(main_lrph27i_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %16 = add i32 %i1.0123.i, 5*/
		main_lrph27i_16 = (main_lrph27i_i10123i + 32'd5);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %16 = add i32 %i1.0123.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_16_reg <= main_lrph27i_16;
		if (start == 1'b0 && ^(main_lrph27i_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %17 = add i32 %i1.0123.i, 4*/
		main_lrph27i_17 = (main_lrph27i_i10123i + 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %17 = add i32 %i1.0123.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_17_reg <= main_lrph27i_17;
		if (start == 1'b0 && ^(main_lrph27i_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %18 = add i32 %i1.0123.i, 3*/
		main_lrph27i_18 = (main_lrph27i_i10123i + 32'd3);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %18 = add i32 %i1.0123.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_18_reg <= main_lrph27i_18;
		if (start == 1'b0 && ^(main_lrph27i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %19 = add i32 %i1.0123.i, 2*/
		main_lrph27i_19 = (main_lrph27i_i10123i + 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %19 = add i32 %i1.0123.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_19_reg <= main_lrph27i_19;
		if (start == 1'b0 && ^(main_lrph27i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %20 = add i32 %i1.0123.i, 1*/
		main_lrph27i_20 = (main_lrph27i_i10123i + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %20 = add i32 %i1.0123.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_20_reg <= main_lrph27i_20;
		if (start == 1'b0 && ^(main_lrph27i_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep229 = getelementptr [100 x i32]* @y, i32 0, i32 %13*/
		main_lrph27i_scevgep229 = (`TAG_g_y_a + (4 * main_lrph27i_13_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep229 = getelementptr [100 x i32]* @y, i32 0, i32 %13*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep229_reg <= main_lrph27i_scevgep229;
		if (start == 1'b0 && ^(main_lrph27i_scevgep229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep230 = getelementptr [100 x i32]* @y, i32 0, i32 %14*/
		main_lrph27i_scevgep230 = (`TAG_g_y_a + (4 * main_lrph27i_14_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep230 = getelementptr [100 x i32]* @y, i32 0, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep230_reg <= main_lrph27i_scevgep230;
		if (start == 1'b0 && ^(main_lrph27i_scevgep230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep231 = getelementptr [100 x i32]* @y, i32 0, i32 %15*/
		main_lrph27i_scevgep231 = (`TAG_g_y_a + (4 * main_lrph27i_15_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep231 = getelementptr [100 x i32]* @y, i32 0, i32 %15*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep231_reg <= main_lrph27i_scevgep231;
		if (start == 1'b0 && ^(main_lrph27i_scevgep231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep232 = getelementptr [100 x i32]* @y, i32 0, i32 %16*/
		main_lrph27i_scevgep232 = (`TAG_g_y_a + (4 * main_lrph27i_16_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep232 = getelementptr [100 x i32]* @y, i32 0, i32 %16*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep232_reg <= main_lrph27i_scevgep232;
		if (start == 1'b0 && ^(main_lrph27i_scevgep232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep233 = getelementptr [100 x i32]* @y, i32 0, i32 %17*/
		main_lrph27i_scevgep233 = (`TAG_g_y_a + (4 * main_lrph27i_17_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep233 = getelementptr [100 x i32]* @y, i32 0, i32 %17*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep233_reg <= main_lrph27i_scevgep233;
		if (start == 1'b0 && ^(main_lrph27i_scevgep233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep234 = getelementptr [100 x i32]* @y, i32 0, i32 %18*/
		main_lrph27i_scevgep234 = (`TAG_g_y_a + (4 * main_lrph27i_18_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep234 = getelementptr [100 x i32]* @y, i32 0, i32 %18*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep234_reg <= main_lrph27i_scevgep234;
		if (start == 1'b0 && ^(main_lrph27i_scevgep234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep235 = getelementptr [100 x i32]* @y, i32 0, i32 %19*/
		main_lrph27i_scevgep235 = (`TAG_g_y_a + (4 * main_lrph27i_19_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep235 = getelementptr [100 x i32]* @y, i32 0, i32 %19*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep235_reg <= main_lrph27i_scevgep235;
		if (start == 1'b0 && ^(main_lrph27i_scevgep235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep235_reg"); $finish; end
	end
end
always @(*) begin
	main_lrph27i_21 = main_lrph27i_21_stage0_reg;
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %22 = add i32 %21, 91*/
		main_lrph27i_22 = (main_lrph27i_21 + 32'd91);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %22 = add i32 %21, 91*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_22_reg <= main_lrph27i_22;
		if (start == 1'b0 && ^(main_lrph27i_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %23 = add i32 %21, 92*/
		main_lrph27i_23 = (main_lrph27i_21 + 32'd92);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %23 = add i32 %21, 92*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_23_reg <= main_lrph27i_23;
		if (start == 1'b0 && ^(main_lrph27i_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %24 = add i32 %21, 93*/
		main_lrph27i_24 = (main_lrph27i_21 + 32'd93);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %24 = add i32 %21, 93*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_24_reg <= main_lrph27i_24;
		if (start == 1'b0 && ^(main_lrph27i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %25 = add i32 %21, 94*/
		main_lrph27i_25 = (main_lrph27i_21 + 32'd94);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %25 = add i32 %21, 94*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_25_reg <= main_lrph27i_25;
		if (start == 1'b0 && ^(main_lrph27i_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %26 = add i32 %21, 95*/
		main_lrph27i_26 = (main_lrph27i_21 + 32'd95);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %26 = add i32 %21, 95*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_26_reg <= main_lrph27i_26;
		if (start == 1'b0 && ^(main_lrph27i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %27 = add i32 %21, 96*/
		main_lrph27i_27 = (main_lrph27i_21 + 32'd96);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %27 = add i32 %21, 96*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_27_reg <= main_lrph27i_27;
		if (start == 1'b0 && ^(main_lrph27i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %28 = add i32 %21, 97*/
		main_lrph27i_28 = (main_lrph27i_21 + 32'd97);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %28 = add i32 %21, 97*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_28_reg <= main_lrph27i_28;
		if (start == 1'b0 && ^(main_lrph27i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %29 = add i32 %21, 98*/
		main_lrph27i_29 = (main_lrph27i_21 + 32'd98);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %29 = add i32 %21, 98*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_29_reg <= main_lrph27i_29;
		if (start == 1'b0 && ^(main_lrph27i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %30 = add i32 %21, 99*/
		main_lrph27i_30 = (main_lrph27i_21 + 32'd99);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %30 = add i32 %21, 99*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_30_reg <= main_lrph27i_30;
		if (start == 1'b0 && ^(main_lrph27i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep236 = getelementptr [100 x i32]* @y, i32 0, i32 %i1.0123.i*/
		main_lrph27i_scevgep236 = (`TAG_g_y_a + (4 * main_lrph27i_i10123i));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep236 = getelementptr [100 x i32]* @y, i32 0, i32 %i1.0123.i*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_10)) begin
		main_lrph27i_scevgep236_reg <= main_lrph27i_scevgep236;
		if (start == 1'b0 && ^(main_lrph27i_scevgep236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep237 = getelementptr [100 x i32]* @y, i32 0, i32 %20*/
		main_lrph27i_scevgep237 = (`TAG_g_y_a + (4 * main_lrph27i_20_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep237 = getelementptr [100 x i32]* @y, i32 0, i32 %20*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_11)) begin
		main_lrph27i_scevgep237_reg <= main_lrph27i_scevgep237;
		if (start == 1'b0 && ^(main_lrph27i_scevgep237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %indvar = phi i32 [ %indvar.next, %96 ], [ 0, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_31_indvar = 32'd0;
	end
	/* main: %31*/
	/*   %indvar = phi i32 [ %indvar.next, %96 ], [ 0, %.lr.ph27.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__96_86) & (memory_controller_waitrequest == 1'd0)) & (main_96_97 == 1'd0))) */ begin
		main_31_indvar = main_96_indvarnext;
	end
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %indvar = phi i32 [ %indvar.next, %96 ], [ 0, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_31_indvar_reg <= main_31_indvar;
		if (start == 1'b0 && ^(main_31_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_indvar_reg"); $finish; end
	end
	/* main: %31*/
	/*   %indvar = phi i32 [ %indvar.next, %96 ], [ 0, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__96_86) & (memory_controller_waitrequest == 1'd0)) & (main_96_97 == 1'd0))) begin
		main_31_indvar_reg <= main_31_indvar;
		if (start == 1'b0 && ^(main_31_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %position.024.i = phi i32 [ %position.9.i, %96 ], [ %i1.0123.i, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_31_position024i = main_lrph27i_i10123i_reg;
	end
	/* main: %31*/
	/*   %position.024.i = phi i32 [ %position.9.i, %96 ], [ %i1.0123.i, %.lr.ph27.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__96_86) & (memory_controller_waitrequest == 1'd0)) & (main_96_97 == 1'd0))) */ begin
		main_31_position024i = main_96_position9i_reg;
	end
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %position.024.i = phi i32 [ %position.9.i, %96 ], [ %i1.0123.i, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_31_position024i_reg <= main_31_position024i;
		if (start == 1'b0 && ^(main_31_position024i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_position024i_reg"); $finish; end
	end
	/* main: %31*/
	/*   %position.024.i = phi i32 [ %position.9.i, %96 ], [ %i1.0123.i, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__96_86) & (memory_controller_waitrequest == 1'd0)) & (main_96_97 == 1'd0))) begin
		main_31_position024i_reg <= main_31_position024i;
		if (start == 1'b0 && ^(main_31_position024i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_position024i_reg"); $finish; end
	end
end
always @(*) begin
	main_31_32 = main_31_32_stage0_reg;
end
always @(*) begin
	/* main: %31*/
	/*   %d2.025.i = add i32 %20, %32*/
		main_31_d2025i = (main_lrph27i_20_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %d2.025.i = add i32 %20, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_d2025i_reg <= main_31_d2025i;
		if (start == 1'b0 && ^(main_31_d2025i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_d2025i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep14 = getelementptr [100 x i32]* @y, i32 0, i32 %d2.025.i*/
		main_31_scevgep14 = (`TAG_g_y_a + (4 * main_31_d2025i_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep14 = getelementptr [100 x i32]* @y, i32 0, i32 %d2.025.i*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep14_reg <= main_31_scevgep14;
		if (start == 1'b0 && ^(main_31_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %33 = add i32 %19, %32*/
		main_31_33 = (main_lrph27i_19_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %33 = add i32 %19, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_33_reg <= main_31_33;
		if (start == 1'b0 && ^(main_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep13 = getelementptr [100 x i32]* @y, i32 0, i32 %33*/
		main_31_scevgep13 = (`TAG_g_y_a + (4 * main_31_33_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep13 = getelementptr [100 x i32]* @y, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep13_reg <= main_31_scevgep13;
		if (start == 1'b0 && ^(main_31_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %34 = add i32 %18, %32*/
		main_31_34 = (main_lrph27i_18_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %34 = add i32 %18, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_34_reg <= main_31_34;
		if (start == 1'b0 && ^(main_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep12 = getelementptr [100 x i32]* @y, i32 0, i32 %34*/
		main_31_scevgep12 = (`TAG_g_y_a + (4 * main_31_34_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep12 = getelementptr [100 x i32]* @y, i32 0, i32 %34*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep12_reg <= main_31_scevgep12;
		if (start == 1'b0 && ^(main_31_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %35 = add i32 %17, %32*/
		main_31_35 = (main_lrph27i_17_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %35 = add i32 %17, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_35_reg <= main_31_35;
		if (start == 1'b0 && ^(main_31_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep11 = getelementptr [100 x i32]* @y, i32 0, i32 %35*/
		main_31_scevgep11 = (`TAG_g_y_a + (4 * main_31_35_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep11 = getelementptr [100 x i32]* @y, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep11_reg <= main_31_scevgep11;
		if (start == 1'b0 && ^(main_31_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %36 = add i32 %16, %32*/
		main_31_36 = (main_lrph27i_16_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %36 = add i32 %16, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_36_reg <= main_31_36;
		if (start == 1'b0 && ^(main_31_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep10 = getelementptr [100 x i32]* @y, i32 0, i32 %36*/
		main_31_scevgep10 = (`TAG_g_y_a + (4 * main_31_36_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep10 = getelementptr [100 x i32]* @y, i32 0, i32 %36*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep10_reg <= main_31_scevgep10;
		if (start == 1'b0 && ^(main_31_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %37 = add i32 %15, %32*/
		main_31_37 = (main_lrph27i_15_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %37 = add i32 %15, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_37_reg <= main_31_37;
		if (start == 1'b0 && ^(main_31_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep9 = getelementptr [100 x i32]* @y, i32 0, i32 %37*/
		main_31_scevgep9 = (`TAG_g_y_a + (4 * main_31_37_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep9 = getelementptr [100 x i32]* @y, i32 0, i32 %37*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep9_reg <= main_31_scevgep9;
		if (start == 1'b0 && ^(main_31_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %38 = add i32 %14, %32*/
		main_31_38 = (main_lrph27i_14_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %38 = add i32 %14, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_38_reg <= main_31_38;
		if (start == 1'b0 && ^(main_31_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep8 = getelementptr [100 x i32]* @y, i32 0, i32 %38*/
		main_31_scevgep8 = (`TAG_g_y_a + (4 * main_31_38_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep8 = getelementptr [100 x i32]* @y, i32 0, i32 %38*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep8_reg <= main_31_scevgep8;
		if (start == 1'b0 && ^(main_31_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %39 = add i32 %13, %32*/
		main_31_39 = (main_lrph27i_13_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %39 = add i32 %13, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_39_reg <= main_31_39;
		if (start == 1'b0 && ^(main_31_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep7 = getelementptr [100 x i32]* @y, i32 0, i32 %39*/
		main_31_scevgep7 = (`TAG_g_y_a + (4 * main_31_39_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep7 = getelementptr [100 x i32]* @y, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep7_reg <= main_31_scevgep7;
		if (start == 1'b0 && ^(main_31_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %40 = add i32 %3, %32*/
		main_31_40 = (main_lrph27i_3_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %40 = add i32 %3, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_40_reg <= main_31_40;
		if (start == 1'b0 && ^(main_31_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %scevgep6 = getelementptr [100 x i32]* @y, i32 0, i32 %40*/
		main_31_scevgep6 = (`TAG_g_y_a + (4 * main_31_40_reg));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %scevgep6 = getelementptr [100 x i32]* @y, i32 0, i32 %40*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_scevgep6_reg <= main_31_scevgep6;
		if (start == 1'b0 && ^(main_31_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %41 = add i32 %4, %32*/
		main_31_41 = (main_lrph27i_4_reg + main_31_32);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %41 = add i32 %4, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_13)) begin
		main_31_41_reg <= main_31_41;
		if (start == 1'b0 && ^(main_31_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %42 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.024.i*/
		main_31_42 = (`TAG_g_y_a + (4 * main_31_position024i_reg));
end
always @(*) begin
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
		main_31_43 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		main_31_43_reg <= main_31_43;
		if (start == 1'b0 && ^(main_31_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
		main_31_44 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_16)) begin
		main_31_44_reg <= main_31_44;
		if (start == 1'b0 && ^(main_31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %45 = icmp sgt i32 %43, %44*/
		main_31_45 = ($signed(main_31_43_reg) > $signed(main_31_44));
end
always @(*) begin
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_46_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %49 = phi i32 [ %47, %46 ], [ %43, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB__31_16) & (memory_controller_waitrequest == 1'd0)) & (main_31_45 == 1'd0))) begin
		main_48_49 = main_31_43_reg;
	end
	/* main: %48*/
	/*   %49 = phi i32 [ %47, %46 ], [ %43, %31 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__46_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_48_49 = main_46_47_reg;
	end
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %49 = phi i32 [ %47, %46 ], [ %43, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB__31_16) & (memory_controller_waitrequest == 1'd0)) & (main_31_45 == 1'd0))) begin
		main_48_49_reg <= main_48_49;
		if (start == 1'b0 && ^(main_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_49_reg"); $finish; end
	end
	/* main: %48*/
	/*   %49 = phi i32 [ %47, %46 ], [ %43, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__46_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_48_49_reg <= main_48_49;
		if (start == 1'b0 && ^(main_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %position.1.i = phi i32 [ %d2.025.i, %46 ], [ %position.024.i, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB__31_16) & (memory_controller_waitrequest == 1'd0)) & (main_31_45 == 1'd0))) begin
		main_48_position1i = main_31_position024i_reg;
	end
	/* main: %48*/
	/*   %position.1.i = phi i32 [ %d2.025.i, %46 ], [ %position.024.i, %31 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__46_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_48_position1i = main_31_d2025i_reg;
	end
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %position.1.i = phi i32 [ %d2.025.i, %46 ], [ %position.024.i, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB__31_16) & (memory_controller_waitrequest == 1'd0)) & (main_31_45 == 1'd0))) begin
		main_48_position1i_reg <= main_48_position1i;
		if (start == 1'b0 && ^(main_48_position1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_position1i_reg"); $finish; end
	end
	/* main: %48*/
	/*   %position.1.i = phi i32 [ %d2.025.i, %46 ], [ %position.024.i, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__46_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_48_position1i_reg <= main_48_position1i;
		if (start == 1'b0 && ^(main_48_position1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_position1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
		main_48_50 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__48_24)) begin
		main_48_50_reg <= main_48_50;
		if (start == 1'b0 && ^(main_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %51 = icmp sgt i32 %49, %50*/
		main_48_51 = ($signed(main_48_49_reg) > $signed(main_48_50));
end
always @(*) begin
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_52_53 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %55 = phi i32 [ %53, %52 ], [ %49, %48 ]*/
	if ((((cur_state == LEGUP_F_main_BB__48_24) & (memory_controller_waitrequest == 1'd0)) & (main_48_51 == 1'd0))) begin
		main_54_55 = main_48_49_reg;
	end
	/* main: %54*/
	/*   %55 = phi i32 [ %53, %52 ], [ %49, %48 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__52_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_54_55 = main_52_53_reg;
	end
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %55 = phi i32 [ %53, %52 ], [ %49, %48 ]*/
	if ((((cur_state == LEGUP_F_main_BB__48_24) & (memory_controller_waitrequest == 1'd0)) & (main_48_51 == 1'd0))) begin
		main_54_55_reg <= main_54_55;
		if (start == 1'b0 && ^(main_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_55_reg"); $finish; end
	end
	/* main: %54*/
	/*   %55 = phi i32 [ %53, %52 ], [ %49, %48 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_54_55_reg <= main_54_55;
		if (start == 1'b0 && ^(main_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %position.2.i = phi i32 [ %33, %52 ], [ %position.1.i, %48 ]*/
	if ((((cur_state == LEGUP_F_main_BB__48_24) & (memory_controller_waitrequest == 1'd0)) & (main_48_51 == 1'd0))) begin
		main_54_position2i = main_48_position1i_reg;
	end
	/* main: %54*/
	/*   %position.2.i = phi i32 [ %33, %52 ], [ %position.1.i, %48 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__52_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_54_position2i = main_31_33_reg;
	end
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %position.2.i = phi i32 [ %33, %52 ], [ %position.1.i, %48 ]*/
	if ((((cur_state == LEGUP_F_main_BB__48_24) & (memory_controller_waitrequest == 1'd0)) & (main_48_51 == 1'd0))) begin
		main_54_position2i_reg <= main_54_position2i;
		if (start == 1'b0 && ^(main_54_position2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_position2i_reg"); $finish; end
	end
	/* main: %54*/
	/*   %position.2.i = phi i32 [ %33, %52 ], [ %position.1.i, %48 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_54_position2i_reg <= main_54_position2i;
		if (start == 1'b0 && ^(main_54_position2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_position2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_54_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__54_32)) begin
		main_54_56_reg <= main_54_56;
		if (start == 1'b0 && ^(main_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %57 = icmp sgt i32 %55, %56*/
		main_54_57 = ($signed(main_54_55_reg) > $signed(main_54_56));
end
always @(*) begin
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_58_59 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		main_58_59_reg <= main_58_59;
		if (start == 1'b0 && ^(main_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %61 = phi i32 [ %59, %58 ], [ %55, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_32) & (memory_controller_waitrequest == 1'd0)) & (main_54_57 == 1'd0))) begin
		main_60_61 = main_54_55_reg;
	end
	/* main: %60*/
	/*   %61 = phi i32 [ %59, %58 ], [ %55, %54 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__58_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_60_61 = main_58_59_reg;
	end
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %61 = phi i32 [ %59, %58 ], [ %55, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_32) & (memory_controller_waitrequest == 1'd0)) & (main_54_57 == 1'd0))) begin
		main_60_61_reg <= main_60_61;
		if (start == 1'b0 && ^(main_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_61_reg"); $finish; end
	end
	/* main: %60*/
	/*   %61 = phi i32 [ %59, %58 ], [ %55, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__58_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_60_61_reg <= main_60_61;
		if (start == 1'b0 && ^(main_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %position.3.i = phi i32 [ %34, %58 ], [ %position.2.i, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_32) & (memory_controller_waitrequest == 1'd0)) & (main_54_57 == 1'd0))) begin
		main_60_position3i = main_54_position2i_reg;
	end
	/* main: %60*/
	/*   %position.3.i = phi i32 [ %34, %58 ], [ %position.2.i, %54 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__58_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_60_position3i = main_31_34_reg;
	end
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %position.3.i = phi i32 [ %34, %58 ], [ %position.2.i, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_32) & (memory_controller_waitrequest == 1'd0)) & (main_54_57 == 1'd0))) begin
		main_60_position3i_reg <= main_60_position3i;
		if (start == 1'b0 && ^(main_60_position3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_position3i_reg"); $finish; end
	end
	/* main: %60*/
	/*   %position.3.i = phi i32 [ %34, %58 ], [ %position.2.i, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__58_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_60_position3i_reg <= main_60_position3i;
		if (start == 1'b0 && ^(main_60_position3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_position3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_60_62 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__60_40)) begin
		main_60_62_reg <= main_60_62;
		if (start == 1'b0 && ^(main_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %63 = icmp sgt i32 %61, %62*/
		main_60_63 = ($signed(main_60_61_reg) > $signed(main_60_62));
end
always @(*) begin
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_64_65 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		main_64_65_reg <= main_64_65;
		if (start == 1'b0 && ^(main_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_64_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %67 = phi i32 [ %65, %64 ], [ %61, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB__60_40) & (memory_controller_waitrequest == 1'd0)) & (main_60_63 == 1'd0))) begin
		main_66_67 = main_60_61_reg;
	end
	/* main: %66*/
	/*   %67 = phi i32 [ %65, %64 ], [ %61, %60 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__64_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_66_67 = main_64_65_reg;
	end
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %67 = phi i32 [ %65, %64 ], [ %61, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB__60_40) & (memory_controller_waitrequest == 1'd0)) & (main_60_63 == 1'd0))) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
	/* main: %66*/
	/*   %67 = phi i32 [ %65, %64 ], [ %61, %60 ]*/
	if (((cur_state == LEGUP_F_main_BB__64_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %position.4.i = phi i32 [ %35, %64 ], [ %position.3.i, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB__60_40) & (memory_controller_waitrequest == 1'd0)) & (main_60_63 == 1'd0))) begin
		main_66_position4i = main_60_position3i_reg;
	end
	/* main: %66*/
	/*   %position.4.i = phi i32 [ %35, %64 ], [ %position.3.i, %60 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__64_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_66_position4i = main_31_35_reg;
	end
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %position.4.i = phi i32 [ %35, %64 ], [ %position.3.i, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB__60_40) & (memory_controller_waitrequest == 1'd0)) & (main_60_63 == 1'd0))) begin
		main_66_position4i_reg <= main_66_position4i;
		if (start == 1'b0 && ^(main_66_position4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_position4i_reg"); $finish; end
	end
	/* main: %66*/
	/*   %position.4.i = phi i32 [ %35, %64 ], [ %position.3.i, %60 ]*/
	if (((cur_state == LEGUP_F_main_BB__64_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_66_position4i_reg <= main_66_position4i;
		if (start == 1'b0 && ^(main_66_position4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_position4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
		main_66_68 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_48)) begin
		main_66_68_reg <= main_66_68;
		if (start == 1'b0 && ^(main_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %69 = icmp sgt i32 %67, %68*/
		main_66_69 = ($signed(main_66_67_reg) > $signed(main_66_68));
end
always @(*) begin
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_70_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		main_70_71_reg <= main_70_71;
		if (start == 1'b0 && ^(main_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_70_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %73 = phi i32 [ %71, %70 ], [ %67, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_48) & (memory_controller_waitrequest == 1'd0)) & (main_66_69 == 1'd0))) begin
		main_72_73 = main_66_67_reg;
	end
	/* main: %72*/
	/*   %73 = phi i32 [ %71, %70 ], [ %67, %66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__70_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_72_73 = main_70_71_reg;
	end
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %73 = phi i32 [ %71, %70 ], [ %67, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_48) & (memory_controller_waitrequest == 1'd0)) & (main_66_69 == 1'd0))) begin
		main_72_73_reg <= main_72_73;
		if (start == 1'b0 && ^(main_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_73_reg"); $finish; end
	end
	/* main: %72*/
	/*   %73 = phi i32 [ %71, %70 ], [ %67, %66 ]*/
	if (((cur_state == LEGUP_F_main_BB__70_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_72_73_reg <= main_72_73;
		if (start == 1'b0 && ^(main_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %position.5.i = phi i32 [ %36, %70 ], [ %position.4.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_48) & (memory_controller_waitrequest == 1'd0)) & (main_66_69 == 1'd0))) begin
		main_72_position5i = main_66_position4i_reg;
	end
	/* main: %72*/
	/*   %position.5.i = phi i32 [ %36, %70 ], [ %position.4.i, %66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__70_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_72_position5i = main_31_36_reg;
	end
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %position.5.i = phi i32 [ %36, %70 ], [ %position.4.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_48) & (memory_controller_waitrequest == 1'd0)) & (main_66_69 == 1'd0))) begin
		main_72_position5i_reg <= main_72_position5i;
		if (start == 1'b0 && ^(main_72_position5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_position5i_reg"); $finish; end
	end
	/* main: %72*/
	/*   %position.5.i = phi i32 [ %36, %70 ], [ %position.4.i, %66 ]*/
	if (((cur_state == LEGUP_F_main_BB__70_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_72_position5i_reg <= main_72_position5i;
		if (start == 1'b0 && ^(main_72_position5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_position5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
		main_72_74 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__72_56)) begin
		main_72_74_reg <= main_72_74;
		if (start == 1'b0 && ^(main_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %75 = icmp sgt i32 %73, %74*/
		main_72_75 = ($signed(main_72_73_reg) > $signed(main_72_74));
end
always @(*) begin
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_76_77 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %79 = phi i32 [ %77, %76 ], [ %73, %72 ]*/
	if ((((cur_state == LEGUP_F_main_BB__72_56) & (memory_controller_waitrequest == 1'd0)) & (main_72_75 == 1'd0))) begin
		main_78_79 = main_72_73_reg;
	end
	/* main: %78*/
	/*   %79 = phi i32 [ %77, %76 ], [ %73, %72 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_78_79 = main_76_77_reg;
	end
end
always @(posedge clk) begin
	/* main: %78*/
	/*   %79 = phi i32 [ %77, %76 ], [ %73, %72 ]*/
	if ((((cur_state == LEGUP_F_main_BB__72_56) & (memory_controller_waitrequest == 1'd0)) & (main_72_75 == 1'd0))) begin
		main_78_79_reg <= main_78_79;
		if (start == 1'b0 && ^(main_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_79_reg"); $finish; end
	end
	/* main: %78*/
	/*   %79 = phi i32 [ %77, %76 ], [ %73, %72 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_78_79_reg <= main_78_79;
		if (start == 1'b0 && ^(main_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %position.6.i = phi i32 [ %37, %76 ], [ %position.5.i, %72 ]*/
	if ((((cur_state == LEGUP_F_main_BB__72_56) & (memory_controller_waitrequest == 1'd0)) & (main_72_75 == 1'd0))) begin
		main_78_position6i = main_72_position5i_reg;
	end
	/* main: %78*/
	/*   %position.6.i = phi i32 [ %37, %76 ], [ %position.5.i, %72 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_78_position6i = main_31_37_reg;
	end
end
always @(posedge clk) begin
	/* main: %78*/
	/*   %position.6.i = phi i32 [ %37, %76 ], [ %position.5.i, %72 ]*/
	if ((((cur_state == LEGUP_F_main_BB__72_56) & (memory_controller_waitrequest == 1'd0)) & (main_72_75 == 1'd0))) begin
		main_78_position6i_reg <= main_78_position6i;
		if (start == 1'b0 && ^(main_78_position6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_position6i_reg"); $finish; end
	end
	/* main: %78*/
	/*   %position.6.i = phi i32 [ %37, %76 ], [ %position.5.i, %72 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_78_position6i_reg <= main_78_position6i;
		if (start == 1'b0 && ^(main_78_position6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_position6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_78_80 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_64)) begin
		main_78_80_reg <= main_78_80;
		if (start == 1'b0 && ^(main_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %81 = icmp sgt i32 %79, %80*/
		main_78_81 = ($signed(main_78_79_reg) > $signed(main_78_80));
end
always @(*) begin
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_82_83 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %85 = phi i32 [ %83, %82 ], [ %79, %78 ]*/
	if ((((cur_state == LEGUP_F_main_BB__78_64) & (memory_controller_waitrequest == 1'd0)) & (main_78_81 == 1'd0))) begin
		main_84_85 = main_78_79_reg;
	end
	/* main: %84*/
	/*   %85 = phi i32 [ %83, %82 ], [ %79, %78 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__82_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_84_85 = main_82_83_reg;
	end
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %85 = phi i32 [ %83, %82 ], [ %79, %78 ]*/
	if ((((cur_state == LEGUP_F_main_BB__78_64) & (memory_controller_waitrequest == 1'd0)) & (main_78_81 == 1'd0))) begin
		main_84_85_reg <= main_84_85;
		if (start == 1'b0 && ^(main_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_85_reg"); $finish; end
	end
	/* main: %84*/
	/*   %85 = phi i32 [ %83, %82 ], [ %79, %78 ]*/
	if (((cur_state == LEGUP_F_main_BB__82_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_84_85_reg <= main_84_85;
		if (start == 1'b0 && ^(main_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %position.7.i = phi i32 [ %38, %82 ], [ %position.6.i, %78 ]*/
	if ((((cur_state == LEGUP_F_main_BB__78_64) & (memory_controller_waitrequest == 1'd0)) & (main_78_81 == 1'd0))) begin
		main_84_position7i = main_78_position6i_reg;
	end
	/* main: %84*/
	/*   %position.7.i = phi i32 [ %38, %82 ], [ %position.6.i, %78 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__82_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_84_position7i = main_31_38_reg;
	end
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %position.7.i = phi i32 [ %38, %82 ], [ %position.6.i, %78 ]*/
	if ((((cur_state == LEGUP_F_main_BB__78_64) & (memory_controller_waitrequest == 1'd0)) & (main_78_81 == 1'd0))) begin
		main_84_position7i_reg <= main_84_position7i;
		if (start == 1'b0 && ^(main_84_position7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_position7i_reg"); $finish; end
	end
	/* main: %84*/
	/*   %position.7.i = phi i32 [ %38, %82 ], [ %position.6.i, %78 ]*/
	if (((cur_state == LEGUP_F_main_BB__82_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_84_position7i_reg <= main_84_position7i;
		if (start == 1'b0 && ^(main_84_position7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_position7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
		main_84_86 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_72)) begin
		main_84_86_reg <= main_84_86;
		if (start == 1'b0 && ^(main_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %87 = icmp sgt i32 %85, %86*/
		main_84_87 = ($signed(main_84_85_reg) > $signed(main_84_86));
end
always @(*) begin
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_88_89 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = phi i32 [ %89, %88 ], [ %85, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_72) & (memory_controller_waitrequest == 1'd0)) & (main_84_87 == 1'd0))) begin
		main_90_91 = main_84_85_reg;
	end
	/* main: %90*/
	/*   %91 = phi i32 [ %89, %88 ], [ %85, %84 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__88_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_90_91 = main_88_89_reg;
	end
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %91 = phi i32 [ %89, %88 ], [ %85, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_72) & (memory_controller_waitrequest == 1'd0)) & (main_84_87 == 1'd0))) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
	/* main: %90*/
	/*   %91 = phi i32 [ %89, %88 ], [ %85, %84 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %position.8.i = phi i32 [ %39, %88 ], [ %position.7.i, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_72) & (memory_controller_waitrequest == 1'd0)) & (main_84_87 == 1'd0))) begin
		main_90_position8i = main_84_position7i_reg;
	end
	/* main: %90*/
	/*   %position.8.i = phi i32 [ %39, %88 ], [ %position.7.i, %84 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__88_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_90_position8i = main_31_39_reg;
	end
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %position.8.i = phi i32 [ %39, %88 ], [ %position.7.i, %84 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_72) & (memory_controller_waitrequest == 1'd0)) & (main_84_87 == 1'd0))) begin
		main_90_position8i_reg <= main_90_position8i;
		if (start == 1'b0 && ^(main_90_position8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_position8i_reg"); $finish; end
	end
	/* main: %90*/
	/*   %position.8.i = phi i32 [ %39, %88 ], [ %position.7.i, %84 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_90_position8i_reg <= main_90_position8i;
		if (start == 1'b0 && ^(main_90_position8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_position8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
		main_90_92 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_80)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %93 = icmp sgt i32 %91, %92*/
		main_90_93 = ($signed(main_90_91_reg) > $signed(main_90_92));
end
always @(*) begin
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_94_95 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		main_94_95_reg <= main_94_95;
		if (start == 1'b0 && ^(main_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %position.9.i = phi i32 [ %40, %94 ], [ %position.8.i, %90 ]*/
	if ((((cur_state == LEGUP_F_main_BB__90_80) & (memory_controller_waitrequest == 1'd0)) & (main_90_93 == 1'd0))) begin
		main_96_position9i = main_90_position8i_reg;
	end
	/* main: %96*/
	/*   %position.9.i = phi i32 [ %40, %94 ], [ %position.8.i, %90 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__94_85) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_96_position9i = main_31_40_reg;
	end
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %position.9.i = phi i32 [ %40, %94 ], [ %position.8.i, %90 ]*/
	if ((((cur_state == LEGUP_F_main_BB__90_80) & (memory_controller_waitrequest == 1'd0)) & (main_90_93 == 1'd0))) begin
		main_96_position9i_reg <= main_96_position9i;
		if (start == 1'b0 && ^(main_96_position9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_position9i_reg"); $finish; end
	end
	/* main: %96*/
	/*   %position.9.i = phi i32 [ %40, %94 ], [ %position.8.i, %90 ]*/
	if (((cur_state == LEGUP_F_main_BB__94_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_position9i_reg <= main_96_position9i;
		if (start == 1'b0 && ^(main_96_position9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_position9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %97 = icmp sgt i32 %41, 91*/
		main_96_97 = ($signed(main_31_41_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %96*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_96_indvarnext = (main_31_indvar_reg + 32'd1);
end
always @(*) begin
	main__crit_edge28i_98 = main_signed_modulus_32_0;
end
always @(posedge clk) begin
	/* main: %._crit_edge28.i*/
	/*   %98 = srem i32 %30, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge28i_119)) begin
		main__crit_edge28i_98_reg <= main__crit_edge28i_98;
		if (start == 1'b0 && ^(main__crit_edge28i_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge28.i*/
	/*   %98 = srem i32 %30, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge28i_119)) begin
		main__crit_edge28i_98_reg <= main__crit_edge28i_98;
		if (start == 1'b0 && ^(main__crit_edge28i_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge62.i*/
	/*   %349 = srem i32 %27, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge62i_488)) begin
		main__crit_edge28i_98_reg <= main__crit_edge62i_349;
		if (start == 1'b0 && ^(main__crit_edge62i_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge40.i*/
	/*   %181 = srem i32 %29, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge40i_242)) begin
		main__crit_edge28i_98_reg <= main__crit_edge40i_181;
		if (start == 1'b0 && ^(main__crit_edge40i_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge51.i*/
	/*   %265 = srem i32 %28, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge51i_365)) begin
		main__crit_edge28i_98_reg <= main__crit_edge51i_265;
		if (start == 1'b0 && ^(main__crit_edge51i_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge106.i*/
	/*   %685 = srem i32 %23, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge106i_980)) begin
		main__crit_edge28i_98_reg <= main__crit_edge106i_685;
		if (start == 1'b0 && ^(main__crit_edge106i_685) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge117.i*/
	/*   %769 = srem i32 %22, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge117i_1103)) begin
		main__crit_edge28i_98_reg <= main__crit_edge117i_769;
		if (start == 1'b0 && ^(main__crit_edge117i_769) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge73.i*/
	/*   %433 = srem i32 %26, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge73i_611)) begin
		main__crit_edge28i_98_reg <= main__crit_edge73i_433;
		if (start == 1'b0 && ^(main__crit_edge73i_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge84.i*/
	/*   %517 = srem i32 %25, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge84i_734)) begin
		main__crit_edge28i_98_reg <= main__crit_edge84i_517;
		if (start == 1'b0 && ^(main__crit_edge84i_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
	/* main: %._crit_edge95.i*/
	/*   %601 = srem i32 %24, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge95i_857)) begin
		main__crit_edge28i_98_reg <= main__crit_edge95i_601;
		if (start == 1'b0 && ^(main__crit_edge95i_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge28i_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge28.i*/
	/*   %99 = sub nsw i32 100, %98*/
		main__crit_edge28i_99 = (32'd100 - main__crit_edge28i_98);
end
always @(*) begin
	/* main: %._crit_edge28.i*/
	/*   %100 = icmp sgt i32 %99, 99*/
		main__crit_edge28i_100 = ($signed(main__crit_edge28i_99) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %101 = add i32 %98, -99*/
		main_lrph34ipreheader_101 = (main__crit_edge28i_98_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %102 = sub i32 100, %98*/
		main_lrph34ipreheader_102 = (32'd100 - main__crit_edge28i_98_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %102 = sub i32 100, %98*/
	if ((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120)) begin
		main_lrph34ipreheader_102_reg <= main_lrph34ipreheader_102;
		if (start == 1'b0 && ^(main_lrph34ipreheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34ipreheader_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %103 = icmp sgt i32 %102, 99*/
		main_lrph34ipreheader_103 = ($signed(main_lrph34ipreheader_102) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %smax = select i1 %103, i32 %102, i32 99*/
		main_lrph34ipreheader_smax = (main_lrph34ipreheader_103 ? main_lrph34ipreheader_102 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %104 = add i32 %101, %smax*/
		main_lrph34ipreheader_104 = (main_lrph34ipreheader_101 + main_lrph34ipreheader_smax);
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i.preheader*/
	/*   %104 = add i32 %101, %smax*/
	if ((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120)) begin
		main_lrph34ipreheader_104_reg <= main_lrph34ipreheader_104;
		if (start == 1'b0 && ^(main_lrph34ipreheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34ipreheader_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %indvar15 = phi i32 [ 0, %.lr.ph34.i.preheader ], [ %indvar.next16, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph34i_indvar15 = 32'd0;
	end
	/* main: %.lr.ph34.i*/
	/*   %indvar15 = phi i32 [ 0, %.lr.ph34.i.preheader ], [ %indvar.next16, %112 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__112_130) & (memory_controller_waitrequest == 1'd0)) & (main_112_exitcond17 == 1'd0))) */ begin
		main_lrph34i_indvar15 = main_112_indvarnext16;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %indvar15 = phi i32 [ 0, %.lr.ph34.i.preheader ], [ %indvar.next16, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph34i_indvar15_reg <= main_lrph34i_indvar15;
		if (start == 1'b0 && ^(main_lrph34i_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_indvar15_reg"); $finish; end
	end
	/* main: %.lr.ph34.i*/
	/*   %indvar15 = phi i32 [ 0, %.lr.ph34.i.preheader ], [ %indvar.next16, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_130) & (memory_controller_waitrequest == 1'd0)) & (main_112_exitcond17 == 1'd0))) begin
		main_lrph34i_indvar15_reg <= main_lrph34i_indvar15;
		if (start == 1'b0 && ^(main_lrph34i_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %position.1031.i = phi i32 [ %position.9.i, %.lr.ph34.i.preheader ], [ %position.11.i, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph34i_position1031i = main_96_position9i_reg;
	end
	/* main: %.lr.ph34.i*/
	/*   %position.1031.i = phi i32 [ %position.9.i, %.lr.ph34.i.preheader ], [ %position.11.i, %112 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__112_130) & (memory_controller_waitrequest == 1'd0)) & (main_112_exitcond17 == 1'd0))) */ begin
		main_lrph34i_position1031i = main_112_position11i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %position.1031.i = phi i32 [ %position.9.i, %.lr.ph34.i.preheader ], [ %position.11.i, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph34ipreheader_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph34i_position1031i_reg <= main_lrph34i_position1031i;
		if (start == 1'b0 && ^(main_lrph34i_position1031i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_position1031i_reg"); $finish; end
	end
	/* main: %.lr.ph34.i*/
	/*   %position.1031.i = phi i32 [ %position.9.i, %.lr.ph34.i.preheader ], [ %position.11.i, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_130) & (memory_controller_waitrequest == 1'd0)) & (main_112_exitcond17 == 1'd0))) begin
		main_lrph34i_position1031i_reg <= main_lrph34i_position1031i;
		if (start == 1'b0 && ^(main_lrph34i_position1031i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_position1031i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %105 = sub i32 %indvar15, %98*/
		main_lrph34i_105 = (main_lrph34i_indvar15_reg - main__crit_edge28i_98_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %105 = sub i32 %indvar15, %98*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_121)) begin
		main_lrph34i_105_reg <= main_lrph34i_105;
		if (start == 1'b0 && ^(main_lrph34i_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %scevgep18 = getelementptr [100 x i32]* @y, i32 1, i32 %105*/
		main_lrph34i_scevgep18 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_lrph34i_105_reg)));
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %scevgep18 = getelementptr [100 x i32]* @y, i32 1, i32 %105*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_122)) begin
		main_lrph34i_scevgep18_reg <= main_lrph34i_scevgep18;
		if (start == 1'b0 && ^(main_lrph34i_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %106 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.1031.i*/
		main_lrph34i_106 = (`TAG_g_y_a + (4 * main_lrph34i_position1031i_reg));
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
		main_lrph34i_107 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_123)) begin
		main_lrph34i_107_reg <= main_lrph34i_107;
		if (start == 1'b0 && ^(main_lrph34i_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
		main_lrph34i_108 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_124)) begin
		main_lrph34i_108_reg <= main_lrph34i_108;
		if (start == 1'b0 && ^(main_lrph34i_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph34i_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph34.i*/
	/*   %109 = icmp sgt i32 %107, %108*/
		main_lrph34i_109 = ($signed(main_lrph34i_107_reg) > $signed(main_lrph34i_108));
end
always @(*) begin
	/* main: %110*/
	/*   %d2.132.i = add i32 %102, %indvar15*/
		main_110_d2132i = (main_lrph34ipreheader_102_reg + main_lrph34i_indvar15_reg);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %d2.132.i = add i32 %102, %indvar15*/
	if ((cur_state == LEGUP_F_main_BB__110_125)) begin
		main_110_d2132i_reg <= main_110_d2132i;
		if (start == 1'b0 && ^(main_110_d2132i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_d2132i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
		main_110_111 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		main_110_111_reg <= main_110_111;
		if (start == 1'b0 && ^(main_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %position.11.i = phi i32 [ %d2.132.i, %110 ], [ %position.1031.i, %.lr.ph34.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph34i_124) & (memory_controller_waitrequest == 1'd0)) & (main_lrph34i_109 == 1'd0))) begin
		main_112_position11i = main_lrph34i_position1031i_reg;
	end
	/* main: %112*/
	/*   %position.11.i = phi i32 [ %d2.132.i, %110 ], [ %position.1031.i, %.lr.ph34.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__110_129) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_112_position11i = main_110_d2132i_reg;
	end
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %position.11.i = phi i32 [ %d2.132.i, %110 ], [ %position.1031.i, %.lr.ph34.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph34i_124) & (memory_controller_waitrequest == 1'd0)) & (main_lrph34i_109 == 1'd0))) begin
		main_112_position11i_reg <= main_112_position11i;
		if (start == 1'b0 && ^(main_112_position11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_position11i_reg"); $finish; end
	end
	/* main: %112*/
	/*   %position.11.i = phi i32 [ %d2.132.i, %110 ], [ %position.1031.i, %.lr.ph34.i ]*/
	if (((cur_state == LEGUP_F_main_BB__110_129) & (memory_controller_waitrequest == 1'd0))) begin
		main_112_position11i_reg <= main_112_position11i;
		if (start == 1'b0 && ^(main_112_position11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_position11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		main_112_indvarnext16 = (main_lrph34i_indvar15_reg + 32'd1);
end
always @(*) begin
	/* main: %112*/
	/*   %exitcond17 = icmp eq i32 %indvar.next16, %104*/
		main_112_exitcond17 = (main_112_indvarnext16 == main_lrph34ipreheader_104_reg);
end
always @(*) begin
	/* main: %._crit_edge35.i*/
	/*   %113 = icmp sgt i32 %19, 91*/
		main__crit_edge35i_113 = ($signed(main_lrph27i_19_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %114*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %179 ], [ 0, %.lr.ph39.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph39i_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_114_indvar19 = 32'd0;
	end
	/* main: %114*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %179 ], [ 0, %.lr.ph39.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_208) & (memory_controller_waitrequest == 1'd0)) & (main_179_180 == 1'd0))) */ begin
		main_114_indvar19 = main_179_indvarnext20;
	end
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %179 ], [ 0, %.lr.ph39.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph39i_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_114_indvar19_reg <= main_114_indvar19;
		if (start == 1'b0 && ^(main_114_indvar19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_indvar19_reg"); $finish; end
	end
	/* main: %114*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %179 ], [ 0, %.lr.ph39.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_208) & (memory_controller_waitrequest == 1'd0)) & (main_179_180 == 1'd0))) begin
		main_114_indvar19_reg <= main_114_indvar19;
		if (start == 1'b0 && ^(main_114_indvar19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_indvar19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %position.1236.i = phi i32 [ %position.21.i, %179 ], [ %20, %.lr.ph39.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph39i_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_114_position1236i = main_lrph27i_20_reg;
	end
	/* main: %114*/
	/*   %position.1236.i = phi i32 [ %position.21.i, %179 ], [ %20, %.lr.ph39.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_208) & (memory_controller_waitrequest == 1'd0)) & (main_179_180 == 1'd0))) */ begin
		main_114_position1236i = main_179_position21i_reg;
	end
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %position.1236.i = phi i32 [ %position.21.i, %179 ], [ %20, %.lr.ph39.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph39i_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_114_position1236i_reg <= main_114_position1236i;
		if (start == 1'b0 && ^(main_114_position1236i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_position1236i_reg"); $finish; end
	end
	/* main: %114*/
	/*   %position.1236.i = phi i32 [ %position.21.i, %179 ], [ %20, %.lr.ph39.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_208) & (memory_controller_waitrequest == 1'd0)) & (main_179_180 == 1'd0))) begin
		main_114_position1236i_reg <= main_114_position1236i;
		if (start == 1'b0 && ^(main_114_position1236i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_position1236i_reg"); $finish; end
	end
end
always @(*) begin
	main_114_115 = main_114_115_stage0_reg;
end
always @(*) begin
	/* main: %114*/
	/*   %d3.037.i = add i32 %19, %115*/
		main_114_d3037i = (main_lrph27i_19_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %d3.037.i = add i32 %19, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_d3037i_reg <= main_114_d3037i;
		if (start == 1'b0 && ^(main_114_d3037i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_d3037i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep29 = getelementptr [100 x i32]* @y, i32 0, i32 %d3.037.i*/
		main_114_scevgep29 = (`TAG_g_y_a + (4 * main_114_d3037i_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep29 = getelementptr [100 x i32]* @y, i32 0, i32 %d3.037.i*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep29_reg <= main_114_scevgep29;
		if (start == 1'b0 && ^(main_114_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %116 = add i32 %18, %115*/
		main_114_116 = (main_lrph27i_18_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %116 = add i32 %18, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_116_reg <= main_114_116;
		if (start == 1'b0 && ^(main_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep28 = getelementptr [100 x i32]* @y, i32 0, i32 %116*/
		main_114_scevgep28 = (`TAG_g_y_a + (4 * main_114_116_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep28 = getelementptr [100 x i32]* @y, i32 0, i32 %116*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep28_reg <= main_114_scevgep28;
		if (start == 1'b0 && ^(main_114_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %117 = add i32 %17, %115*/
		main_114_117 = (main_lrph27i_17_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %117 = add i32 %17, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_117_reg <= main_114_117;
		if (start == 1'b0 && ^(main_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep27 = getelementptr [100 x i32]* @y, i32 0, i32 %117*/
		main_114_scevgep27 = (`TAG_g_y_a + (4 * main_114_117_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep27 = getelementptr [100 x i32]* @y, i32 0, i32 %117*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep27_reg <= main_114_scevgep27;
		if (start == 1'b0 && ^(main_114_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %118 = add i32 %16, %115*/
		main_114_118 = (main_lrph27i_16_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %118 = add i32 %16, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_118_reg <= main_114_118;
		if (start == 1'b0 && ^(main_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep26 = getelementptr [100 x i32]* @y, i32 0, i32 %118*/
		main_114_scevgep26 = (`TAG_g_y_a + (4 * main_114_118_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep26 = getelementptr [100 x i32]* @y, i32 0, i32 %118*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep26_reg <= main_114_scevgep26;
		if (start == 1'b0 && ^(main_114_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %119 = add i32 %15, %115*/
		main_114_119 = (main_lrph27i_15_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %119 = add i32 %15, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_119_reg <= main_114_119;
		if (start == 1'b0 && ^(main_114_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep25 = getelementptr [100 x i32]* @y, i32 0, i32 %119*/
		main_114_scevgep25 = (`TAG_g_y_a + (4 * main_114_119_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep25 = getelementptr [100 x i32]* @y, i32 0, i32 %119*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep25_reg <= main_114_scevgep25;
		if (start == 1'b0 && ^(main_114_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %120 = add i32 %14, %115*/
		main_114_120 = (main_lrph27i_14_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %120 = add i32 %14, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_120_reg <= main_114_120;
		if (start == 1'b0 && ^(main_114_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep24 = getelementptr [100 x i32]* @y, i32 0, i32 %120*/
		main_114_scevgep24 = (`TAG_g_y_a + (4 * main_114_120_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep24 = getelementptr [100 x i32]* @y, i32 0, i32 %120*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep24_reg <= main_114_scevgep24;
		if (start == 1'b0 && ^(main_114_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %121 = add i32 %13, %115*/
		main_114_121 = (main_lrph27i_13_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %121 = add i32 %13, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_121_reg <= main_114_121;
		if (start == 1'b0 && ^(main_114_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep23 = getelementptr [100 x i32]* @y, i32 0, i32 %121*/
		main_114_scevgep23 = (`TAG_g_y_a + (4 * main_114_121_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep23 = getelementptr [100 x i32]* @y, i32 0, i32 %121*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep23_reg <= main_114_scevgep23;
		if (start == 1'b0 && ^(main_114_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %122 = add i32 %3, %115*/
		main_114_122 = (main_lrph27i_3_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %122 = add i32 %3, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_122_reg <= main_114_122;
		if (start == 1'b0 && ^(main_114_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep22 = getelementptr [100 x i32]* @y, i32 0, i32 %122*/
		main_114_scevgep22 = (`TAG_g_y_a + (4 * main_114_122_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep22 = getelementptr [100 x i32]* @y, i32 0, i32 %122*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep22_reg <= main_114_scevgep22;
		if (start == 1'b0 && ^(main_114_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %123 = add i32 %4, %115*/
		main_114_123 = (main_lrph27i_4_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %123 = add i32 %4, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_123_reg <= main_114_123;
		if (start == 1'b0 && ^(main_114_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %scevgep21 = getelementptr [100 x i32]* @y, i32 0, i32 %123*/
		main_114_scevgep21 = (`TAG_g_y_a + (4 * main_114_123_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %scevgep21 = getelementptr [100 x i32]* @y, i32 0, i32 %123*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_scevgep21_reg <= main_114_scevgep21;
		if (start == 1'b0 && ^(main_114_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %124 = add i32 %5, %115*/
		main_114_124 = (main_lrph27i_5_reg + main_114_115);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %124 = add i32 %5, %115*/
	if ((cur_state == LEGUP_F_main_BB__114_135)) begin
		main_114_124_reg <= main_114_124;
		if (start == 1'b0 && ^(main_114_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %125 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.1236.i*/
		main_114_125 = (`TAG_g_y_a + (4 * main_114_position1236i_reg));
end
always @(*) begin
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
		main_114_126 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		main_114_126_reg <= main_114_126;
		if (start == 1'b0 && ^(main_114_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
		main_114_127 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_138)) begin
		main_114_127_reg <= main_114_127;
		if (start == 1'b0 && ^(main_114_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %128 = icmp sgt i32 %126, %127*/
		main_114_128 = ($signed(main_114_126_reg) > $signed(main_114_127));
end
always @(*) begin
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_129_130 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		main_129_130_reg <= main_129_130;
		if (start == 1'b0 && ^(main_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %132 = phi i32 [ %130, %129 ], [ %126, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_138) & (memory_controller_waitrequest == 1'd0)) & (main_114_128 == 1'd0))) begin
		main_131_132 = main_114_126_reg;
	end
	/* main: %131*/
	/*   %132 = phi i32 [ %130, %129 ], [ %126, %114 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__129_143) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_131_132 = main_129_130_reg;
	end
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %132 = phi i32 [ %130, %129 ], [ %126, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_138) & (memory_controller_waitrequest == 1'd0)) & (main_114_128 == 1'd0))) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
	/* main: %131*/
	/*   %132 = phi i32 [ %130, %129 ], [ %126, %114 ]*/
	if (((cur_state == LEGUP_F_main_BB__129_143) & (memory_controller_waitrequest == 1'd0))) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %position.13.i = phi i32 [ %d3.037.i, %129 ], [ %position.1236.i, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_138) & (memory_controller_waitrequest == 1'd0)) & (main_114_128 == 1'd0))) begin
		main_131_position13i = main_114_position1236i_reg;
	end
	/* main: %131*/
	/*   %position.13.i = phi i32 [ %d3.037.i, %129 ], [ %position.1236.i, %114 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__129_143) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_131_position13i = main_114_d3037i_reg;
	end
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %position.13.i = phi i32 [ %d3.037.i, %129 ], [ %position.1236.i, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_138) & (memory_controller_waitrequest == 1'd0)) & (main_114_128 == 1'd0))) begin
		main_131_position13i_reg <= main_131_position13i;
		if (start == 1'b0 && ^(main_131_position13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_position13i_reg"); $finish; end
	end
	/* main: %131*/
	/*   %position.13.i = phi i32 [ %d3.037.i, %129 ], [ %position.1236.i, %114 ]*/
	if (((cur_state == LEGUP_F_main_BB__129_143) & (memory_controller_waitrequest == 1'd0))) begin
		main_131_position13i_reg <= main_131_position13i;
		if (start == 1'b0 && ^(main_131_position13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_position13i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
		main_131_133 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__131_146)) begin
		main_131_133_reg <= main_131_133;
		if (start == 1'b0 && ^(main_131_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %134 = icmp sgt i32 %132, %133*/
		main_131_134 = ($signed(main_131_132_reg) > $signed(main_131_133));
end
always @(*) begin
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_135_136 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		main_135_136_reg <= main_135_136;
		if (start == 1'b0 && ^(main_135_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %138 = phi i32 [ %136, %135 ], [ %132, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_146) & (memory_controller_waitrequest == 1'd0)) & (main_131_134 == 1'd0))) begin
		main_137_138 = main_131_132_reg;
	end
	/* main: %137*/
	/*   %138 = phi i32 [ %136, %135 ], [ %132, %131 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__135_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_137_138 = main_135_136_reg;
	end
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %138 = phi i32 [ %136, %135 ], [ %132, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_146) & (memory_controller_waitrequest == 1'd0)) & (main_131_134 == 1'd0))) begin
		main_137_138_reg <= main_137_138;
		if (start == 1'b0 && ^(main_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_138_reg"); $finish; end
	end
	/* main: %137*/
	/*   %138 = phi i32 [ %136, %135 ], [ %132, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB__135_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_137_138_reg <= main_137_138;
		if (start == 1'b0 && ^(main_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %position.14.i = phi i32 [ %116, %135 ], [ %position.13.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_146) & (memory_controller_waitrequest == 1'd0)) & (main_131_134 == 1'd0))) begin
		main_137_position14i = main_131_position13i_reg;
	end
	/* main: %137*/
	/*   %position.14.i = phi i32 [ %116, %135 ], [ %position.13.i, %131 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__135_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_137_position14i = main_114_116_reg;
	end
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %position.14.i = phi i32 [ %116, %135 ], [ %position.13.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_146) & (memory_controller_waitrequest == 1'd0)) & (main_131_134 == 1'd0))) begin
		main_137_position14i_reg <= main_137_position14i;
		if (start == 1'b0 && ^(main_137_position14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_position14i_reg"); $finish; end
	end
	/* main: %137*/
	/*   %position.14.i = phi i32 [ %116, %135 ], [ %position.13.i, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB__135_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_137_position14i_reg <= main_137_position14i;
		if (start == 1'b0 && ^(main_137_position14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_position14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
		main_137_139 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__137_154)) begin
		main_137_139_reg <= main_137_139;
		if (start == 1'b0 && ^(main_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %140 = icmp sgt i32 %138, %139*/
		main_137_140 = ($signed(main_137_138_reg) > $signed(main_137_139));
end
always @(*) begin
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_141_142 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		main_141_142_reg <= main_141_142;
		if (start == 1'b0 && ^(main_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %144 = phi i32 [ %142, %141 ], [ %138, %137 ]*/
	if ((((cur_state == LEGUP_F_main_BB__137_154) & (memory_controller_waitrequest == 1'd0)) & (main_137_140 == 1'd0))) begin
		main_143_144 = main_137_138_reg;
	end
	/* main: %143*/
	/*   %144 = phi i32 [ %142, %141 ], [ %138, %137 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__141_159) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_143_144 = main_141_142_reg;
	end
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %144 = phi i32 [ %142, %141 ], [ %138, %137 ]*/
	if ((((cur_state == LEGUP_F_main_BB__137_154) & (memory_controller_waitrequest == 1'd0)) & (main_137_140 == 1'd0))) begin
		main_143_144_reg <= main_143_144;
		if (start == 1'b0 && ^(main_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_144_reg"); $finish; end
	end
	/* main: %143*/
	/*   %144 = phi i32 [ %142, %141 ], [ %138, %137 ]*/
	if (((cur_state == LEGUP_F_main_BB__141_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_143_144_reg <= main_143_144;
		if (start == 1'b0 && ^(main_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %position.15.i = phi i32 [ %117, %141 ], [ %position.14.i, %137 ]*/
	if ((((cur_state == LEGUP_F_main_BB__137_154) & (memory_controller_waitrequest == 1'd0)) & (main_137_140 == 1'd0))) begin
		main_143_position15i = main_137_position14i_reg;
	end
	/* main: %143*/
	/*   %position.15.i = phi i32 [ %117, %141 ], [ %position.14.i, %137 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__141_159) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_143_position15i = main_114_117_reg;
	end
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %position.15.i = phi i32 [ %117, %141 ], [ %position.14.i, %137 ]*/
	if ((((cur_state == LEGUP_F_main_BB__137_154) & (memory_controller_waitrequest == 1'd0)) & (main_137_140 == 1'd0))) begin
		main_143_position15i_reg <= main_143_position15i;
		if (start == 1'b0 && ^(main_143_position15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_position15i_reg"); $finish; end
	end
	/* main: %143*/
	/*   %position.15.i = phi i32 [ %117, %141 ], [ %position.14.i, %137 ]*/
	if (((cur_state == LEGUP_F_main_BB__141_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_143_position15i_reg <= main_143_position15i;
		if (start == 1'b0 && ^(main_143_position15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_position15i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
		main_143_145 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_162)) begin
		main_143_145_reg <= main_143_145;
		if (start == 1'b0 && ^(main_143_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %146 = icmp sgt i32 %144, %145*/
		main_143_146 = ($signed(main_143_144_reg) > $signed(main_143_145));
end
always @(*) begin
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_147_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		main_147_148_reg <= main_147_148;
		if (start == 1'b0 && ^(main_147_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_147_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %150 = phi i32 [ %148, %147 ], [ %144, %143 ]*/
	if ((((cur_state == LEGUP_F_main_BB__143_162) & (memory_controller_waitrequest == 1'd0)) & (main_143_146 == 1'd0))) begin
		main_149_150 = main_143_144_reg;
	end
	/* main: %149*/
	/*   %150 = phi i32 [ %148, %147 ], [ %144, %143 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__147_167) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_149_150 = main_147_148_reg;
	end
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %150 = phi i32 [ %148, %147 ], [ %144, %143 ]*/
	if ((((cur_state == LEGUP_F_main_BB__143_162) & (memory_controller_waitrequest == 1'd0)) & (main_143_146 == 1'd0))) begin
		main_149_150_reg <= main_149_150;
		if (start == 1'b0 && ^(main_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_150_reg"); $finish; end
	end
	/* main: %149*/
	/*   %150 = phi i32 [ %148, %147 ], [ %144, %143 ]*/
	if (((cur_state == LEGUP_F_main_BB__147_167) & (memory_controller_waitrequest == 1'd0))) begin
		main_149_150_reg <= main_149_150;
		if (start == 1'b0 && ^(main_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %position.16.i = phi i32 [ %118, %147 ], [ %position.15.i, %143 ]*/
	if ((((cur_state == LEGUP_F_main_BB__143_162) & (memory_controller_waitrequest == 1'd0)) & (main_143_146 == 1'd0))) begin
		main_149_position16i = main_143_position15i_reg;
	end
	/* main: %149*/
	/*   %position.16.i = phi i32 [ %118, %147 ], [ %position.15.i, %143 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__147_167) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_149_position16i = main_114_118_reg;
	end
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %position.16.i = phi i32 [ %118, %147 ], [ %position.15.i, %143 ]*/
	if ((((cur_state == LEGUP_F_main_BB__143_162) & (memory_controller_waitrequest == 1'd0)) & (main_143_146 == 1'd0))) begin
		main_149_position16i_reg <= main_149_position16i;
		if (start == 1'b0 && ^(main_149_position16i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_position16i_reg"); $finish; end
	end
	/* main: %149*/
	/*   %position.16.i = phi i32 [ %118, %147 ], [ %position.15.i, %143 ]*/
	if (((cur_state == LEGUP_F_main_BB__147_167) & (memory_controller_waitrequest == 1'd0))) begin
		main_149_position16i_reg <= main_149_position16i;
		if (start == 1'b0 && ^(main_149_position16i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_position16i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
		main_149_151 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__149_170)) begin
		main_149_151_reg <= main_149_151;
		if (start == 1'b0 && ^(main_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %152 = icmp sgt i32 %150, %151*/
		main_149_152 = ($signed(main_149_150_reg) > $signed(main_149_151));
end
always @(*) begin
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_153_154 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		main_153_154_reg <= main_153_154;
		if (start == 1'b0 && ^(main_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %156 = phi i32 [ %154, %153 ], [ %150, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_170) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_155_156 = main_149_150_reg;
	end
	/* main: %155*/
	/*   %156 = phi i32 [ %154, %153 ], [ %150, %149 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__153_175) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_155_156 = main_153_154_reg;
	end
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %156 = phi i32 [ %154, %153 ], [ %150, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_170) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_155_156_reg <= main_155_156;
		if (start == 1'b0 && ^(main_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_156_reg"); $finish; end
	end
	/* main: %155*/
	/*   %156 = phi i32 [ %154, %153 ], [ %150, %149 ]*/
	if (((cur_state == LEGUP_F_main_BB__153_175) & (memory_controller_waitrequest == 1'd0))) begin
		main_155_156_reg <= main_155_156;
		if (start == 1'b0 && ^(main_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %position.17.i = phi i32 [ %119, %153 ], [ %position.16.i, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_170) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_155_position17i = main_149_position16i_reg;
	end
	/* main: %155*/
	/*   %position.17.i = phi i32 [ %119, %153 ], [ %position.16.i, %149 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__153_175) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_155_position17i = main_114_119_reg;
	end
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %position.17.i = phi i32 [ %119, %153 ], [ %position.16.i, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_170) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_155_position17i_reg <= main_155_position17i;
		if (start == 1'b0 && ^(main_155_position17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_position17i_reg"); $finish; end
	end
	/* main: %155*/
	/*   %position.17.i = phi i32 [ %119, %153 ], [ %position.16.i, %149 ]*/
	if (((cur_state == LEGUP_F_main_BB__153_175) & (memory_controller_waitrequest == 1'd0))) begin
		main_155_position17i_reg <= main_155_position17i;
		if (start == 1'b0 && ^(main_155_position17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_position17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
		main_155_157 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__155_178)) begin
		main_155_157_reg <= main_155_157;
		if (start == 1'b0 && ^(main_155_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %158 = icmp sgt i32 %156, %157*/
		main_155_158 = ($signed(main_155_156_reg) > $signed(main_155_157));
end
always @(*) begin
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_159_160 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		main_159_160_reg <= main_159_160;
		if (start == 1'b0 && ^(main_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_159_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %162 = phi i32 [ %160, %159 ], [ %156, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_178) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_161_162 = main_155_156_reg;
	end
	/* main: %161*/
	/*   %162 = phi i32 [ %160, %159 ], [ %156, %155 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__159_183) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_161_162 = main_159_160_reg;
	end
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %162 = phi i32 [ %160, %159 ], [ %156, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_178) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_161_162_reg <= main_161_162;
		if (start == 1'b0 && ^(main_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_162_reg"); $finish; end
	end
	/* main: %161*/
	/*   %162 = phi i32 [ %160, %159 ], [ %156, %155 ]*/
	if (((cur_state == LEGUP_F_main_BB__159_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_161_162_reg <= main_161_162;
		if (start == 1'b0 && ^(main_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %position.18.i = phi i32 [ %120, %159 ], [ %position.17.i, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_178) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_161_position18i = main_155_position17i_reg;
	end
	/* main: %161*/
	/*   %position.18.i = phi i32 [ %120, %159 ], [ %position.17.i, %155 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__159_183) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_161_position18i = main_114_120_reg;
	end
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %position.18.i = phi i32 [ %120, %159 ], [ %position.17.i, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_178) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_161_position18i_reg <= main_161_position18i;
		if (start == 1'b0 && ^(main_161_position18i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_position18i_reg"); $finish; end
	end
	/* main: %161*/
	/*   %position.18.i = phi i32 [ %120, %159 ], [ %position.17.i, %155 ]*/
	if (((cur_state == LEGUP_F_main_BB__159_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_161_position18i_reg <= main_161_position18i;
		if (start == 1'b0 && ^(main_161_position18i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_position18i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
		main_161_163 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__161_186)) begin
		main_161_163_reg <= main_161_163;
		if (start == 1'b0 && ^(main_161_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %164 = icmp sgt i32 %162, %163*/
		main_161_164 = ($signed(main_161_162_reg) > $signed(main_161_163));
end
always @(*) begin
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_165_166 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		main_165_166_reg <= main_165_166;
		if (start == 1'b0 && ^(main_165_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_165_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %168 = phi i32 [ %166, %165 ], [ %162, %161 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_186) & (memory_controller_waitrequest == 1'd0)) & (main_161_164 == 1'd0))) begin
		main_167_168 = main_161_162_reg;
	end
	/* main: %167*/
	/*   %168 = phi i32 [ %166, %165 ], [ %162, %161 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__165_191) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_167_168 = main_165_166_reg;
	end
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %168 = phi i32 [ %166, %165 ], [ %162, %161 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_186) & (memory_controller_waitrequest == 1'd0)) & (main_161_164 == 1'd0))) begin
		main_167_168_reg <= main_167_168;
		if (start == 1'b0 && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
	end
	/* main: %167*/
	/*   %168 = phi i32 [ %166, %165 ], [ %162, %161 ]*/
	if (((cur_state == LEGUP_F_main_BB__165_191) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_168_reg <= main_167_168;
		if (start == 1'b0 && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %position.19.i = phi i32 [ %121, %165 ], [ %position.18.i, %161 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_186) & (memory_controller_waitrequest == 1'd0)) & (main_161_164 == 1'd0))) begin
		main_167_position19i = main_161_position18i_reg;
	end
	/* main: %167*/
	/*   %position.19.i = phi i32 [ %121, %165 ], [ %position.18.i, %161 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__165_191) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_167_position19i = main_114_121_reg;
	end
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %position.19.i = phi i32 [ %121, %165 ], [ %position.18.i, %161 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_186) & (memory_controller_waitrequest == 1'd0)) & (main_161_164 == 1'd0))) begin
		main_167_position19i_reg <= main_167_position19i;
		if (start == 1'b0 && ^(main_167_position19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_position19i_reg"); $finish; end
	end
	/* main: %167*/
	/*   %position.19.i = phi i32 [ %121, %165 ], [ %position.18.i, %161 ]*/
	if (((cur_state == LEGUP_F_main_BB__165_191) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_position19i_reg <= main_167_position19i;
		if (start == 1'b0 && ^(main_167_position19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_position19i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
		main_167_169 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__167_194)) begin
		main_167_169_reg <= main_167_169;
		if (start == 1'b0 && ^(main_167_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %170 = icmp sgt i32 %168, %169*/
		main_167_170 = ($signed(main_167_168_reg) > $signed(main_167_169));
end
always @(*) begin
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_171_172 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		main_171_172_reg <= main_171_172;
		if (start == 1'b0 && ^(main_171_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_171_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %174 = phi i32 [ %172, %171 ], [ %168, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__167_194) & (memory_controller_waitrequest == 1'd0)) & (main_167_170 == 1'd0))) begin
		main_173_174 = main_167_168_reg;
	end
	/* main: %173*/
	/*   %174 = phi i32 [ %172, %171 ], [ %168, %167 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__171_199) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_173_174 = main_171_172_reg;
	end
end
always @(posedge clk) begin
	/* main: %173*/
	/*   %174 = phi i32 [ %172, %171 ], [ %168, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__167_194) & (memory_controller_waitrequest == 1'd0)) & (main_167_170 == 1'd0))) begin
		main_173_174_reg <= main_173_174;
		if (start == 1'b0 && ^(main_173_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_174_reg"); $finish; end
	end
	/* main: %173*/
	/*   %174 = phi i32 [ %172, %171 ], [ %168, %167 ]*/
	if (((cur_state == LEGUP_F_main_BB__171_199) & (memory_controller_waitrequest == 1'd0))) begin
		main_173_174_reg <= main_173_174;
		if (start == 1'b0 && ^(main_173_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %position.20.i = phi i32 [ %122, %171 ], [ %position.19.i, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__167_194) & (memory_controller_waitrequest == 1'd0)) & (main_167_170 == 1'd0))) begin
		main_173_position20i = main_167_position19i_reg;
	end
	/* main: %173*/
	/*   %position.20.i = phi i32 [ %122, %171 ], [ %position.19.i, %167 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__171_199) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_173_position20i = main_114_122_reg;
	end
end
always @(posedge clk) begin
	/* main: %173*/
	/*   %position.20.i = phi i32 [ %122, %171 ], [ %position.19.i, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__167_194) & (memory_controller_waitrequest == 1'd0)) & (main_167_170 == 1'd0))) begin
		main_173_position20i_reg <= main_173_position20i;
		if (start == 1'b0 && ^(main_173_position20i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_position20i_reg"); $finish; end
	end
	/* main: %173*/
	/*   %position.20.i = phi i32 [ %122, %171 ], [ %position.19.i, %167 ]*/
	if (((cur_state == LEGUP_F_main_BB__171_199) & (memory_controller_waitrequest == 1'd0))) begin
		main_173_position20i_reg <= main_173_position20i;
		if (start == 1'b0 && ^(main_173_position20i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_position20i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
		main_173_175 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__173_202)) begin
		main_173_175_reg <= main_173_175;
		if (start == 1'b0 && ^(main_173_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %176 = icmp sgt i32 %174, %175*/
		main_173_176 = ($signed(main_173_174_reg) > $signed(main_173_175));
end
always @(*) begin
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_177_178 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		main_177_178_reg <= main_177_178;
		if (start == 1'b0 && ^(main_177_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_177_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %position.21.i = phi i32 [ %123, %177 ], [ %position.20.i, %173 ]*/
	if ((((cur_state == LEGUP_F_main_BB__173_202) & (memory_controller_waitrequest == 1'd0)) & (main_173_176 == 1'd0))) begin
		main_179_position21i = main_173_position20i_reg;
	end
	/* main: %179*/
	/*   %position.21.i = phi i32 [ %123, %177 ], [ %position.20.i, %173 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__177_207) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_179_position21i = main_114_123_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %position.21.i = phi i32 [ %123, %177 ], [ %position.20.i, %173 ]*/
	if ((((cur_state == LEGUP_F_main_BB__173_202) & (memory_controller_waitrequest == 1'd0)) & (main_173_176 == 1'd0))) begin
		main_179_position21i_reg <= main_179_position21i;
		if (start == 1'b0 && ^(main_179_position21i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_position21i_reg"); $finish; end
	end
	/* main: %179*/
	/*   %position.21.i = phi i32 [ %123, %177 ], [ %position.20.i, %173 ]*/
	if (((cur_state == LEGUP_F_main_BB__177_207) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_position21i_reg <= main_179_position21i;
		if (start == 1'b0 && ^(main_179_position21i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_position21i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %180 = icmp sgt i32 %124, 91*/
		main_179_180 = ($signed(main_114_124_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %179*/
	/*   %indvar.next20 = add i32 %indvar19, 1*/
		main_179_indvarnext20 = (main_114_indvar19_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge40.i*/
	/*   %position.12.lcssa.i = phi i32 [ %20, %._crit_edge35.i ], [ %position.21.i, %._crit_edge40.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge35i_132) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge35i_113 == 1'd1))) begin
		main__crit_edge40i_position12lcssai = main_lrph27i_20_reg;
	end
	/* main: %._crit_edge40.i*/
	/*   %position.12.lcssa.i = phi i32 [ %20, %._crit_edge35.i ], [ %position.21.i, %._crit_edge40.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge40iloopexit_209) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge40i_position12lcssai = main_179_position21i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge40.i*/
	/*   %position.12.lcssa.i = phi i32 [ %20, %._crit_edge35.i ], [ %position.21.i, %._crit_edge40.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge35i_132) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge35i_113 == 1'd1))) begin
		main__crit_edge40i_position12lcssai_reg <= main__crit_edge40i_position12lcssai;
		if (start == 1'b0 && ^(main__crit_edge40i_position12lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge40i_position12lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge40.i*/
	/*   %position.12.lcssa.i = phi i32 [ %20, %._crit_edge35.i ], [ %position.21.i, %._crit_edge40.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge40iloopexit_209) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge40i_position12lcssai_reg <= main__crit_edge40i_position12lcssai;
		if (start == 1'b0 && ^(main__crit_edge40i_position12lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge40i_position12lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge40i_181 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge40.i*/
/*   %181 = srem i32 %29, 9*/
	main__crit_edge40i_181_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge40.i*/
	/*   %182 = sub nsw i32 100, %181*/
		main__crit_edge40i_182 = (32'd100 - main__crit_edge40i_181);
end
always @(*) begin
	/* main: %._crit_edge40.i*/
	/*   %183 = icmp sgt i32 %182, 99*/
		main__crit_edge40i_183 = ($signed(main__crit_edge40i_182) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph45.i*/
	/*   %184 = add i32 %181, -99*/
		main_lrph45i_184 = (main__crit_edge40i_181_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph45.i*/
	/*   %185 = sub i32 100, %181*/
		main_lrph45i_185 = (32'd100 - main__crit_edge40i_181_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph45.i*/
	/*   %185 = sub i32 100, %181*/
	if ((cur_state == LEGUP_F_main_BB_lrph45i_243)) begin
		main_lrph45i_185_reg <= main_lrph45i_185;
		if (start == 1'b0 && ^(main_lrph45i_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph45i_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph45.i*/
	/*   %186 = icmp sgt i32 %185, 99*/
		main_lrph45i_186 = ($signed(main_lrph45i_185) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph45.i*/
	/*   %smax32 = select i1 %186, i32 %185, i32 99*/
		main_lrph45i_smax32 = (main_lrph45i_186 ? main_lrph45i_185 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph45.i*/
	/*   %187 = add i32 %184, %smax32*/
		main_lrph45i_187 = (main_lrph45i_184 + main_lrph45i_smax32);
end
always @(posedge clk) begin
	/* main: %.lr.ph45.i*/
	/*   %187 = add i32 %184, %smax32*/
	if ((cur_state == LEGUP_F_main_BB_lrph45i_243)) begin
		main_lrph45i_187_reg <= main_lrph45i_187;
		if (start == 1'b0 && ^(main_lrph45i_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph45i_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %196 ], [ 0, %.lr.ph45.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph45i_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_188_indvar30 = 32'd0;
	end
	/* main: %188*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %196 ], [ 0, %.lr.ph45.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__196_253) & (memory_controller_waitrequest == 1'd0)) & (main_196_exitcond33 == 1'd0))) */ begin
		main_188_indvar30 = main_196_indvarnext31;
	end
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %196 ], [ 0, %.lr.ph45.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph45i_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_188_indvar30_reg <= main_188_indvar30;
		if (start == 1'b0 && ^(main_188_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_indvar30_reg"); $finish; end
	end
	/* main: %188*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %196 ], [ 0, %.lr.ph45.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__196_253) & (memory_controller_waitrequest == 1'd0)) & (main_196_exitcond33 == 1'd0))) begin
		main_188_indvar30_reg <= main_188_indvar30;
		if (start == 1'b0 && ^(main_188_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_indvar30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %position.2242.i = phi i32 [ %position.23.i, %196 ], [ %position.12.lcssa.i, %.lr.ph45.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph45i_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_188_position2242i = main__crit_edge40i_position12lcssai_reg;
	end
	/* main: %188*/
	/*   %position.2242.i = phi i32 [ %position.23.i, %196 ], [ %position.12.lcssa.i, %.lr.ph45.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__196_253) & (memory_controller_waitrequest == 1'd0)) & (main_196_exitcond33 == 1'd0))) */ begin
		main_188_position2242i = main_196_position23i_reg;
	end
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %position.2242.i = phi i32 [ %position.23.i, %196 ], [ %position.12.lcssa.i, %.lr.ph45.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph45i_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_188_position2242i_reg <= main_188_position2242i;
		if (start == 1'b0 && ^(main_188_position2242i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_position2242i_reg"); $finish; end
	end
	/* main: %188*/
	/*   %position.2242.i = phi i32 [ %position.23.i, %196 ], [ %position.12.lcssa.i, %.lr.ph45.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__196_253) & (memory_controller_waitrequest == 1'd0)) & (main_196_exitcond33 == 1'd0))) begin
		main_188_position2242i_reg <= main_188_position2242i;
		if (start == 1'b0 && ^(main_188_position2242i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_position2242i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %189 = sub i32 %indvar30, %181*/
		main_188_189 = (main_188_indvar30_reg - main__crit_edge40i_181_reg);
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %189 = sub i32 %indvar30, %181*/
	if ((cur_state == LEGUP_F_main_BB__188_244)) begin
		main_188_189_reg <= main_188_189;
		if (start == 1'b0 && ^(main_188_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %scevgep34 = getelementptr [100 x i32]* @y, i32 1, i32 %189*/
		main_188_scevgep34 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_188_189_reg)));
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %scevgep34 = getelementptr [100 x i32]* @y, i32 1, i32 %189*/
	if ((cur_state == LEGUP_F_main_BB__188_245)) begin
		main_188_scevgep34_reg <= main_188_scevgep34;
		if (start == 1'b0 && ^(main_188_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %190 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.2242.i*/
		main_188_190 = (`TAG_g_y_a + (4 * main_188_position2242i_reg));
end
always @(*) begin
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
		main_188_191 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_246)) begin
		main_188_191_reg <= main_188_191;
		if (start == 1'b0 && ^(main_188_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_188_192 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_247)) begin
		main_188_192_reg <= main_188_192;
		if (start == 1'b0 && ^(main_188_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %193 = icmp sgt i32 %191, %192*/
		main_188_193 = ($signed(main_188_191_reg) > $signed(main_188_192));
end
always @(*) begin
	/* main: %194*/
	/*   %d3.143.i = add i32 %185, %indvar30*/
		main_194_d3143i = (main_lrph45i_185_reg + main_188_indvar30_reg);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %d3.143.i = add i32 %185, %indvar30*/
	if ((cur_state == LEGUP_F_main_BB__194_248)) begin
		main_194_d3143i_reg <= main_194_d3143i;
		if (start == 1'b0 && ^(main_194_d3143i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_d3143i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
		main_194_195 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		main_194_195_reg <= main_194_195;
		if (start == 1'b0 && ^(main_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %196*/
	/*   %position.23.i = phi i32 [ %d3.143.i, %194 ], [ %position.2242.i, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_247) & (memory_controller_waitrequest == 1'd0)) & (main_188_193 == 1'd0))) begin
		main_196_position23i = main_188_position2242i_reg;
	end
	/* main: %196*/
	/*   %position.23.i = phi i32 [ %d3.143.i, %194 ], [ %position.2242.i, %188 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__194_252) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_196_position23i = main_194_d3143i_reg;
	end
end
always @(posedge clk) begin
	/* main: %196*/
	/*   %position.23.i = phi i32 [ %d3.143.i, %194 ], [ %position.2242.i, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_247) & (memory_controller_waitrequest == 1'd0)) & (main_188_193 == 1'd0))) begin
		main_196_position23i_reg <= main_196_position23i;
		if (start == 1'b0 && ^(main_196_position23i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_196_position23i_reg"); $finish; end
	end
	/* main: %196*/
	/*   %position.23.i = phi i32 [ %d3.143.i, %194 ], [ %position.2242.i, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__194_252) & (memory_controller_waitrequest == 1'd0))) begin
		main_196_position23i_reg <= main_196_position23i;
		if (start == 1'b0 && ^(main_196_position23i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_196_position23i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %196*/
	/*   %indvar.next31 = add i32 %indvar30, 1*/
		main_196_indvarnext31 = (main_188_indvar30_reg + 32'd1);
end
always @(*) begin
	/* main: %196*/
	/*   %exitcond33 = icmp eq i32 %indvar.next31, %187*/
		main_196_exitcond33 = (main_196_indvarnext31 == main_lrph45i_187_reg);
end
always @(*) begin
	/* main: %._crit_edge46.i*/
	/*   %197 = icmp sgt i32 %18, 91*/
		main__crit_edge46i_197 = ($signed(main_lrph27i_18_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %198*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %263 ], [ 0, %.lr.ph50.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph50i_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_198_indvar35 = 32'd0;
	end
	/* main: %198*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %263 ], [ 0, %.lr.ph50.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__263_331) & (memory_controller_waitrequest == 1'd0)) & (main_263_264 == 1'd0))) */ begin
		main_198_indvar35 = main_263_indvarnext36;
	end
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %263 ], [ 0, %.lr.ph50.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph50i_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_198_indvar35_reg <= main_198_indvar35;
		if (start == 1'b0 && ^(main_198_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_indvar35_reg"); $finish; end
	end
	/* main: %198*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %263 ], [ 0, %.lr.ph50.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__263_331) & (memory_controller_waitrequest == 1'd0)) & (main_263_264 == 1'd0))) begin
		main_198_indvar35_reg <= main_198_indvar35;
		if (start == 1'b0 && ^(main_198_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_indvar35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %position.2447.i = phi i32 [ %position.33.i, %263 ], [ %19, %.lr.ph50.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph50i_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_198_position2447i = main_lrph27i_19_reg;
	end
	/* main: %198*/
	/*   %position.2447.i = phi i32 [ %position.33.i, %263 ], [ %19, %.lr.ph50.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__263_331) & (memory_controller_waitrequest == 1'd0)) & (main_263_264 == 1'd0))) */ begin
		main_198_position2447i = main_263_position33i_reg;
	end
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %position.2447.i = phi i32 [ %position.33.i, %263 ], [ %19, %.lr.ph50.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph50i_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_198_position2447i_reg <= main_198_position2447i;
		if (start == 1'b0 && ^(main_198_position2447i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_position2447i_reg"); $finish; end
	end
	/* main: %198*/
	/*   %position.2447.i = phi i32 [ %position.33.i, %263 ], [ %19, %.lr.ph50.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__263_331) & (memory_controller_waitrequest == 1'd0)) & (main_263_264 == 1'd0))) begin
		main_198_position2447i_reg <= main_198_position2447i;
		if (start == 1'b0 && ^(main_198_position2447i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_position2447i_reg"); $finish; end
	end
end
always @(*) begin
	main_198_199 = main_198_199_stage0_reg;
end
always @(*) begin
	/* main: %198*/
	/*   %d4.048.i = add i32 %18, %199*/
		main_198_d4048i = (main_lrph27i_18_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %d4.048.i = add i32 %18, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_d4048i_reg <= main_198_d4048i;
		if (start == 1'b0 && ^(main_198_d4048i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_d4048i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep45 = getelementptr [100 x i32]* @y, i32 0, i32 %d4.048.i*/
		main_198_scevgep45 = (`TAG_g_y_a + (4 * main_198_d4048i_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep45 = getelementptr [100 x i32]* @y, i32 0, i32 %d4.048.i*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep45_reg <= main_198_scevgep45;
		if (start == 1'b0 && ^(main_198_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %200 = add i32 %17, %199*/
		main_198_200 = (main_lrph27i_17_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %200 = add i32 %17, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_200_reg <= main_198_200;
		if (start == 1'b0 && ^(main_198_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep44 = getelementptr [100 x i32]* @y, i32 0, i32 %200*/
		main_198_scevgep44 = (`TAG_g_y_a + (4 * main_198_200_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep44 = getelementptr [100 x i32]* @y, i32 0, i32 %200*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep44_reg <= main_198_scevgep44;
		if (start == 1'b0 && ^(main_198_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %201 = add i32 %16, %199*/
		main_198_201 = (main_lrph27i_16_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %201 = add i32 %16, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_201_reg <= main_198_201;
		if (start == 1'b0 && ^(main_198_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep43 = getelementptr [100 x i32]* @y, i32 0, i32 %201*/
		main_198_scevgep43 = (`TAG_g_y_a + (4 * main_198_201_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep43 = getelementptr [100 x i32]* @y, i32 0, i32 %201*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep43_reg <= main_198_scevgep43;
		if (start == 1'b0 && ^(main_198_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %202 = add i32 %15, %199*/
		main_198_202 = (main_lrph27i_15_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %202 = add i32 %15, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_202_reg <= main_198_202;
		if (start == 1'b0 && ^(main_198_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep42 = getelementptr [100 x i32]* @y, i32 0, i32 %202*/
		main_198_scevgep42 = (`TAG_g_y_a + (4 * main_198_202_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep42 = getelementptr [100 x i32]* @y, i32 0, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep42_reg <= main_198_scevgep42;
		if (start == 1'b0 && ^(main_198_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %203 = add i32 %14, %199*/
		main_198_203 = (main_lrph27i_14_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %203 = add i32 %14, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_203_reg <= main_198_203;
		if (start == 1'b0 && ^(main_198_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep41 = getelementptr [100 x i32]* @y, i32 0, i32 %203*/
		main_198_scevgep41 = (`TAG_g_y_a + (4 * main_198_203_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep41 = getelementptr [100 x i32]* @y, i32 0, i32 %203*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep41_reg <= main_198_scevgep41;
		if (start == 1'b0 && ^(main_198_scevgep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %204 = add i32 %13, %199*/
		main_198_204 = (main_lrph27i_13_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %204 = add i32 %13, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_204_reg <= main_198_204;
		if (start == 1'b0 && ^(main_198_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep40 = getelementptr [100 x i32]* @y, i32 0, i32 %204*/
		main_198_scevgep40 = (`TAG_g_y_a + (4 * main_198_204_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep40 = getelementptr [100 x i32]* @y, i32 0, i32 %204*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep40_reg <= main_198_scevgep40;
		if (start == 1'b0 && ^(main_198_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %205 = add i32 %3, %199*/
		main_198_205 = (main_lrph27i_3_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %205 = add i32 %3, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_205_reg <= main_198_205;
		if (start == 1'b0 && ^(main_198_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep39 = getelementptr [100 x i32]* @y, i32 0, i32 %205*/
		main_198_scevgep39 = (`TAG_g_y_a + (4 * main_198_205_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep39 = getelementptr [100 x i32]* @y, i32 0, i32 %205*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep39_reg <= main_198_scevgep39;
		if (start == 1'b0 && ^(main_198_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %206 = add i32 %4, %199*/
		main_198_206 = (main_lrph27i_4_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %206 = add i32 %4, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_206_reg <= main_198_206;
		if (start == 1'b0 && ^(main_198_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep38 = getelementptr [100 x i32]* @y, i32 0, i32 %206*/
		main_198_scevgep38 = (`TAG_g_y_a + (4 * main_198_206_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep38 = getelementptr [100 x i32]* @y, i32 0, i32 %206*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep38_reg <= main_198_scevgep38;
		if (start == 1'b0 && ^(main_198_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %207 = add i32 %5, %199*/
		main_198_207 = (main_lrph27i_5_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %207 = add i32 %5, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_207_reg <= main_198_207;
		if (start == 1'b0 && ^(main_198_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %scevgep37 = getelementptr [100 x i32]* @y, i32 0, i32 %207*/
		main_198_scevgep37 = (`TAG_g_y_a + (4 * main_198_207_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %scevgep37 = getelementptr [100 x i32]* @y, i32 0, i32 %207*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_scevgep37_reg <= main_198_scevgep37;
		if (start == 1'b0 && ^(main_198_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_scevgep37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %208 = add i32 %6, %199*/
		main_198_208 = (main_lrph27i_6_reg + main_198_199);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %208 = add i32 %6, %199*/
	if ((cur_state == LEGUP_F_main_BB__198_258)) begin
		main_198_208_reg <= main_198_208;
		if (start == 1'b0 && ^(main_198_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %209 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.2447.i*/
		main_198_209 = (`TAG_g_y_a + (4 * main_198_position2447i_reg));
end
always @(*) begin
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
		main_198_210 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		main_198_210_reg <= main_198_210;
		if (start == 1'b0 && ^(main_198_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
		main_198_211 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_261)) begin
		main_198_211_reg <= main_198_211;
		if (start == 1'b0 && ^(main_198_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %212 = icmp sgt i32 %210, %211*/
		main_198_212 = ($signed(main_198_210_reg) > $signed(main_198_211));
end
always @(*) begin
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_213_214 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		main_213_214_reg <= main_213_214;
		if (start == 1'b0 && ^(main_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %216 = phi i32 [ %214, %213 ], [ %210, %198 ]*/
	if ((((cur_state == LEGUP_F_main_BB__198_261) & (memory_controller_waitrequest == 1'd0)) & (main_198_212 == 1'd0))) begin
		main_215_216 = main_198_210_reg;
	end
	/* main: %215*/
	/*   %216 = phi i32 [ %214, %213 ], [ %210, %198 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__213_266) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_215_216 = main_213_214_reg;
	end
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %216 = phi i32 [ %214, %213 ], [ %210, %198 ]*/
	if ((((cur_state == LEGUP_F_main_BB__198_261) & (memory_controller_waitrequest == 1'd0)) & (main_198_212 == 1'd0))) begin
		main_215_216_reg <= main_215_216;
		if (start == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
	end
	/* main: %215*/
	/*   %216 = phi i32 [ %214, %213 ], [ %210, %198 ]*/
	if (((cur_state == LEGUP_F_main_BB__213_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_215_216_reg <= main_215_216;
		if (start == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %position.25.i = phi i32 [ %d4.048.i, %213 ], [ %position.2447.i, %198 ]*/
	if ((((cur_state == LEGUP_F_main_BB__198_261) & (memory_controller_waitrequest == 1'd0)) & (main_198_212 == 1'd0))) begin
		main_215_position25i = main_198_position2447i_reg;
	end
	/* main: %215*/
	/*   %position.25.i = phi i32 [ %d4.048.i, %213 ], [ %position.2447.i, %198 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__213_266) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_215_position25i = main_198_d4048i_reg;
	end
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %position.25.i = phi i32 [ %d4.048.i, %213 ], [ %position.2447.i, %198 ]*/
	if ((((cur_state == LEGUP_F_main_BB__198_261) & (memory_controller_waitrequest == 1'd0)) & (main_198_212 == 1'd0))) begin
		main_215_position25i_reg <= main_215_position25i;
		if (start == 1'b0 && ^(main_215_position25i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_position25i_reg"); $finish; end
	end
	/* main: %215*/
	/*   %position.25.i = phi i32 [ %d4.048.i, %213 ], [ %position.2447.i, %198 ]*/
	if (((cur_state == LEGUP_F_main_BB__213_266) & (memory_controller_waitrequest == 1'd0))) begin
		main_215_position25i_reg <= main_215_position25i;
		if (start == 1'b0 && ^(main_215_position25i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_position25i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
		main_215_217 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_269)) begin
		main_215_217_reg <= main_215_217;
		if (start == 1'b0 && ^(main_215_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %218 = icmp sgt i32 %216, %217*/
		main_215_218 = ($signed(main_215_216_reg) > $signed(main_215_217));
end
always @(*) begin
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_219_220 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		main_219_220_reg <= main_219_220;
		if (start == 1'b0 && ^(main_219_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_219_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %221*/
	/*   %222 = phi i32 [ %220, %219 ], [ %216, %215 ]*/
	if ((((cur_state == LEGUP_F_main_BB__215_269) & (memory_controller_waitrequest == 1'd0)) & (main_215_218 == 1'd0))) begin
		main_221_222 = main_215_216_reg;
	end
	/* main: %221*/
	/*   %222 = phi i32 [ %220, %219 ], [ %216, %215 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__219_274) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_221_222 = main_219_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %221*/
	/*   %222 = phi i32 [ %220, %219 ], [ %216, %215 ]*/
	if ((((cur_state == LEGUP_F_main_BB__215_269) & (memory_controller_waitrequest == 1'd0)) & (main_215_218 == 1'd0))) begin
		main_221_222_reg <= main_221_222;
		if (start == 1'b0 && ^(main_221_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_222_reg"); $finish; end
	end
	/* main: %221*/
	/*   %222 = phi i32 [ %220, %219 ], [ %216, %215 ]*/
	if (((cur_state == LEGUP_F_main_BB__219_274) & (memory_controller_waitrequest == 1'd0))) begin
		main_221_222_reg <= main_221_222;
		if (start == 1'b0 && ^(main_221_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %221*/
	/*   %position.26.i = phi i32 [ %200, %219 ], [ %position.25.i, %215 ]*/
	if ((((cur_state == LEGUP_F_main_BB__215_269) & (memory_controller_waitrequest == 1'd0)) & (main_215_218 == 1'd0))) begin
		main_221_position26i = main_215_position25i_reg;
	end
	/* main: %221*/
	/*   %position.26.i = phi i32 [ %200, %219 ], [ %position.25.i, %215 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__219_274) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_221_position26i = main_198_200_reg;
	end
end
always @(posedge clk) begin
	/* main: %221*/
	/*   %position.26.i = phi i32 [ %200, %219 ], [ %position.25.i, %215 ]*/
	if ((((cur_state == LEGUP_F_main_BB__215_269) & (memory_controller_waitrequest == 1'd0)) & (main_215_218 == 1'd0))) begin
		main_221_position26i_reg <= main_221_position26i;
		if (start == 1'b0 && ^(main_221_position26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_position26i_reg"); $finish; end
	end
	/* main: %221*/
	/*   %position.26.i = phi i32 [ %200, %219 ], [ %position.25.i, %215 ]*/
	if (((cur_state == LEGUP_F_main_BB__219_274) & (memory_controller_waitrequest == 1'd0))) begin
		main_221_position26i_reg <= main_221_position26i;
		if (start == 1'b0 && ^(main_221_position26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_position26i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
		main_221_223 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__221_277)) begin
		main_221_223_reg <= main_221_223;
		if (start == 1'b0 && ^(main_221_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %221*/
	/*   %224 = icmp sgt i32 %222, %223*/
		main_221_224 = ($signed(main_221_222_reg) > $signed(main_221_223));
end
always @(*) begin
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_225_226 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %228 = phi i32 [ %226, %225 ], [ %222, %221 ]*/
	if ((((cur_state == LEGUP_F_main_BB__221_277) & (memory_controller_waitrequest == 1'd0)) & (main_221_224 == 1'd0))) begin
		main_227_228 = main_221_222_reg;
	end
	/* main: %227*/
	/*   %228 = phi i32 [ %226, %225 ], [ %222, %221 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_282) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_227_228 = main_225_226_reg;
	end
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %228 = phi i32 [ %226, %225 ], [ %222, %221 ]*/
	if ((((cur_state == LEGUP_F_main_BB__221_277) & (memory_controller_waitrequest == 1'd0)) & (main_221_224 == 1'd0))) begin
		main_227_228_reg <= main_227_228;
		if (start == 1'b0 && ^(main_227_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_228_reg"); $finish; end
	end
	/* main: %227*/
	/*   %228 = phi i32 [ %226, %225 ], [ %222, %221 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_227_228_reg <= main_227_228;
		if (start == 1'b0 && ^(main_227_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %position.27.i = phi i32 [ %201, %225 ], [ %position.26.i, %221 ]*/
	if ((((cur_state == LEGUP_F_main_BB__221_277) & (memory_controller_waitrequest == 1'd0)) & (main_221_224 == 1'd0))) begin
		main_227_position27i = main_221_position26i_reg;
	end
	/* main: %227*/
	/*   %position.27.i = phi i32 [ %201, %225 ], [ %position.26.i, %221 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_282) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_227_position27i = main_198_201_reg;
	end
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %position.27.i = phi i32 [ %201, %225 ], [ %position.26.i, %221 ]*/
	if ((((cur_state == LEGUP_F_main_BB__221_277) & (memory_controller_waitrequest == 1'd0)) & (main_221_224 == 1'd0))) begin
		main_227_position27i_reg <= main_227_position27i;
		if (start == 1'b0 && ^(main_227_position27i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_position27i_reg"); $finish; end
	end
	/* main: %227*/
	/*   %position.27.i = phi i32 [ %201, %225 ], [ %position.26.i, %221 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_227_position27i_reg <= main_227_position27i;
		if (start == 1'b0 && ^(main_227_position27i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_position27i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
		main_227_229 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__227_285)) begin
		main_227_229_reg <= main_227_229;
		if (start == 1'b0 && ^(main_227_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %230 = icmp sgt i32 %228, %229*/
		main_227_230 = ($signed(main_227_228_reg) > $signed(main_227_229));
end
always @(*) begin
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_231_232 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		main_231_232_reg <= main_231_232;
		if (start == 1'b0 && ^(main_231_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %234 = phi i32 [ %232, %231 ], [ %228, %227 ]*/
	if ((((cur_state == LEGUP_F_main_BB__227_285) & (memory_controller_waitrequest == 1'd0)) & (main_227_230 == 1'd0))) begin
		main_233_234 = main_227_228_reg;
	end
	/* main: %233*/
	/*   %234 = phi i32 [ %232, %231 ], [ %228, %227 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__231_290) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_233_234 = main_231_232_reg;
	end
end
always @(posedge clk) begin
	/* main: %233*/
	/*   %234 = phi i32 [ %232, %231 ], [ %228, %227 ]*/
	if ((((cur_state == LEGUP_F_main_BB__227_285) & (memory_controller_waitrequest == 1'd0)) & (main_227_230 == 1'd0))) begin
		main_233_234_reg <= main_233_234;
		if (start == 1'b0 && ^(main_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_234_reg"); $finish; end
	end
	/* main: %233*/
	/*   %234 = phi i32 [ %232, %231 ], [ %228, %227 ]*/
	if (((cur_state == LEGUP_F_main_BB__231_290) & (memory_controller_waitrequest == 1'd0))) begin
		main_233_234_reg <= main_233_234;
		if (start == 1'b0 && ^(main_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %position.28.i = phi i32 [ %202, %231 ], [ %position.27.i, %227 ]*/
	if ((((cur_state == LEGUP_F_main_BB__227_285) & (memory_controller_waitrequest == 1'd0)) & (main_227_230 == 1'd0))) begin
		main_233_position28i = main_227_position27i_reg;
	end
	/* main: %233*/
	/*   %position.28.i = phi i32 [ %202, %231 ], [ %position.27.i, %227 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__231_290) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_233_position28i = main_198_202_reg;
	end
end
always @(posedge clk) begin
	/* main: %233*/
	/*   %position.28.i = phi i32 [ %202, %231 ], [ %position.27.i, %227 ]*/
	if ((((cur_state == LEGUP_F_main_BB__227_285) & (memory_controller_waitrequest == 1'd0)) & (main_227_230 == 1'd0))) begin
		main_233_position28i_reg <= main_233_position28i;
		if (start == 1'b0 && ^(main_233_position28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_position28i_reg"); $finish; end
	end
	/* main: %233*/
	/*   %position.28.i = phi i32 [ %202, %231 ], [ %position.27.i, %227 ]*/
	if (((cur_state == LEGUP_F_main_BB__231_290) & (memory_controller_waitrequest == 1'd0))) begin
		main_233_position28i_reg <= main_233_position28i;
		if (start == 1'b0 && ^(main_233_position28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_position28i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
		main_233_235 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_293)) begin
		main_233_235_reg <= main_233_235;
		if (start == 1'b0 && ^(main_233_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %236 = icmp sgt i32 %234, %235*/
		main_233_236 = ($signed(main_233_234_reg) > $signed(main_233_235));
end
always @(*) begin
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_237_238 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		main_237_238_reg <= main_237_238;
		if (start == 1'b0 && ^(main_237_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_237_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %240 = phi i32 [ %238, %237 ], [ %234, %233 ]*/
	if ((((cur_state == LEGUP_F_main_BB__233_293) & (memory_controller_waitrequest == 1'd0)) & (main_233_236 == 1'd0))) begin
		main_239_240 = main_233_234_reg;
	end
	/* main: %239*/
	/*   %240 = phi i32 [ %238, %237 ], [ %234, %233 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__237_298) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_240 = main_237_238_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %240 = phi i32 [ %238, %237 ], [ %234, %233 ]*/
	if ((((cur_state == LEGUP_F_main_BB__233_293) & (memory_controller_waitrequest == 1'd0)) & (main_233_236 == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
	/* main: %239*/
	/*   %240 = phi i32 [ %238, %237 ], [ %234, %233 ]*/
	if (((cur_state == LEGUP_F_main_BB__237_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %position.29.i = phi i32 [ %203, %237 ], [ %position.28.i, %233 ]*/
	if ((((cur_state == LEGUP_F_main_BB__233_293) & (memory_controller_waitrequest == 1'd0)) & (main_233_236 == 1'd0))) begin
		main_239_position29i = main_233_position28i_reg;
	end
	/* main: %239*/
	/*   %position.29.i = phi i32 [ %203, %237 ], [ %position.28.i, %233 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__237_298) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_position29i = main_198_203_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %position.29.i = phi i32 [ %203, %237 ], [ %position.28.i, %233 ]*/
	if ((((cur_state == LEGUP_F_main_BB__233_293) & (memory_controller_waitrequest == 1'd0)) & (main_233_236 == 1'd0))) begin
		main_239_position29i_reg <= main_239_position29i;
		if (start == 1'b0 && ^(main_239_position29i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_position29i_reg"); $finish; end
	end
	/* main: %239*/
	/*   %position.29.i = phi i32 [ %203, %237 ], [ %position.28.i, %233 ]*/
	if (((cur_state == LEGUP_F_main_BB__237_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_position29i_reg <= main_239_position29i;
		if (start == 1'b0 && ^(main_239_position29i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_position29i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
		main_239_241 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_301)) begin
		main_239_241_reg <= main_239_241;
		if (start == 1'b0 && ^(main_239_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %242 = icmp sgt i32 %240, %241*/
		main_239_242 = ($signed(main_239_240_reg) > $signed(main_239_241));
end
always @(*) begin
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_243_244 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		main_243_244_reg <= main_243_244;
		if (start == 1'b0 && ^(main_243_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_243_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %246 = phi i32 [ %244, %243 ], [ %240, %239 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_301) & (memory_controller_waitrequest == 1'd0)) & (main_239_242 == 1'd0))) begin
		main_245_246 = main_239_240_reg;
	end
	/* main: %245*/
	/*   %246 = phi i32 [ %244, %243 ], [ %240, %239 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_306) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_246 = main_243_244_reg;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %246 = phi i32 [ %244, %243 ], [ %240, %239 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_301) & (memory_controller_waitrequest == 1'd0)) & (main_239_242 == 1'd0))) begin
		main_245_246_reg <= main_245_246;
		if (start == 1'b0 && ^(main_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_246_reg"); $finish; end
	end
	/* main: %245*/
	/*   %246 = phi i32 [ %244, %243 ], [ %240, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__243_306) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_246_reg <= main_245_246;
		if (start == 1'b0 && ^(main_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %position.30.i = phi i32 [ %204, %243 ], [ %position.29.i, %239 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_301) & (memory_controller_waitrequest == 1'd0)) & (main_239_242 == 1'd0))) begin
		main_245_position30i = main_239_position29i_reg;
	end
	/* main: %245*/
	/*   %position.30.i = phi i32 [ %204, %243 ], [ %position.29.i, %239 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_306) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_position30i = main_198_204_reg;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %position.30.i = phi i32 [ %204, %243 ], [ %position.29.i, %239 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_301) & (memory_controller_waitrequest == 1'd0)) & (main_239_242 == 1'd0))) begin
		main_245_position30i_reg <= main_245_position30i;
		if (start == 1'b0 && ^(main_245_position30i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_position30i_reg"); $finish; end
	end
	/* main: %245*/
	/*   %position.30.i = phi i32 [ %204, %243 ], [ %position.29.i, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__243_306) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_position30i_reg <= main_245_position30i;
		if (start == 1'b0 && ^(main_245_position30i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_position30i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
		main_245_247 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__245_309)) begin
		main_245_247_reg <= main_245_247;
		if (start == 1'b0 && ^(main_245_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %248 = icmp sgt i32 %246, %247*/
		main_245_248 = ($signed(main_245_246_reg) > $signed(main_245_247));
end
always @(*) begin
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_249_250 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		main_249_250_reg <= main_249_250;
		if (start == 1'b0 && ^(main_249_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_249_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %252 = phi i32 [ %250, %249 ], [ %246, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB__245_309) & (memory_controller_waitrequest == 1'd0)) & (main_245_248 == 1'd0))) begin
		main_251_252 = main_245_246_reg;
	end
	/* main: %251*/
	/*   %252 = phi i32 [ %250, %249 ], [ %246, %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__249_314) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_251_252 = main_249_250_reg;
	end
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %252 = phi i32 [ %250, %249 ], [ %246, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB__245_309) & (memory_controller_waitrequest == 1'd0)) & (main_245_248 == 1'd0))) begin
		main_251_252_reg <= main_251_252;
		if (start == 1'b0 && ^(main_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_252_reg"); $finish; end
	end
	/* main: %251*/
	/*   %252 = phi i32 [ %250, %249 ], [ %246, %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__249_314) & (memory_controller_waitrequest == 1'd0))) begin
		main_251_252_reg <= main_251_252;
		if (start == 1'b0 && ^(main_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %position.31.i = phi i32 [ %205, %249 ], [ %position.30.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB__245_309) & (memory_controller_waitrequest == 1'd0)) & (main_245_248 == 1'd0))) begin
		main_251_position31i = main_245_position30i_reg;
	end
	/* main: %251*/
	/*   %position.31.i = phi i32 [ %205, %249 ], [ %position.30.i, %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__249_314) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_251_position31i = main_198_205_reg;
	end
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %position.31.i = phi i32 [ %205, %249 ], [ %position.30.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB__245_309) & (memory_controller_waitrequest == 1'd0)) & (main_245_248 == 1'd0))) begin
		main_251_position31i_reg <= main_251_position31i;
		if (start == 1'b0 && ^(main_251_position31i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_position31i_reg"); $finish; end
	end
	/* main: %251*/
	/*   %position.31.i = phi i32 [ %205, %249 ], [ %position.30.i, %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__249_314) & (memory_controller_waitrequest == 1'd0))) begin
		main_251_position31i_reg <= main_251_position31i;
		if (start == 1'b0 && ^(main_251_position31i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_position31i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
		main_251_253 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_317)) begin
		main_251_253_reg <= main_251_253;
		if (start == 1'b0 && ^(main_251_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %254 = icmp sgt i32 %252, %253*/
		main_251_254 = ($signed(main_251_252_reg) > $signed(main_251_253));
end
always @(*) begin
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_255_256 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		main_255_256_reg <= main_255_256;
		if (start == 1'b0 && ^(main_255_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_255_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %258 = phi i32 [ %256, %255 ], [ %252, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_317) & (memory_controller_waitrequest == 1'd0)) & (main_251_254 == 1'd0))) begin
		main_257_258 = main_251_252_reg;
	end
	/* main: %257*/
	/*   %258 = phi i32 [ %256, %255 ], [ %252, %251 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__255_322) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_257_258 = main_255_256_reg;
	end
end
always @(posedge clk) begin
	/* main: %257*/
	/*   %258 = phi i32 [ %256, %255 ], [ %252, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_317) & (memory_controller_waitrequest == 1'd0)) & (main_251_254 == 1'd0))) begin
		main_257_258_reg <= main_257_258;
		if (start == 1'b0 && ^(main_257_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_258_reg"); $finish; end
	end
	/* main: %257*/
	/*   %258 = phi i32 [ %256, %255 ], [ %252, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB__255_322) & (memory_controller_waitrequest == 1'd0))) begin
		main_257_258_reg <= main_257_258;
		if (start == 1'b0 && ^(main_257_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %position.32.i = phi i32 [ %206, %255 ], [ %position.31.i, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_317) & (memory_controller_waitrequest == 1'd0)) & (main_251_254 == 1'd0))) begin
		main_257_position32i = main_251_position31i_reg;
	end
	/* main: %257*/
	/*   %position.32.i = phi i32 [ %206, %255 ], [ %position.31.i, %251 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__255_322) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_257_position32i = main_198_206_reg;
	end
end
always @(posedge clk) begin
	/* main: %257*/
	/*   %position.32.i = phi i32 [ %206, %255 ], [ %position.31.i, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_317) & (memory_controller_waitrequest == 1'd0)) & (main_251_254 == 1'd0))) begin
		main_257_position32i_reg <= main_257_position32i;
		if (start == 1'b0 && ^(main_257_position32i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_position32i_reg"); $finish; end
	end
	/* main: %257*/
	/*   %position.32.i = phi i32 [ %206, %255 ], [ %position.31.i, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB__255_322) & (memory_controller_waitrequest == 1'd0))) begin
		main_257_position32i_reg <= main_257_position32i;
		if (start == 1'b0 && ^(main_257_position32i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_position32i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
		main_257_259 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__257_325)) begin
		main_257_259_reg <= main_257_259;
		if (start == 1'b0 && ^(main_257_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %260 = icmp sgt i32 %258, %259*/
		main_257_260 = ($signed(main_257_258_reg) > $signed(main_257_259));
end
always @(*) begin
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_261_262 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		main_261_262_reg <= main_261_262;
		if (start == 1'b0 && ^(main_261_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %263*/
	/*   %position.33.i = phi i32 [ %207, %261 ], [ %position.32.i, %257 ]*/
	if ((((cur_state == LEGUP_F_main_BB__257_325) & (memory_controller_waitrequest == 1'd0)) & (main_257_260 == 1'd0))) begin
		main_263_position33i = main_257_position32i_reg;
	end
	/* main: %263*/
	/*   %position.33.i = phi i32 [ %207, %261 ], [ %position.32.i, %257 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__261_330) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_263_position33i = main_198_207_reg;
	end
end
always @(posedge clk) begin
	/* main: %263*/
	/*   %position.33.i = phi i32 [ %207, %261 ], [ %position.32.i, %257 ]*/
	if ((((cur_state == LEGUP_F_main_BB__257_325) & (memory_controller_waitrequest == 1'd0)) & (main_257_260 == 1'd0))) begin
		main_263_position33i_reg <= main_263_position33i;
		if (start == 1'b0 && ^(main_263_position33i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_263_position33i_reg"); $finish; end
	end
	/* main: %263*/
	/*   %position.33.i = phi i32 [ %207, %261 ], [ %position.32.i, %257 ]*/
	if (((cur_state == LEGUP_F_main_BB__261_330) & (memory_controller_waitrequest == 1'd0))) begin
		main_263_position33i_reg <= main_263_position33i;
		if (start == 1'b0 && ^(main_263_position33i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_263_position33i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %263*/
	/*   %264 = icmp sgt i32 %208, 91*/
		main_263_264 = ($signed(main_198_208_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %263*/
	/*   %indvar.next36 = add i32 %indvar35, 1*/
		main_263_indvarnext36 = (main_198_indvar35_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge51.i*/
	/*   %position.24.lcssa.i = phi i32 [ %19, %._crit_edge46.i ], [ %position.33.i, %._crit_edge51.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge46i_255) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge46i_197 == 1'd1))) begin
		main__crit_edge51i_position24lcssai = main_lrph27i_19_reg;
	end
	/* main: %._crit_edge51.i*/
	/*   %position.24.lcssa.i = phi i32 [ %19, %._crit_edge46.i ], [ %position.33.i, %._crit_edge51.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge51iloopexit_332) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge51i_position24lcssai = main_263_position33i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge51.i*/
	/*   %position.24.lcssa.i = phi i32 [ %19, %._crit_edge46.i ], [ %position.33.i, %._crit_edge51.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge46i_255) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge46i_197 == 1'd1))) begin
		main__crit_edge51i_position24lcssai_reg <= main__crit_edge51i_position24lcssai;
		if (start == 1'b0 && ^(main__crit_edge51i_position24lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge51i_position24lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge51.i*/
	/*   %position.24.lcssa.i = phi i32 [ %19, %._crit_edge46.i ], [ %position.33.i, %._crit_edge51.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge51iloopexit_332) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge51i_position24lcssai_reg <= main__crit_edge51i_position24lcssai;
		if (start == 1'b0 && ^(main__crit_edge51i_position24lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge51i_position24lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge51i_265 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge51.i*/
/*   %265 = srem i32 %28, 9*/
	main__crit_edge51i_265_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge51.i*/
	/*   %266 = sub nsw i32 100, %265*/
		main__crit_edge51i_266 = (32'd100 - main__crit_edge51i_265);
end
always @(*) begin
	/* main: %._crit_edge51.i*/
	/*   %267 = icmp sgt i32 %266, 99*/
		main__crit_edge51i_267 = ($signed(main__crit_edge51i_266) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph56.i*/
	/*   %268 = add i32 %265, -99*/
		main_lrph56i_268 = (main__crit_edge51i_265_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph56.i*/
	/*   %269 = sub i32 100, %265*/
		main_lrph56i_269 = (32'd100 - main__crit_edge51i_265_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph56.i*/
	/*   %269 = sub i32 100, %265*/
	if ((cur_state == LEGUP_F_main_BB_lrph56i_366)) begin
		main_lrph56i_269_reg <= main_lrph56i_269;
		if (start == 1'b0 && ^(main_lrph56i_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph56i_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph56.i*/
	/*   %270 = icmp sgt i32 %269, 99*/
		main_lrph56i_270 = ($signed(main_lrph56i_269) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph56.i*/
	/*   %smax48 = select i1 %270, i32 %269, i32 99*/
		main_lrph56i_smax48 = (main_lrph56i_270 ? main_lrph56i_269 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph56.i*/
	/*   %271 = add i32 %268, %smax48*/
		main_lrph56i_271 = (main_lrph56i_268 + main_lrph56i_smax48);
end
always @(posedge clk) begin
	/* main: %.lr.ph56.i*/
	/*   %271 = add i32 %268, %smax48*/
	if ((cur_state == LEGUP_F_main_BB_lrph56i_366)) begin
		main_lrph56i_271_reg <= main_lrph56i_271;
		if (start == 1'b0 && ^(main_lrph56i_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph56i_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %indvar46 = phi i32 [ %indvar.next47, %280 ], [ 0, %.lr.ph56.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph56i_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_indvar46 = 32'd0;
	end
	/* main: %272*/
	/*   %indvar46 = phi i32 [ %indvar.next47, %280 ], [ 0, %.lr.ph56.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__280_376) & (memory_controller_waitrequest == 1'd0)) & (main_280_exitcond49 == 1'd0))) */ begin
		main_272_indvar46 = main_280_indvarnext47;
	end
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %indvar46 = phi i32 [ %indvar.next47, %280 ], [ 0, %.lr.ph56.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph56i_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_indvar46_reg <= main_272_indvar46;
		if (start == 1'b0 && ^(main_272_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_indvar46_reg"); $finish; end
	end
	/* main: %272*/
	/*   %indvar46 = phi i32 [ %indvar.next47, %280 ], [ 0, %.lr.ph56.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__280_376) & (memory_controller_waitrequest == 1'd0)) & (main_280_exitcond49 == 1'd0))) begin
		main_272_indvar46_reg <= main_272_indvar46;
		if (start == 1'b0 && ^(main_272_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_indvar46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %position.3453.i = phi i32 [ %position.35.i, %280 ], [ %position.24.lcssa.i, %.lr.ph56.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph56i_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_position3453i = main__crit_edge51i_position24lcssai_reg;
	end
	/* main: %272*/
	/*   %position.3453.i = phi i32 [ %position.35.i, %280 ], [ %position.24.lcssa.i, %.lr.ph56.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__280_376) & (memory_controller_waitrequest == 1'd0)) & (main_280_exitcond49 == 1'd0))) */ begin
		main_272_position3453i = main_280_position35i_reg;
	end
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %position.3453.i = phi i32 [ %position.35.i, %280 ], [ %position.24.lcssa.i, %.lr.ph56.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph56i_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_position3453i_reg <= main_272_position3453i;
		if (start == 1'b0 && ^(main_272_position3453i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_position3453i_reg"); $finish; end
	end
	/* main: %272*/
	/*   %position.3453.i = phi i32 [ %position.35.i, %280 ], [ %position.24.lcssa.i, %.lr.ph56.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__280_376) & (memory_controller_waitrequest == 1'd0)) & (main_280_exitcond49 == 1'd0))) begin
		main_272_position3453i_reg <= main_272_position3453i;
		if (start == 1'b0 && ^(main_272_position3453i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_position3453i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %273 = sub i32 %indvar46, %265*/
		main_272_273 = (main_272_indvar46_reg - main__crit_edge51i_265_reg);
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %273 = sub i32 %indvar46, %265*/
	if ((cur_state == LEGUP_F_main_BB__272_367)) begin
		main_272_273_reg <= main_272_273;
		if (start == 1'b0 && ^(main_272_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %scevgep50 = getelementptr [100 x i32]* @y, i32 1, i32 %273*/
		main_272_scevgep50 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_272_273_reg)));
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %scevgep50 = getelementptr [100 x i32]* @y, i32 1, i32 %273*/
	if ((cur_state == LEGUP_F_main_BB__272_368)) begin
		main_272_scevgep50_reg <= main_272_scevgep50;
		if (start == 1'b0 && ^(main_272_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %274 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.3453.i*/
		main_272_274 = (`TAG_g_y_a + (4 * main_272_position3453i_reg));
end
always @(*) begin
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
		main_272_275 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_369)) begin
		main_272_275_reg <= main_272_275;
		if (start == 1'b0 && ^(main_272_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
		main_272_276 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_370)) begin
		main_272_276_reg <= main_272_276;
		if (start == 1'b0 && ^(main_272_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %277 = icmp sgt i32 %275, %276*/
		main_272_277 = ($signed(main_272_275_reg) > $signed(main_272_276));
end
always @(*) begin
	/* main: %278*/
	/*   %d4.154.i = add i32 %269, %indvar46*/
		main_278_d4154i = (main_lrph56i_269_reg + main_272_indvar46_reg);
end
always @(posedge clk) begin
	/* main: %278*/
	/*   %d4.154.i = add i32 %269, %indvar46*/
	if ((cur_state == LEGUP_F_main_BB__278_371)) begin
		main_278_d4154i_reg <= main_278_d4154i;
		if (start == 1'b0 && ^(main_278_d4154i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_278_d4154i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
		main_278_279 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		main_278_279_reg <= main_278_279;
		if (start == 1'b0 && ^(main_278_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_278_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %280*/
	/*   %position.35.i = phi i32 [ %d4.154.i, %278 ], [ %position.3453.i, %272 ]*/
	if ((((cur_state == LEGUP_F_main_BB__272_370) & (memory_controller_waitrequest == 1'd0)) & (main_272_277 == 1'd0))) begin
		main_280_position35i = main_272_position3453i_reg;
	end
	/* main: %280*/
	/*   %position.35.i = phi i32 [ %d4.154.i, %278 ], [ %position.3453.i, %272 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__278_375) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_280_position35i = main_278_d4154i_reg;
	end
end
always @(posedge clk) begin
	/* main: %280*/
	/*   %position.35.i = phi i32 [ %d4.154.i, %278 ], [ %position.3453.i, %272 ]*/
	if ((((cur_state == LEGUP_F_main_BB__272_370) & (memory_controller_waitrequest == 1'd0)) & (main_272_277 == 1'd0))) begin
		main_280_position35i_reg <= main_280_position35i;
		if (start == 1'b0 && ^(main_280_position35i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_280_position35i_reg"); $finish; end
	end
	/* main: %280*/
	/*   %position.35.i = phi i32 [ %d4.154.i, %278 ], [ %position.3453.i, %272 ]*/
	if (((cur_state == LEGUP_F_main_BB__278_375) & (memory_controller_waitrequest == 1'd0))) begin
		main_280_position35i_reg <= main_280_position35i;
		if (start == 1'b0 && ^(main_280_position35i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_280_position35i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %280*/
	/*   %indvar.next47 = add i32 %indvar46, 1*/
		main_280_indvarnext47 = (main_272_indvar46_reg + 32'd1);
end
always @(*) begin
	/* main: %280*/
	/*   %exitcond49 = icmp eq i32 %indvar.next47, %271*/
		main_280_exitcond49 = (main_280_indvarnext47 == main_lrph56i_271_reg);
end
always @(*) begin
	/* main: %._crit_edge57.i*/
	/*   %281 = icmp sgt i32 %17, 91*/
		main__crit_edge57i_281 = ($signed(main_lrph27i_17_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %282*/
	/*   %indvar51 = phi i32 [ %indvar.next52, %347 ], [ 0, %.lr.ph61.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph61i_379) & (memory_controller_waitrequest == 1'd0))) begin
		main_282_indvar51 = 32'd0;
	end
	/* main: %282*/
	/*   %indvar51 = phi i32 [ %indvar.next52, %347 ], [ 0, %.lr.ph61.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__347_454) & (memory_controller_waitrequest == 1'd0)) & (main_347_348 == 1'd0))) */ begin
		main_282_indvar51 = main_347_indvarnext52;
	end
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %indvar51 = phi i32 [ %indvar.next52, %347 ], [ 0, %.lr.ph61.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph61i_379) & (memory_controller_waitrequest == 1'd0))) begin
		main_282_indvar51_reg <= main_282_indvar51;
		if (start == 1'b0 && ^(main_282_indvar51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_indvar51_reg"); $finish; end
	end
	/* main: %282*/
	/*   %indvar51 = phi i32 [ %indvar.next52, %347 ], [ 0, %.lr.ph61.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__347_454) & (memory_controller_waitrequest == 1'd0)) & (main_347_348 == 1'd0))) begin
		main_282_indvar51_reg <= main_282_indvar51;
		if (start == 1'b0 && ^(main_282_indvar51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_indvar51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %position.3658.i = phi i32 [ %position.45.i, %347 ], [ %18, %.lr.ph61.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph61i_379) & (memory_controller_waitrequest == 1'd0))) begin
		main_282_position3658i = main_lrph27i_18_reg;
	end
	/* main: %282*/
	/*   %position.3658.i = phi i32 [ %position.45.i, %347 ], [ %18, %.lr.ph61.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__347_454) & (memory_controller_waitrequest == 1'd0)) & (main_347_348 == 1'd0))) */ begin
		main_282_position3658i = main_347_position45i_reg;
	end
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %position.3658.i = phi i32 [ %position.45.i, %347 ], [ %18, %.lr.ph61.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph61i_379) & (memory_controller_waitrequest == 1'd0))) begin
		main_282_position3658i_reg <= main_282_position3658i;
		if (start == 1'b0 && ^(main_282_position3658i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_position3658i_reg"); $finish; end
	end
	/* main: %282*/
	/*   %position.3658.i = phi i32 [ %position.45.i, %347 ], [ %18, %.lr.ph61.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__347_454) & (memory_controller_waitrequest == 1'd0)) & (main_347_348 == 1'd0))) begin
		main_282_position3658i_reg <= main_282_position3658i;
		if (start == 1'b0 && ^(main_282_position3658i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_position3658i_reg"); $finish; end
	end
end
always @(*) begin
	main_282_283 = main_282_283_stage0_reg;
end
always @(*) begin
	/* main: %282*/
	/*   %d5.059.i = add i32 %17, %283*/
		main_282_d5059i = (main_lrph27i_17_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %d5.059.i = add i32 %17, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_d5059i_reg <= main_282_d5059i;
		if (start == 1'b0 && ^(main_282_d5059i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_d5059i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep61 = getelementptr [100 x i32]* @y, i32 0, i32 %d5.059.i*/
		main_282_scevgep61 = (`TAG_g_y_a + (4 * main_282_d5059i_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep61 = getelementptr [100 x i32]* @y, i32 0, i32 %d5.059.i*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep61_reg <= main_282_scevgep61;
		if (start == 1'b0 && ^(main_282_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %284 = add i32 %16, %283*/
		main_282_284 = (main_lrph27i_16_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %284 = add i32 %16, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_284_reg <= main_282_284;
		if (start == 1'b0 && ^(main_282_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep60 = getelementptr [100 x i32]* @y, i32 0, i32 %284*/
		main_282_scevgep60 = (`TAG_g_y_a + (4 * main_282_284_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep60 = getelementptr [100 x i32]* @y, i32 0, i32 %284*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep60_reg <= main_282_scevgep60;
		if (start == 1'b0 && ^(main_282_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %285 = add i32 %15, %283*/
		main_282_285 = (main_lrph27i_15_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %285 = add i32 %15, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_285_reg <= main_282_285;
		if (start == 1'b0 && ^(main_282_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep59 = getelementptr [100 x i32]* @y, i32 0, i32 %285*/
		main_282_scevgep59 = (`TAG_g_y_a + (4 * main_282_285_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep59 = getelementptr [100 x i32]* @y, i32 0, i32 %285*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep59_reg <= main_282_scevgep59;
		if (start == 1'b0 && ^(main_282_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %286 = add i32 %14, %283*/
		main_282_286 = (main_lrph27i_14_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %286 = add i32 %14, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_286_reg <= main_282_286;
		if (start == 1'b0 && ^(main_282_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep58 = getelementptr [100 x i32]* @y, i32 0, i32 %286*/
		main_282_scevgep58 = (`TAG_g_y_a + (4 * main_282_286_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep58 = getelementptr [100 x i32]* @y, i32 0, i32 %286*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep58_reg <= main_282_scevgep58;
		if (start == 1'b0 && ^(main_282_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %287 = add i32 %13, %283*/
		main_282_287 = (main_lrph27i_13_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %287 = add i32 %13, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_287_reg <= main_282_287;
		if (start == 1'b0 && ^(main_282_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep57 = getelementptr [100 x i32]* @y, i32 0, i32 %287*/
		main_282_scevgep57 = (`TAG_g_y_a + (4 * main_282_287_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep57 = getelementptr [100 x i32]* @y, i32 0, i32 %287*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep57_reg <= main_282_scevgep57;
		if (start == 1'b0 && ^(main_282_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %288 = add i32 %3, %283*/
		main_282_288 = (main_lrph27i_3_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %288 = add i32 %3, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_288_reg <= main_282_288;
		if (start == 1'b0 && ^(main_282_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep56 = getelementptr [100 x i32]* @y, i32 0, i32 %288*/
		main_282_scevgep56 = (`TAG_g_y_a + (4 * main_282_288_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep56 = getelementptr [100 x i32]* @y, i32 0, i32 %288*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep56_reg <= main_282_scevgep56;
		if (start == 1'b0 && ^(main_282_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %289 = add i32 %4, %283*/
		main_282_289 = (main_lrph27i_4_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %289 = add i32 %4, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_289_reg <= main_282_289;
		if (start == 1'b0 && ^(main_282_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep55 = getelementptr [100 x i32]* @y, i32 0, i32 %289*/
		main_282_scevgep55 = (`TAG_g_y_a + (4 * main_282_289_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep55 = getelementptr [100 x i32]* @y, i32 0, i32 %289*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep55_reg <= main_282_scevgep55;
		if (start == 1'b0 && ^(main_282_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %290 = add i32 %5, %283*/
		main_282_290 = (main_lrph27i_5_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %290 = add i32 %5, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_290_reg <= main_282_290;
		if (start == 1'b0 && ^(main_282_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep54 = getelementptr [100 x i32]* @y, i32 0, i32 %290*/
		main_282_scevgep54 = (`TAG_g_y_a + (4 * main_282_290_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep54 = getelementptr [100 x i32]* @y, i32 0, i32 %290*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep54_reg <= main_282_scevgep54;
		if (start == 1'b0 && ^(main_282_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %291 = add i32 %6, %283*/
		main_282_291 = (main_lrph27i_6_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %291 = add i32 %6, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_291_reg <= main_282_291;
		if (start == 1'b0 && ^(main_282_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %scevgep53 = getelementptr [100 x i32]* @y, i32 0, i32 %291*/
		main_282_scevgep53 = (`TAG_g_y_a + (4 * main_282_291_reg));
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %scevgep53 = getelementptr [100 x i32]* @y, i32 0, i32 %291*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_scevgep53_reg <= main_282_scevgep53;
		if (start == 1'b0 && ^(main_282_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_scevgep53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %292 = add i32 %7, %283*/
		main_282_292 = (main_lrph27i_7_reg + main_282_283);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %292 = add i32 %7, %283*/
	if ((cur_state == LEGUP_F_main_BB__282_381)) begin
		main_282_292_reg <= main_282_292;
		if (start == 1'b0 && ^(main_282_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %293 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.3658.i*/
		main_282_293 = (`TAG_g_y_a + (4 * main_282_position3658i_reg));
end
always @(*) begin
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
		main_282_294 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		main_282_294_reg <= main_282_294;
		if (start == 1'b0 && ^(main_282_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
		main_282_295 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_384)) begin
		main_282_295_reg <= main_282_295;
		if (start == 1'b0 && ^(main_282_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_282_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %282*/
	/*   %296 = icmp sgt i32 %294, %295*/
		main_282_296 = ($signed(main_282_294_reg) > $signed(main_282_295));
end
always @(*) begin
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_297_298 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		main_297_298_reg <= main_297_298;
		if (start == 1'b0 && ^(main_297_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_297_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %300 = phi i32 [ %298, %297 ], [ %294, %282 ]*/
	if ((((cur_state == LEGUP_F_main_BB__282_384) & (memory_controller_waitrequest == 1'd0)) & (main_282_296 == 1'd0))) begin
		main_299_300 = main_282_294_reg;
	end
	/* main: %299*/
	/*   %300 = phi i32 [ %298, %297 ], [ %294, %282 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__297_389) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_299_300 = main_297_298_reg;
	end
end
always @(posedge clk) begin
	/* main: %299*/
	/*   %300 = phi i32 [ %298, %297 ], [ %294, %282 ]*/
	if ((((cur_state == LEGUP_F_main_BB__282_384) & (memory_controller_waitrequest == 1'd0)) & (main_282_296 == 1'd0))) begin
		main_299_300_reg <= main_299_300;
		if (start == 1'b0 && ^(main_299_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_300_reg"); $finish; end
	end
	/* main: %299*/
	/*   %300 = phi i32 [ %298, %297 ], [ %294, %282 ]*/
	if (((cur_state == LEGUP_F_main_BB__297_389) & (memory_controller_waitrequest == 1'd0))) begin
		main_299_300_reg <= main_299_300;
		if (start == 1'b0 && ^(main_299_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %position.37.i = phi i32 [ %d5.059.i, %297 ], [ %position.3658.i, %282 ]*/
	if ((((cur_state == LEGUP_F_main_BB__282_384) & (memory_controller_waitrequest == 1'd0)) & (main_282_296 == 1'd0))) begin
		main_299_position37i = main_282_position3658i_reg;
	end
	/* main: %299*/
	/*   %position.37.i = phi i32 [ %d5.059.i, %297 ], [ %position.3658.i, %282 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__297_389) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_299_position37i = main_282_d5059i_reg;
	end
end
always @(posedge clk) begin
	/* main: %299*/
	/*   %position.37.i = phi i32 [ %d5.059.i, %297 ], [ %position.3658.i, %282 ]*/
	if ((((cur_state == LEGUP_F_main_BB__282_384) & (memory_controller_waitrequest == 1'd0)) & (main_282_296 == 1'd0))) begin
		main_299_position37i_reg <= main_299_position37i;
		if (start == 1'b0 && ^(main_299_position37i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_position37i_reg"); $finish; end
	end
	/* main: %299*/
	/*   %position.37.i = phi i32 [ %d5.059.i, %297 ], [ %position.3658.i, %282 ]*/
	if (((cur_state == LEGUP_F_main_BB__297_389) & (memory_controller_waitrequest == 1'd0))) begin
		main_299_position37i_reg <= main_299_position37i;
		if (start == 1'b0 && ^(main_299_position37i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_position37i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
		main_299_301 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__299_392)) begin
		main_299_301_reg <= main_299_301;
		if (start == 1'b0 && ^(main_299_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %302 = icmp sgt i32 %300, %301*/
		main_299_302 = ($signed(main_299_300_reg) > $signed(main_299_301));
end
always @(*) begin
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_303_304 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		main_303_304_reg <= main_303_304;
		if (start == 1'b0 && ^(main_303_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_303_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %305*/
	/*   %306 = phi i32 [ %304, %303 ], [ %300, %299 ]*/
	if ((((cur_state == LEGUP_F_main_BB__299_392) & (memory_controller_waitrequest == 1'd0)) & (main_299_302 == 1'd0))) begin
		main_305_306 = main_299_300_reg;
	end
	/* main: %305*/
	/*   %306 = phi i32 [ %304, %303 ], [ %300, %299 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__303_397) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_305_306 = main_303_304_reg;
	end
end
always @(posedge clk) begin
	/* main: %305*/
	/*   %306 = phi i32 [ %304, %303 ], [ %300, %299 ]*/
	if ((((cur_state == LEGUP_F_main_BB__299_392) & (memory_controller_waitrequest == 1'd0)) & (main_299_302 == 1'd0))) begin
		main_305_306_reg <= main_305_306;
		if (start == 1'b0 && ^(main_305_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_305_306_reg"); $finish; end
	end
	/* main: %305*/
	/*   %306 = phi i32 [ %304, %303 ], [ %300, %299 ]*/
	if (((cur_state == LEGUP_F_main_BB__303_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_305_306_reg <= main_305_306;
		if (start == 1'b0 && ^(main_305_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_305_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %305*/
	/*   %position.38.i = phi i32 [ %284, %303 ], [ %position.37.i, %299 ]*/
	if ((((cur_state == LEGUP_F_main_BB__299_392) & (memory_controller_waitrequest == 1'd0)) & (main_299_302 == 1'd0))) begin
		main_305_position38i = main_299_position37i_reg;
	end
	/* main: %305*/
	/*   %position.38.i = phi i32 [ %284, %303 ], [ %position.37.i, %299 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__303_397) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_305_position38i = main_282_284_reg;
	end
end
always @(posedge clk) begin
	/* main: %305*/
	/*   %position.38.i = phi i32 [ %284, %303 ], [ %position.37.i, %299 ]*/
	if ((((cur_state == LEGUP_F_main_BB__299_392) & (memory_controller_waitrequest == 1'd0)) & (main_299_302 == 1'd0))) begin
		main_305_position38i_reg <= main_305_position38i;
		if (start == 1'b0 && ^(main_305_position38i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_305_position38i_reg"); $finish; end
	end
	/* main: %305*/
	/*   %position.38.i = phi i32 [ %284, %303 ], [ %position.37.i, %299 ]*/
	if (((cur_state == LEGUP_F_main_BB__303_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_305_position38i_reg <= main_305_position38i;
		if (start == 1'b0 && ^(main_305_position38i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_305_position38i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
		main_305_307 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__305_400)) begin
		main_305_307_reg <= main_305_307;
		if (start == 1'b0 && ^(main_305_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_305_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %305*/
	/*   %308 = icmp sgt i32 %306, %307*/
		main_305_308 = ($signed(main_305_306_reg) > $signed(main_305_307));
end
always @(*) begin
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_309_310 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		main_309_310_reg <= main_309_310;
		if (start == 1'b0 && ^(main_309_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_309_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %311*/
	/*   %312 = phi i32 [ %310, %309 ], [ %306, %305 ]*/
	if ((((cur_state == LEGUP_F_main_BB__305_400) & (memory_controller_waitrequest == 1'd0)) & (main_305_308 == 1'd0))) begin
		main_311_312 = main_305_306_reg;
	end
	/* main: %311*/
	/*   %312 = phi i32 [ %310, %309 ], [ %306, %305 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__309_405) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_311_312 = main_309_310_reg;
	end
end
always @(posedge clk) begin
	/* main: %311*/
	/*   %312 = phi i32 [ %310, %309 ], [ %306, %305 ]*/
	if ((((cur_state == LEGUP_F_main_BB__305_400) & (memory_controller_waitrequest == 1'd0)) & (main_305_308 == 1'd0))) begin
		main_311_312_reg <= main_311_312;
		if (start == 1'b0 && ^(main_311_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_311_312_reg"); $finish; end
	end
	/* main: %311*/
	/*   %312 = phi i32 [ %310, %309 ], [ %306, %305 ]*/
	if (((cur_state == LEGUP_F_main_BB__309_405) & (memory_controller_waitrequest == 1'd0))) begin
		main_311_312_reg <= main_311_312;
		if (start == 1'b0 && ^(main_311_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_311_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %311*/
	/*   %position.39.i = phi i32 [ %285, %309 ], [ %position.38.i, %305 ]*/
	if ((((cur_state == LEGUP_F_main_BB__305_400) & (memory_controller_waitrequest == 1'd0)) & (main_305_308 == 1'd0))) begin
		main_311_position39i = main_305_position38i_reg;
	end
	/* main: %311*/
	/*   %position.39.i = phi i32 [ %285, %309 ], [ %position.38.i, %305 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__309_405) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_311_position39i = main_282_285_reg;
	end
end
always @(posedge clk) begin
	/* main: %311*/
	/*   %position.39.i = phi i32 [ %285, %309 ], [ %position.38.i, %305 ]*/
	if ((((cur_state == LEGUP_F_main_BB__305_400) & (memory_controller_waitrequest == 1'd0)) & (main_305_308 == 1'd0))) begin
		main_311_position39i_reg <= main_311_position39i;
		if (start == 1'b0 && ^(main_311_position39i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_311_position39i_reg"); $finish; end
	end
	/* main: %311*/
	/*   %position.39.i = phi i32 [ %285, %309 ], [ %position.38.i, %305 ]*/
	if (((cur_state == LEGUP_F_main_BB__309_405) & (memory_controller_waitrequest == 1'd0))) begin
		main_311_position39i_reg <= main_311_position39i;
		if (start == 1'b0 && ^(main_311_position39i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_311_position39i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
		main_311_313 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__311_408)) begin
		main_311_313_reg <= main_311_313;
		if (start == 1'b0 && ^(main_311_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_311_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %311*/
	/*   %314 = icmp sgt i32 %312, %313*/
		main_311_314 = ($signed(main_311_312_reg) > $signed(main_311_313));
end
always @(*) begin
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_315_316 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		main_315_316_reg <= main_315_316;
		if (start == 1'b0 && ^(main_315_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_315_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %317*/
	/*   %318 = phi i32 [ %316, %315 ], [ %312, %311 ]*/
	if ((((cur_state == LEGUP_F_main_BB__311_408) & (memory_controller_waitrequest == 1'd0)) & (main_311_314 == 1'd0))) begin
		main_317_318 = main_311_312_reg;
	end
	/* main: %317*/
	/*   %318 = phi i32 [ %316, %315 ], [ %312, %311 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__315_413) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_317_318 = main_315_316_reg;
	end
end
always @(posedge clk) begin
	/* main: %317*/
	/*   %318 = phi i32 [ %316, %315 ], [ %312, %311 ]*/
	if ((((cur_state == LEGUP_F_main_BB__311_408) & (memory_controller_waitrequest == 1'd0)) & (main_311_314 == 1'd0))) begin
		main_317_318_reg <= main_317_318;
		if (start == 1'b0 && ^(main_317_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_318_reg"); $finish; end
	end
	/* main: %317*/
	/*   %318 = phi i32 [ %316, %315 ], [ %312, %311 ]*/
	if (((cur_state == LEGUP_F_main_BB__315_413) & (memory_controller_waitrequest == 1'd0))) begin
		main_317_318_reg <= main_317_318;
		if (start == 1'b0 && ^(main_317_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %317*/
	/*   %position.40.i = phi i32 [ %286, %315 ], [ %position.39.i, %311 ]*/
	if ((((cur_state == LEGUP_F_main_BB__311_408) & (memory_controller_waitrequest == 1'd0)) & (main_311_314 == 1'd0))) begin
		main_317_position40i = main_311_position39i_reg;
	end
	/* main: %317*/
	/*   %position.40.i = phi i32 [ %286, %315 ], [ %position.39.i, %311 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__315_413) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_317_position40i = main_282_286_reg;
	end
end
always @(posedge clk) begin
	/* main: %317*/
	/*   %position.40.i = phi i32 [ %286, %315 ], [ %position.39.i, %311 ]*/
	if ((((cur_state == LEGUP_F_main_BB__311_408) & (memory_controller_waitrequest == 1'd0)) & (main_311_314 == 1'd0))) begin
		main_317_position40i_reg <= main_317_position40i;
		if (start == 1'b0 && ^(main_317_position40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_position40i_reg"); $finish; end
	end
	/* main: %317*/
	/*   %position.40.i = phi i32 [ %286, %315 ], [ %position.39.i, %311 ]*/
	if (((cur_state == LEGUP_F_main_BB__315_413) & (memory_controller_waitrequest == 1'd0))) begin
		main_317_position40i_reg <= main_317_position40i;
		if (start == 1'b0 && ^(main_317_position40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_position40i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
		main_317_319 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__317_416)) begin
		main_317_319_reg <= main_317_319;
		if (start == 1'b0 && ^(main_317_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %317*/
	/*   %320 = icmp sgt i32 %318, %319*/
		main_317_320 = ($signed(main_317_318_reg) > $signed(main_317_319));
end
always @(*) begin
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_321_322 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		main_321_322_reg <= main_321_322;
		if (start == 1'b0 && ^(main_321_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_321_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %324 = phi i32 [ %322, %321 ], [ %318, %317 ]*/
	if ((((cur_state == LEGUP_F_main_BB__317_416) & (memory_controller_waitrequest == 1'd0)) & (main_317_320 == 1'd0))) begin
		main_323_324 = main_317_318_reg;
	end
	/* main: %323*/
	/*   %324 = phi i32 [ %322, %321 ], [ %318, %317 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__321_421) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_323_324 = main_321_322_reg;
	end
end
always @(posedge clk) begin
	/* main: %323*/
	/*   %324 = phi i32 [ %322, %321 ], [ %318, %317 ]*/
	if ((((cur_state == LEGUP_F_main_BB__317_416) & (memory_controller_waitrequest == 1'd0)) & (main_317_320 == 1'd0))) begin
		main_323_324_reg <= main_323_324;
		if (start == 1'b0 && ^(main_323_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_324_reg"); $finish; end
	end
	/* main: %323*/
	/*   %324 = phi i32 [ %322, %321 ], [ %318, %317 ]*/
	if (((cur_state == LEGUP_F_main_BB__321_421) & (memory_controller_waitrequest == 1'd0))) begin
		main_323_324_reg <= main_323_324;
		if (start == 1'b0 && ^(main_323_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %position.41.i = phi i32 [ %287, %321 ], [ %position.40.i, %317 ]*/
	if ((((cur_state == LEGUP_F_main_BB__317_416) & (memory_controller_waitrequest == 1'd0)) & (main_317_320 == 1'd0))) begin
		main_323_position41i = main_317_position40i_reg;
	end
	/* main: %323*/
	/*   %position.41.i = phi i32 [ %287, %321 ], [ %position.40.i, %317 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__321_421) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_323_position41i = main_282_287_reg;
	end
end
always @(posedge clk) begin
	/* main: %323*/
	/*   %position.41.i = phi i32 [ %287, %321 ], [ %position.40.i, %317 ]*/
	if ((((cur_state == LEGUP_F_main_BB__317_416) & (memory_controller_waitrequest == 1'd0)) & (main_317_320 == 1'd0))) begin
		main_323_position41i_reg <= main_323_position41i;
		if (start == 1'b0 && ^(main_323_position41i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_position41i_reg"); $finish; end
	end
	/* main: %323*/
	/*   %position.41.i = phi i32 [ %287, %321 ], [ %position.40.i, %317 ]*/
	if (((cur_state == LEGUP_F_main_BB__321_421) & (memory_controller_waitrequest == 1'd0))) begin
		main_323_position41i_reg <= main_323_position41i;
		if (start == 1'b0 && ^(main_323_position41i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_position41i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
		main_323_325 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__323_424)) begin
		main_323_325_reg <= main_323_325;
		if (start == 1'b0 && ^(main_323_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %326 = icmp sgt i32 %324, %325*/
		main_323_326 = ($signed(main_323_324_reg) > $signed(main_323_325));
end
always @(*) begin
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_327_328 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		main_327_328_reg <= main_327_328;
		if (start == 1'b0 && ^(main_327_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %329*/
	/*   %330 = phi i32 [ %328, %327 ], [ %324, %323 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_424) & (memory_controller_waitrequest == 1'd0)) & (main_323_326 == 1'd0))) begin
		main_329_330 = main_323_324_reg;
	end
	/* main: %329*/
	/*   %330 = phi i32 [ %328, %327 ], [ %324, %323 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__327_429) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_329_330 = main_327_328_reg;
	end
end
always @(posedge clk) begin
	/* main: %329*/
	/*   %330 = phi i32 [ %328, %327 ], [ %324, %323 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_424) & (memory_controller_waitrequest == 1'd0)) & (main_323_326 == 1'd0))) begin
		main_329_330_reg <= main_329_330;
		if (start == 1'b0 && ^(main_329_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_329_330_reg"); $finish; end
	end
	/* main: %329*/
	/*   %330 = phi i32 [ %328, %327 ], [ %324, %323 ]*/
	if (((cur_state == LEGUP_F_main_BB__327_429) & (memory_controller_waitrequest == 1'd0))) begin
		main_329_330_reg <= main_329_330;
		if (start == 1'b0 && ^(main_329_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_329_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %329*/
	/*   %position.42.i = phi i32 [ %288, %327 ], [ %position.41.i, %323 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_424) & (memory_controller_waitrequest == 1'd0)) & (main_323_326 == 1'd0))) begin
		main_329_position42i = main_323_position41i_reg;
	end
	/* main: %329*/
	/*   %position.42.i = phi i32 [ %288, %327 ], [ %position.41.i, %323 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__327_429) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_329_position42i = main_282_288_reg;
	end
end
always @(posedge clk) begin
	/* main: %329*/
	/*   %position.42.i = phi i32 [ %288, %327 ], [ %position.41.i, %323 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_424) & (memory_controller_waitrequest == 1'd0)) & (main_323_326 == 1'd0))) begin
		main_329_position42i_reg <= main_329_position42i;
		if (start == 1'b0 && ^(main_329_position42i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_329_position42i_reg"); $finish; end
	end
	/* main: %329*/
	/*   %position.42.i = phi i32 [ %288, %327 ], [ %position.41.i, %323 ]*/
	if (((cur_state == LEGUP_F_main_BB__327_429) & (memory_controller_waitrequest == 1'd0))) begin
		main_329_position42i_reg <= main_329_position42i;
		if (start == 1'b0 && ^(main_329_position42i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_329_position42i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
		main_329_331 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__329_432)) begin
		main_329_331_reg <= main_329_331;
		if (start == 1'b0 && ^(main_329_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_329_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %329*/
	/*   %332 = icmp sgt i32 %330, %331*/
		main_329_332 = ($signed(main_329_330_reg) > $signed(main_329_331));
end
always @(*) begin
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_333_334 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		main_333_334_reg <= main_333_334;
		if (start == 1'b0 && ^(main_333_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_333_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %335*/
	/*   %336 = phi i32 [ %334, %333 ], [ %330, %329 ]*/
	if ((((cur_state == LEGUP_F_main_BB__329_432) & (memory_controller_waitrequest == 1'd0)) & (main_329_332 == 1'd0))) begin
		main_335_336 = main_329_330_reg;
	end
	/* main: %335*/
	/*   %336 = phi i32 [ %334, %333 ], [ %330, %329 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__333_437) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_335_336 = main_333_334_reg;
	end
end
always @(posedge clk) begin
	/* main: %335*/
	/*   %336 = phi i32 [ %334, %333 ], [ %330, %329 ]*/
	if ((((cur_state == LEGUP_F_main_BB__329_432) & (memory_controller_waitrequest == 1'd0)) & (main_329_332 == 1'd0))) begin
		main_335_336_reg <= main_335_336;
		if (start == 1'b0 && ^(main_335_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_335_336_reg"); $finish; end
	end
	/* main: %335*/
	/*   %336 = phi i32 [ %334, %333 ], [ %330, %329 ]*/
	if (((cur_state == LEGUP_F_main_BB__333_437) & (memory_controller_waitrequest == 1'd0))) begin
		main_335_336_reg <= main_335_336;
		if (start == 1'b0 && ^(main_335_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_335_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %335*/
	/*   %position.43.i = phi i32 [ %289, %333 ], [ %position.42.i, %329 ]*/
	if ((((cur_state == LEGUP_F_main_BB__329_432) & (memory_controller_waitrequest == 1'd0)) & (main_329_332 == 1'd0))) begin
		main_335_position43i = main_329_position42i_reg;
	end
	/* main: %335*/
	/*   %position.43.i = phi i32 [ %289, %333 ], [ %position.42.i, %329 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__333_437) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_335_position43i = main_282_289_reg;
	end
end
always @(posedge clk) begin
	/* main: %335*/
	/*   %position.43.i = phi i32 [ %289, %333 ], [ %position.42.i, %329 ]*/
	if ((((cur_state == LEGUP_F_main_BB__329_432) & (memory_controller_waitrequest == 1'd0)) & (main_329_332 == 1'd0))) begin
		main_335_position43i_reg <= main_335_position43i;
		if (start == 1'b0 && ^(main_335_position43i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_335_position43i_reg"); $finish; end
	end
	/* main: %335*/
	/*   %position.43.i = phi i32 [ %289, %333 ], [ %position.42.i, %329 ]*/
	if (((cur_state == LEGUP_F_main_BB__333_437) & (memory_controller_waitrequest == 1'd0))) begin
		main_335_position43i_reg <= main_335_position43i;
		if (start == 1'b0 && ^(main_335_position43i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_335_position43i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
		main_335_337 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__335_440)) begin
		main_335_337_reg <= main_335_337;
		if (start == 1'b0 && ^(main_335_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_335_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %335*/
	/*   %338 = icmp sgt i32 %336, %337*/
		main_335_338 = ($signed(main_335_336_reg) > $signed(main_335_337));
end
always @(*) begin
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_339_340 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		main_339_340_reg <= main_339_340;
		if (start == 1'b0 && ^(main_339_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_339_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %342 = phi i32 [ %340, %339 ], [ %336, %335 ]*/
	if ((((cur_state == LEGUP_F_main_BB__335_440) & (memory_controller_waitrequest == 1'd0)) & (main_335_338 == 1'd0))) begin
		main_341_342 = main_335_336_reg;
	end
	/* main: %341*/
	/*   %342 = phi i32 [ %340, %339 ], [ %336, %335 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__339_445) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_341_342 = main_339_340_reg;
	end
end
always @(posedge clk) begin
	/* main: %341*/
	/*   %342 = phi i32 [ %340, %339 ], [ %336, %335 ]*/
	if ((((cur_state == LEGUP_F_main_BB__335_440) & (memory_controller_waitrequest == 1'd0)) & (main_335_338 == 1'd0))) begin
		main_341_342_reg <= main_341_342;
		if (start == 1'b0 && ^(main_341_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_342_reg"); $finish; end
	end
	/* main: %341*/
	/*   %342 = phi i32 [ %340, %339 ], [ %336, %335 ]*/
	if (((cur_state == LEGUP_F_main_BB__339_445) & (memory_controller_waitrequest == 1'd0))) begin
		main_341_342_reg <= main_341_342;
		if (start == 1'b0 && ^(main_341_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %position.44.i = phi i32 [ %290, %339 ], [ %position.43.i, %335 ]*/
	if ((((cur_state == LEGUP_F_main_BB__335_440) & (memory_controller_waitrequest == 1'd0)) & (main_335_338 == 1'd0))) begin
		main_341_position44i = main_335_position43i_reg;
	end
	/* main: %341*/
	/*   %position.44.i = phi i32 [ %290, %339 ], [ %position.43.i, %335 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__339_445) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_341_position44i = main_282_290_reg;
	end
end
always @(posedge clk) begin
	/* main: %341*/
	/*   %position.44.i = phi i32 [ %290, %339 ], [ %position.43.i, %335 ]*/
	if ((((cur_state == LEGUP_F_main_BB__335_440) & (memory_controller_waitrequest == 1'd0)) & (main_335_338 == 1'd0))) begin
		main_341_position44i_reg <= main_341_position44i;
		if (start == 1'b0 && ^(main_341_position44i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_position44i_reg"); $finish; end
	end
	/* main: %341*/
	/*   %position.44.i = phi i32 [ %290, %339 ], [ %position.43.i, %335 ]*/
	if (((cur_state == LEGUP_F_main_BB__339_445) & (memory_controller_waitrequest == 1'd0))) begin
		main_341_position44i_reg <= main_341_position44i;
		if (start == 1'b0 && ^(main_341_position44i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_position44i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
		main_341_343 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__341_448)) begin
		main_341_343_reg <= main_341_343;
		if (start == 1'b0 && ^(main_341_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %344 = icmp sgt i32 %342, %343*/
		main_341_344 = ($signed(main_341_342_reg) > $signed(main_341_343));
end
always @(*) begin
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_345_346 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		main_345_346_reg <= main_345_346;
		if (start == 1'b0 && ^(main_345_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_345_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %347*/
	/*   %position.45.i = phi i32 [ %291, %345 ], [ %position.44.i, %341 ]*/
	if ((((cur_state == LEGUP_F_main_BB__341_448) & (memory_controller_waitrequest == 1'd0)) & (main_341_344 == 1'd0))) begin
		main_347_position45i = main_341_position44i_reg;
	end
	/* main: %347*/
	/*   %position.45.i = phi i32 [ %291, %345 ], [ %position.44.i, %341 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__345_453) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_347_position45i = main_282_291_reg;
	end
end
always @(posedge clk) begin
	/* main: %347*/
	/*   %position.45.i = phi i32 [ %291, %345 ], [ %position.44.i, %341 ]*/
	if ((((cur_state == LEGUP_F_main_BB__341_448) & (memory_controller_waitrequest == 1'd0)) & (main_341_344 == 1'd0))) begin
		main_347_position45i_reg <= main_347_position45i;
		if (start == 1'b0 && ^(main_347_position45i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_347_position45i_reg"); $finish; end
	end
	/* main: %347*/
	/*   %position.45.i = phi i32 [ %291, %345 ], [ %position.44.i, %341 ]*/
	if (((cur_state == LEGUP_F_main_BB__345_453) & (memory_controller_waitrequest == 1'd0))) begin
		main_347_position45i_reg <= main_347_position45i;
		if (start == 1'b0 && ^(main_347_position45i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_347_position45i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %347*/
	/*   %348 = icmp sgt i32 %292, 91*/
		main_347_348 = ($signed(main_282_292_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %347*/
	/*   %indvar.next52 = add i32 %indvar51, 1*/
		main_347_indvarnext52 = (main_282_indvar51_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge62.i*/
	/*   %position.36.lcssa.i = phi i32 [ %18, %._crit_edge57.i ], [ %position.45.i, %._crit_edge62.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge57i_378) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge57i_281 == 1'd1))) begin
		main__crit_edge62i_position36lcssai = main_lrph27i_18_reg;
	end
	/* main: %._crit_edge62.i*/
	/*   %position.36.lcssa.i = phi i32 [ %18, %._crit_edge57.i ], [ %position.45.i, %._crit_edge62.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge62iloopexit_455) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge62i_position36lcssai = main_347_position45i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge62.i*/
	/*   %position.36.lcssa.i = phi i32 [ %18, %._crit_edge57.i ], [ %position.45.i, %._crit_edge62.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge57i_378) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge57i_281 == 1'd1))) begin
		main__crit_edge62i_position36lcssai_reg <= main__crit_edge62i_position36lcssai;
		if (start == 1'b0 && ^(main__crit_edge62i_position36lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge62i_position36lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge62.i*/
	/*   %position.36.lcssa.i = phi i32 [ %18, %._crit_edge57.i ], [ %position.45.i, %._crit_edge62.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge62iloopexit_455) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge62i_position36lcssai_reg <= main__crit_edge62i_position36lcssai;
		if (start == 1'b0 && ^(main__crit_edge62i_position36lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge62i_position36lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge62i_349 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge62.i*/
/*   %349 = srem i32 %27, 9*/
	main__crit_edge62i_349_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge62.i*/
	/*   %350 = sub nsw i32 100, %349*/
		main__crit_edge62i_350 = (32'd100 - main__crit_edge62i_349);
end
always @(*) begin
	/* main: %._crit_edge62.i*/
	/*   %351 = icmp sgt i32 %350, 99*/
		main__crit_edge62i_351 = ($signed(main__crit_edge62i_350) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph67.i*/
	/*   %352 = add i32 %349, -99*/
		main_lrph67i_352 = (main__crit_edge62i_349_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph67.i*/
	/*   %353 = sub i32 100, %349*/
		main_lrph67i_353 = (32'd100 - main__crit_edge62i_349_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph67.i*/
	/*   %353 = sub i32 100, %349*/
	if ((cur_state == LEGUP_F_main_BB_lrph67i_489)) begin
		main_lrph67i_353_reg <= main_lrph67i_353;
		if (start == 1'b0 && ^(main_lrph67i_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph67i_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph67.i*/
	/*   %354 = icmp sgt i32 %353, 99*/
		main_lrph67i_354 = ($signed(main_lrph67i_353) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph67.i*/
	/*   %smax64 = select i1 %354, i32 %353, i32 99*/
		main_lrph67i_smax64 = (main_lrph67i_354 ? main_lrph67i_353 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph67.i*/
	/*   %355 = add i32 %352, %smax64*/
		main_lrph67i_355 = (main_lrph67i_352 + main_lrph67i_smax64);
end
always @(posedge clk) begin
	/* main: %.lr.ph67.i*/
	/*   %355 = add i32 %352, %smax64*/
	if ((cur_state == LEGUP_F_main_BB_lrph67i_489)) begin
		main_lrph67i_355_reg <= main_lrph67i_355;
		if (start == 1'b0 && ^(main_lrph67i_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph67i_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %indvar62 = phi i32 [ %indvar.next63, %364 ], [ 0, %.lr.ph67.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph67i_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_356_indvar62 = 32'd0;
	end
	/* main: %356*/
	/*   %indvar62 = phi i32 [ %indvar.next63, %364 ], [ 0, %.lr.ph67.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__364_499) & (memory_controller_waitrequest == 1'd0)) & (main_364_exitcond65 == 1'd0))) */ begin
		main_356_indvar62 = main_364_indvarnext63;
	end
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %indvar62 = phi i32 [ %indvar.next63, %364 ], [ 0, %.lr.ph67.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph67i_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_356_indvar62_reg <= main_356_indvar62;
		if (start == 1'b0 && ^(main_356_indvar62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_indvar62_reg"); $finish; end
	end
	/* main: %356*/
	/*   %indvar62 = phi i32 [ %indvar.next63, %364 ], [ 0, %.lr.ph67.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__364_499) & (memory_controller_waitrequest == 1'd0)) & (main_364_exitcond65 == 1'd0))) begin
		main_356_indvar62_reg <= main_356_indvar62;
		if (start == 1'b0 && ^(main_356_indvar62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_indvar62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %position.4664.i = phi i32 [ %position.47.i, %364 ], [ %position.36.lcssa.i, %.lr.ph67.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph67i_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_356_position4664i = main__crit_edge62i_position36lcssai_reg;
	end
	/* main: %356*/
	/*   %position.4664.i = phi i32 [ %position.47.i, %364 ], [ %position.36.lcssa.i, %.lr.ph67.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__364_499) & (memory_controller_waitrequest == 1'd0)) & (main_364_exitcond65 == 1'd0))) */ begin
		main_356_position4664i = main_364_position47i_reg;
	end
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %position.4664.i = phi i32 [ %position.47.i, %364 ], [ %position.36.lcssa.i, %.lr.ph67.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph67i_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_356_position4664i_reg <= main_356_position4664i;
		if (start == 1'b0 && ^(main_356_position4664i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_position4664i_reg"); $finish; end
	end
	/* main: %356*/
	/*   %position.4664.i = phi i32 [ %position.47.i, %364 ], [ %position.36.lcssa.i, %.lr.ph67.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__364_499) & (memory_controller_waitrequest == 1'd0)) & (main_364_exitcond65 == 1'd0))) begin
		main_356_position4664i_reg <= main_356_position4664i;
		if (start == 1'b0 && ^(main_356_position4664i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_position4664i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %357 = sub i32 %indvar62, %349*/
		main_356_357 = (main_356_indvar62_reg - main__crit_edge62i_349_reg);
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %357 = sub i32 %indvar62, %349*/
	if ((cur_state == LEGUP_F_main_BB__356_490)) begin
		main_356_357_reg <= main_356_357;
		if (start == 1'b0 && ^(main_356_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %scevgep66 = getelementptr [100 x i32]* @y, i32 1, i32 %357*/
		main_356_scevgep66 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_356_357_reg)));
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %scevgep66 = getelementptr [100 x i32]* @y, i32 1, i32 %357*/
	if ((cur_state == LEGUP_F_main_BB__356_491)) begin
		main_356_scevgep66_reg <= main_356_scevgep66;
		if (start == 1'b0 && ^(main_356_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %358 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.4664.i*/
		main_356_358 = (`TAG_g_y_a + (4 * main_356_position4664i_reg));
end
always @(*) begin
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
		main_356_359 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_492)) begin
		main_356_359_reg <= main_356_359;
		if (start == 1'b0 && ^(main_356_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
		main_356_360 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_493)) begin
		main_356_360_reg <= main_356_360;
		if (start == 1'b0 && ^(main_356_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %356*/
	/*   %361 = icmp sgt i32 %359, %360*/
		main_356_361 = ($signed(main_356_359_reg) > $signed(main_356_360));
end
always @(*) begin
	/* main: %362*/
	/*   %d5.165.i = add i32 %353, %indvar62*/
		main_362_d5165i = (main_lrph67i_353_reg + main_356_indvar62_reg);
end
always @(posedge clk) begin
	/* main: %362*/
	/*   %d5.165.i = add i32 %353, %indvar62*/
	if ((cur_state == LEGUP_F_main_BB__362_494)) begin
		main_362_d5165i_reg <= main_362_d5165i;
		if (start == 1'b0 && ^(main_362_d5165i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_362_d5165i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
		main_362_363 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		main_362_363_reg <= main_362_363;
		if (start == 1'b0 && ^(main_362_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_362_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %364*/
	/*   %position.47.i = phi i32 [ %d5.165.i, %362 ], [ %position.4664.i, %356 ]*/
	if ((((cur_state == LEGUP_F_main_BB__356_493) & (memory_controller_waitrequest == 1'd0)) & (main_356_361 == 1'd0))) begin
		main_364_position47i = main_356_position4664i_reg;
	end
	/* main: %364*/
	/*   %position.47.i = phi i32 [ %d5.165.i, %362 ], [ %position.4664.i, %356 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__362_498) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_364_position47i = main_362_d5165i_reg;
	end
end
always @(posedge clk) begin
	/* main: %364*/
	/*   %position.47.i = phi i32 [ %d5.165.i, %362 ], [ %position.4664.i, %356 ]*/
	if ((((cur_state == LEGUP_F_main_BB__356_493) & (memory_controller_waitrequest == 1'd0)) & (main_356_361 == 1'd0))) begin
		main_364_position47i_reg <= main_364_position47i;
		if (start == 1'b0 && ^(main_364_position47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_364_position47i_reg"); $finish; end
	end
	/* main: %364*/
	/*   %position.47.i = phi i32 [ %d5.165.i, %362 ], [ %position.4664.i, %356 ]*/
	if (((cur_state == LEGUP_F_main_BB__362_498) & (memory_controller_waitrequest == 1'd0))) begin
		main_364_position47i_reg <= main_364_position47i;
		if (start == 1'b0 && ^(main_364_position47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_364_position47i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %364*/
	/*   %indvar.next63 = add i32 %indvar62, 1*/
		main_364_indvarnext63 = (main_356_indvar62_reg + 32'd1);
end
always @(*) begin
	/* main: %364*/
	/*   %exitcond65 = icmp eq i32 %indvar.next63, %355*/
		main_364_exitcond65 = (main_364_indvarnext63 == main_lrph67i_355_reg);
end
always @(*) begin
	/* main: %._crit_edge68.i*/
	/*   %365 = icmp sgt i32 %16, 91*/
		main__crit_edge68i_365 = ($signed(main_lrph27i_16_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %366*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %431 ], [ 0, %.lr.ph72.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph72i_502) & (memory_controller_waitrequest == 1'd0))) begin
		main_366_indvar67 = 32'd0;
	end
	/* main: %366*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %431 ], [ 0, %.lr.ph72.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__431_577) & (memory_controller_waitrequest == 1'd0)) & (main_431_432 == 1'd0))) */ begin
		main_366_indvar67 = main_431_indvarnext68;
	end
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %431 ], [ 0, %.lr.ph72.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph72i_502) & (memory_controller_waitrequest == 1'd0))) begin
		main_366_indvar67_reg <= main_366_indvar67;
		if (start == 1'b0 && ^(main_366_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_indvar67_reg"); $finish; end
	end
	/* main: %366*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %431 ], [ 0, %.lr.ph72.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__431_577) & (memory_controller_waitrequest == 1'd0)) & (main_431_432 == 1'd0))) begin
		main_366_indvar67_reg <= main_366_indvar67;
		if (start == 1'b0 && ^(main_366_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_indvar67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %position.4869.i = phi i32 [ %position.57.i, %431 ], [ %17, %.lr.ph72.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph72i_502) & (memory_controller_waitrequest == 1'd0))) begin
		main_366_position4869i = main_lrph27i_17_reg;
	end
	/* main: %366*/
	/*   %position.4869.i = phi i32 [ %position.57.i, %431 ], [ %17, %.lr.ph72.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__431_577) & (memory_controller_waitrequest == 1'd0)) & (main_431_432 == 1'd0))) */ begin
		main_366_position4869i = main_431_position57i_reg;
	end
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %position.4869.i = phi i32 [ %position.57.i, %431 ], [ %17, %.lr.ph72.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph72i_502) & (memory_controller_waitrequest == 1'd0))) begin
		main_366_position4869i_reg <= main_366_position4869i;
		if (start == 1'b0 && ^(main_366_position4869i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_position4869i_reg"); $finish; end
	end
	/* main: %366*/
	/*   %position.4869.i = phi i32 [ %position.57.i, %431 ], [ %17, %.lr.ph72.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__431_577) & (memory_controller_waitrequest == 1'd0)) & (main_431_432 == 1'd0))) begin
		main_366_position4869i_reg <= main_366_position4869i;
		if (start == 1'b0 && ^(main_366_position4869i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_position4869i_reg"); $finish; end
	end
end
always @(*) begin
	main_366_367 = main_366_367_stage0_reg;
end
always @(*) begin
	/* main: %366*/
	/*   %d6.070.i = add i32 %16, %367*/
		main_366_d6070i = (main_lrph27i_16_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %d6.070.i = add i32 %16, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_d6070i_reg <= main_366_d6070i;
		if (start == 1'b0 && ^(main_366_d6070i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_d6070i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep77 = getelementptr [100 x i32]* @y, i32 0, i32 %d6.070.i*/
		main_366_scevgep77 = (`TAG_g_y_a + (4 * main_366_d6070i_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep77 = getelementptr [100 x i32]* @y, i32 0, i32 %d6.070.i*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep77_reg <= main_366_scevgep77;
		if (start == 1'b0 && ^(main_366_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %368 = add i32 %15, %367*/
		main_366_368 = (main_lrph27i_15_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %368 = add i32 %15, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_368_reg <= main_366_368;
		if (start == 1'b0 && ^(main_366_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep76 = getelementptr [100 x i32]* @y, i32 0, i32 %368*/
		main_366_scevgep76 = (`TAG_g_y_a + (4 * main_366_368_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep76 = getelementptr [100 x i32]* @y, i32 0, i32 %368*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep76_reg <= main_366_scevgep76;
		if (start == 1'b0 && ^(main_366_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %369 = add i32 %14, %367*/
		main_366_369 = (main_lrph27i_14_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %369 = add i32 %14, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_369_reg <= main_366_369;
		if (start == 1'b0 && ^(main_366_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep75 = getelementptr [100 x i32]* @y, i32 0, i32 %369*/
		main_366_scevgep75 = (`TAG_g_y_a + (4 * main_366_369_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep75 = getelementptr [100 x i32]* @y, i32 0, i32 %369*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep75_reg <= main_366_scevgep75;
		if (start == 1'b0 && ^(main_366_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %370 = add i32 %13, %367*/
		main_366_370 = (main_lrph27i_13_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %370 = add i32 %13, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_370_reg <= main_366_370;
		if (start == 1'b0 && ^(main_366_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep74 = getelementptr [100 x i32]* @y, i32 0, i32 %370*/
		main_366_scevgep74 = (`TAG_g_y_a + (4 * main_366_370_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep74 = getelementptr [100 x i32]* @y, i32 0, i32 %370*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep74_reg <= main_366_scevgep74;
		if (start == 1'b0 && ^(main_366_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %371 = add i32 %3, %367*/
		main_366_371 = (main_lrph27i_3_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %371 = add i32 %3, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_371_reg <= main_366_371;
		if (start == 1'b0 && ^(main_366_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep73 = getelementptr [100 x i32]* @y, i32 0, i32 %371*/
		main_366_scevgep73 = (`TAG_g_y_a + (4 * main_366_371_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep73 = getelementptr [100 x i32]* @y, i32 0, i32 %371*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep73_reg <= main_366_scevgep73;
		if (start == 1'b0 && ^(main_366_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %372 = add i32 %4, %367*/
		main_366_372 = (main_lrph27i_4_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %372 = add i32 %4, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_372_reg <= main_366_372;
		if (start == 1'b0 && ^(main_366_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep72 = getelementptr [100 x i32]* @y, i32 0, i32 %372*/
		main_366_scevgep72 = (`TAG_g_y_a + (4 * main_366_372_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep72 = getelementptr [100 x i32]* @y, i32 0, i32 %372*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep72_reg <= main_366_scevgep72;
		if (start == 1'b0 && ^(main_366_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %373 = add i32 %5, %367*/
		main_366_373 = (main_lrph27i_5_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %373 = add i32 %5, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_373_reg <= main_366_373;
		if (start == 1'b0 && ^(main_366_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep71 = getelementptr [100 x i32]* @y, i32 0, i32 %373*/
		main_366_scevgep71 = (`TAG_g_y_a + (4 * main_366_373_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep71 = getelementptr [100 x i32]* @y, i32 0, i32 %373*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep71_reg <= main_366_scevgep71;
		if (start == 1'b0 && ^(main_366_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %374 = add i32 %6, %367*/
		main_366_374 = (main_lrph27i_6_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %374 = add i32 %6, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_374_reg <= main_366_374;
		if (start == 1'b0 && ^(main_366_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep70 = getelementptr [100 x i32]* @y, i32 0, i32 %374*/
		main_366_scevgep70 = (`TAG_g_y_a + (4 * main_366_374_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep70 = getelementptr [100 x i32]* @y, i32 0, i32 %374*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep70_reg <= main_366_scevgep70;
		if (start == 1'b0 && ^(main_366_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %375 = add i32 %7, %367*/
		main_366_375 = (main_lrph27i_7_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %375 = add i32 %7, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_375_reg <= main_366_375;
		if (start == 1'b0 && ^(main_366_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %scevgep69 = getelementptr [100 x i32]* @y, i32 0, i32 %375*/
		main_366_scevgep69 = (`TAG_g_y_a + (4 * main_366_375_reg));
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %scevgep69 = getelementptr [100 x i32]* @y, i32 0, i32 %375*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_scevgep69_reg <= main_366_scevgep69;
		if (start == 1'b0 && ^(main_366_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %376 = add i32 %8, %367*/
		main_366_376 = (main_lrph27i_8_reg + main_366_367);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %376 = add i32 %8, %367*/
	if ((cur_state == LEGUP_F_main_BB__366_504)) begin
		main_366_376_reg <= main_366_376;
		if (start == 1'b0 && ^(main_366_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %377 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.4869.i*/
		main_366_377 = (`TAG_g_y_a + (4 * main_366_position4869i_reg));
end
always @(*) begin
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
		main_366_378 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		main_366_378_reg <= main_366_378;
		if (start == 1'b0 && ^(main_366_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
		main_366_379 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_507)) begin
		main_366_379_reg <= main_366_379;
		if (start == 1'b0 && ^(main_366_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %380 = icmp sgt i32 %378, %379*/
		main_366_380 = ($signed(main_366_378_reg) > $signed(main_366_379));
end
always @(*) begin
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_381_382 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		main_381_382_reg <= main_381_382;
		if (start == 1'b0 && ^(main_381_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_381_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %383*/
	/*   %384 = phi i32 [ %382, %381 ], [ %378, %366 ]*/
	if ((((cur_state == LEGUP_F_main_BB__366_507) & (memory_controller_waitrequest == 1'd0)) & (main_366_380 == 1'd0))) begin
		main_383_384 = main_366_378_reg;
	end
	/* main: %383*/
	/*   %384 = phi i32 [ %382, %381 ], [ %378, %366 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__381_512) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_383_384 = main_381_382_reg;
	end
end
always @(posedge clk) begin
	/* main: %383*/
	/*   %384 = phi i32 [ %382, %381 ], [ %378, %366 ]*/
	if ((((cur_state == LEGUP_F_main_BB__366_507) & (memory_controller_waitrequest == 1'd0)) & (main_366_380 == 1'd0))) begin
		main_383_384_reg <= main_383_384;
		if (start == 1'b0 && ^(main_383_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_383_384_reg"); $finish; end
	end
	/* main: %383*/
	/*   %384 = phi i32 [ %382, %381 ], [ %378, %366 ]*/
	if (((cur_state == LEGUP_F_main_BB__381_512) & (memory_controller_waitrequest == 1'd0))) begin
		main_383_384_reg <= main_383_384;
		if (start == 1'b0 && ^(main_383_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_383_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %383*/
	/*   %position.49.i = phi i32 [ %d6.070.i, %381 ], [ %position.4869.i, %366 ]*/
	if ((((cur_state == LEGUP_F_main_BB__366_507) & (memory_controller_waitrequest == 1'd0)) & (main_366_380 == 1'd0))) begin
		main_383_position49i = main_366_position4869i_reg;
	end
	/* main: %383*/
	/*   %position.49.i = phi i32 [ %d6.070.i, %381 ], [ %position.4869.i, %366 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__381_512) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_383_position49i = main_366_d6070i_reg;
	end
end
always @(posedge clk) begin
	/* main: %383*/
	/*   %position.49.i = phi i32 [ %d6.070.i, %381 ], [ %position.4869.i, %366 ]*/
	if ((((cur_state == LEGUP_F_main_BB__366_507) & (memory_controller_waitrequest == 1'd0)) & (main_366_380 == 1'd0))) begin
		main_383_position49i_reg <= main_383_position49i;
		if (start == 1'b0 && ^(main_383_position49i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_383_position49i_reg"); $finish; end
	end
	/* main: %383*/
	/*   %position.49.i = phi i32 [ %d6.070.i, %381 ], [ %position.4869.i, %366 ]*/
	if (((cur_state == LEGUP_F_main_BB__381_512) & (memory_controller_waitrequest == 1'd0))) begin
		main_383_position49i_reg <= main_383_position49i;
		if (start == 1'b0 && ^(main_383_position49i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_383_position49i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
		main_383_385 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__383_515)) begin
		main_383_385_reg <= main_383_385;
		if (start == 1'b0 && ^(main_383_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_383_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %383*/
	/*   %386 = icmp sgt i32 %384, %385*/
		main_383_386 = ($signed(main_383_384_reg) > $signed(main_383_385));
end
always @(*) begin
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_387_388 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		main_387_388_reg <= main_387_388;
		if (start == 1'b0 && ^(main_387_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_387_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %389*/
	/*   %390 = phi i32 [ %388, %387 ], [ %384, %383 ]*/
	if ((((cur_state == LEGUP_F_main_BB__383_515) & (memory_controller_waitrequest == 1'd0)) & (main_383_386 == 1'd0))) begin
		main_389_390 = main_383_384_reg;
	end
	/* main: %389*/
	/*   %390 = phi i32 [ %388, %387 ], [ %384, %383 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__387_520) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_389_390 = main_387_388_reg;
	end
end
always @(posedge clk) begin
	/* main: %389*/
	/*   %390 = phi i32 [ %388, %387 ], [ %384, %383 ]*/
	if ((((cur_state == LEGUP_F_main_BB__383_515) & (memory_controller_waitrequest == 1'd0)) & (main_383_386 == 1'd0))) begin
		main_389_390_reg <= main_389_390;
		if (start == 1'b0 && ^(main_389_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_389_390_reg"); $finish; end
	end
	/* main: %389*/
	/*   %390 = phi i32 [ %388, %387 ], [ %384, %383 ]*/
	if (((cur_state == LEGUP_F_main_BB__387_520) & (memory_controller_waitrequest == 1'd0))) begin
		main_389_390_reg <= main_389_390;
		if (start == 1'b0 && ^(main_389_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_389_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %389*/
	/*   %position.50.i = phi i32 [ %368, %387 ], [ %position.49.i, %383 ]*/
	if ((((cur_state == LEGUP_F_main_BB__383_515) & (memory_controller_waitrequest == 1'd0)) & (main_383_386 == 1'd0))) begin
		main_389_position50i = main_383_position49i_reg;
	end
	/* main: %389*/
	/*   %position.50.i = phi i32 [ %368, %387 ], [ %position.49.i, %383 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__387_520) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_389_position50i = main_366_368_reg;
	end
end
always @(posedge clk) begin
	/* main: %389*/
	/*   %position.50.i = phi i32 [ %368, %387 ], [ %position.49.i, %383 ]*/
	if ((((cur_state == LEGUP_F_main_BB__383_515) & (memory_controller_waitrequest == 1'd0)) & (main_383_386 == 1'd0))) begin
		main_389_position50i_reg <= main_389_position50i;
		if (start == 1'b0 && ^(main_389_position50i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_389_position50i_reg"); $finish; end
	end
	/* main: %389*/
	/*   %position.50.i = phi i32 [ %368, %387 ], [ %position.49.i, %383 ]*/
	if (((cur_state == LEGUP_F_main_BB__387_520) & (memory_controller_waitrequest == 1'd0))) begin
		main_389_position50i_reg <= main_389_position50i;
		if (start == 1'b0 && ^(main_389_position50i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_389_position50i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
		main_389_391 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__389_523)) begin
		main_389_391_reg <= main_389_391;
		if (start == 1'b0 && ^(main_389_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_389_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %389*/
	/*   %392 = icmp sgt i32 %390, %391*/
		main_389_392 = ($signed(main_389_390_reg) > $signed(main_389_391));
end
always @(*) begin
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_393_394 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		main_393_394_reg <= main_393_394;
		if (start == 1'b0 && ^(main_393_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %395*/
	/*   %396 = phi i32 [ %394, %393 ], [ %390, %389 ]*/
	if ((((cur_state == LEGUP_F_main_BB__389_523) & (memory_controller_waitrequest == 1'd0)) & (main_389_392 == 1'd0))) begin
		main_395_396 = main_389_390_reg;
	end
	/* main: %395*/
	/*   %396 = phi i32 [ %394, %393 ], [ %390, %389 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__393_528) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_395_396 = main_393_394_reg;
	end
end
always @(posedge clk) begin
	/* main: %395*/
	/*   %396 = phi i32 [ %394, %393 ], [ %390, %389 ]*/
	if ((((cur_state == LEGUP_F_main_BB__389_523) & (memory_controller_waitrequest == 1'd0)) & (main_389_392 == 1'd0))) begin
		main_395_396_reg <= main_395_396;
		if (start == 1'b0 && ^(main_395_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_396_reg"); $finish; end
	end
	/* main: %395*/
	/*   %396 = phi i32 [ %394, %393 ], [ %390, %389 ]*/
	if (((cur_state == LEGUP_F_main_BB__393_528) & (memory_controller_waitrequest == 1'd0))) begin
		main_395_396_reg <= main_395_396;
		if (start == 1'b0 && ^(main_395_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %395*/
	/*   %position.51.i = phi i32 [ %369, %393 ], [ %position.50.i, %389 ]*/
	if ((((cur_state == LEGUP_F_main_BB__389_523) & (memory_controller_waitrequest == 1'd0)) & (main_389_392 == 1'd0))) begin
		main_395_position51i = main_389_position50i_reg;
	end
	/* main: %395*/
	/*   %position.51.i = phi i32 [ %369, %393 ], [ %position.50.i, %389 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__393_528) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_395_position51i = main_366_369_reg;
	end
end
always @(posedge clk) begin
	/* main: %395*/
	/*   %position.51.i = phi i32 [ %369, %393 ], [ %position.50.i, %389 ]*/
	if ((((cur_state == LEGUP_F_main_BB__389_523) & (memory_controller_waitrequest == 1'd0)) & (main_389_392 == 1'd0))) begin
		main_395_position51i_reg <= main_395_position51i;
		if (start == 1'b0 && ^(main_395_position51i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_position51i_reg"); $finish; end
	end
	/* main: %395*/
	/*   %position.51.i = phi i32 [ %369, %393 ], [ %position.50.i, %389 ]*/
	if (((cur_state == LEGUP_F_main_BB__393_528) & (memory_controller_waitrequest == 1'd0))) begin
		main_395_position51i_reg <= main_395_position51i;
		if (start == 1'b0 && ^(main_395_position51i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_position51i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
		main_395_397 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__395_531)) begin
		main_395_397_reg <= main_395_397;
		if (start == 1'b0 && ^(main_395_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %395*/
	/*   %398 = icmp sgt i32 %396, %397*/
		main_395_398 = ($signed(main_395_396_reg) > $signed(main_395_397));
end
always @(*) begin
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_399_400 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		main_399_400_reg <= main_399_400;
		if (start == 1'b0 && ^(main_399_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_399_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %401*/
	/*   %402 = phi i32 [ %400, %399 ], [ %396, %395 ]*/
	if ((((cur_state == LEGUP_F_main_BB__395_531) & (memory_controller_waitrequest == 1'd0)) & (main_395_398 == 1'd0))) begin
		main_401_402 = main_395_396_reg;
	end
	/* main: %401*/
	/*   %402 = phi i32 [ %400, %399 ], [ %396, %395 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__399_536) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_401_402 = main_399_400_reg;
	end
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %402 = phi i32 [ %400, %399 ], [ %396, %395 ]*/
	if ((((cur_state == LEGUP_F_main_BB__395_531) & (memory_controller_waitrequest == 1'd0)) & (main_395_398 == 1'd0))) begin
		main_401_402_reg <= main_401_402;
		if (start == 1'b0 && ^(main_401_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_402_reg"); $finish; end
	end
	/* main: %401*/
	/*   %402 = phi i32 [ %400, %399 ], [ %396, %395 ]*/
	if (((cur_state == LEGUP_F_main_BB__399_536) & (memory_controller_waitrequest == 1'd0))) begin
		main_401_402_reg <= main_401_402;
		if (start == 1'b0 && ^(main_401_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %401*/
	/*   %position.52.i = phi i32 [ %370, %399 ], [ %position.51.i, %395 ]*/
	if ((((cur_state == LEGUP_F_main_BB__395_531) & (memory_controller_waitrequest == 1'd0)) & (main_395_398 == 1'd0))) begin
		main_401_position52i = main_395_position51i_reg;
	end
	/* main: %401*/
	/*   %position.52.i = phi i32 [ %370, %399 ], [ %position.51.i, %395 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__399_536) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_401_position52i = main_366_370_reg;
	end
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %position.52.i = phi i32 [ %370, %399 ], [ %position.51.i, %395 ]*/
	if ((((cur_state == LEGUP_F_main_BB__395_531) & (memory_controller_waitrequest == 1'd0)) & (main_395_398 == 1'd0))) begin
		main_401_position52i_reg <= main_401_position52i;
		if (start == 1'b0 && ^(main_401_position52i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_position52i_reg"); $finish; end
	end
	/* main: %401*/
	/*   %position.52.i = phi i32 [ %370, %399 ], [ %position.51.i, %395 ]*/
	if (((cur_state == LEGUP_F_main_BB__399_536) & (memory_controller_waitrequest == 1'd0))) begin
		main_401_position52i_reg <= main_401_position52i;
		if (start == 1'b0 && ^(main_401_position52i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_position52i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
		main_401_403 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__401_539)) begin
		main_401_403_reg <= main_401_403;
		if (start == 1'b0 && ^(main_401_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %401*/
	/*   %404 = icmp sgt i32 %402, %403*/
		main_401_404 = ($signed(main_401_402_reg) > $signed(main_401_403));
end
always @(*) begin
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_405_406 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		main_405_406_reg <= main_405_406;
		if (start == 1'b0 && ^(main_405_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_405_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %408 = phi i32 [ %406, %405 ], [ %402, %401 ]*/
	if ((((cur_state == LEGUP_F_main_BB__401_539) & (memory_controller_waitrequest == 1'd0)) & (main_401_404 == 1'd0))) begin
		main_407_408 = main_401_402_reg;
	end
	/* main: %407*/
	/*   %408 = phi i32 [ %406, %405 ], [ %402, %401 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__405_544) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_407_408 = main_405_406_reg;
	end
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %408 = phi i32 [ %406, %405 ], [ %402, %401 ]*/
	if ((((cur_state == LEGUP_F_main_BB__401_539) & (memory_controller_waitrequest == 1'd0)) & (main_401_404 == 1'd0))) begin
		main_407_408_reg <= main_407_408;
		if (start == 1'b0 && ^(main_407_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_408_reg"); $finish; end
	end
	/* main: %407*/
	/*   %408 = phi i32 [ %406, %405 ], [ %402, %401 ]*/
	if (((cur_state == LEGUP_F_main_BB__405_544) & (memory_controller_waitrequest == 1'd0))) begin
		main_407_408_reg <= main_407_408;
		if (start == 1'b0 && ^(main_407_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %position.53.i = phi i32 [ %371, %405 ], [ %position.52.i, %401 ]*/
	if ((((cur_state == LEGUP_F_main_BB__401_539) & (memory_controller_waitrequest == 1'd0)) & (main_401_404 == 1'd0))) begin
		main_407_position53i = main_401_position52i_reg;
	end
	/* main: %407*/
	/*   %position.53.i = phi i32 [ %371, %405 ], [ %position.52.i, %401 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__405_544) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_407_position53i = main_366_371_reg;
	end
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %position.53.i = phi i32 [ %371, %405 ], [ %position.52.i, %401 ]*/
	if ((((cur_state == LEGUP_F_main_BB__401_539) & (memory_controller_waitrequest == 1'd0)) & (main_401_404 == 1'd0))) begin
		main_407_position53i_reg <= main_407_position53i;
		if (start == 1'b0 && ^(main_407_position53i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_position53i_reg"); $finish; end
	end
	/* main: %407*/
	/*   %position.53.i = phi i32 [ %371, %405 ], [ %position.52.i, %401 ]*/
	if (((cur_state == LEGUP_F_main_BB__405_544) & (memory_controller_waitrequest == 1'd0))) begin
		main_407_position53i_reg <= main_407_position53i;
		if (start == 1'b0 && ^(main_407_position53i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_position53i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
		main_407_409 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_547)) begin
		main_407_409_reg <= main_407_409;
		if (start == 1'b0 && ^(main_407_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %410 = icmp sgt i32 %408, %409*/
		main_407_410 = ($signed(main_407_408_reg) > $signed(main_407_409));
end
always @(*) begin
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_411_412 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		main_411_412_reg <= main_411_412;
		if (start == 1'b0 && ^(main_411_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_411_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %414 = phi i32 [ %412, %411 ], [ %408, %407 ]*/
	if ((((cur_state == LEGUP_F_main_BB__407_547) & (memory_controller_waitrequest == 1'd0)) & (main_407_410 == 1'd0))) begin
		main_413_414 = main_407_408_reg;
	end
	/* main: %413*/
	/*   %414 = phi i32 [ %412, %411 ], [ %408, %407 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__411_552) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_413_414 = main_411_412_reg;
	end
end
always @(posedge clk) begin
	/* main: %413*/
	/*   %414 = phi i32 [ %412, %411 ], [ %408, %407 ]*/
	if ((((cur_state == LEGUP_F_main_BB__407_547) & (memory_controller_waitrequest == 1'd0)) & (main_407_410 == 1'd0))) begin
		main_413_414_reg <= main_413_414;
		if (start == 1'b0 && ^(main_413_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_414_reg"); $finish; end
	end
	/* main: %413*/
	/*   %414 = phi i32 [ %412, %411 ], [ %408, %407 ]*/
	if (((cur_state == LEGUP_F_main_BB__411_552) & (memory_controller_waitrequest == 1'd0))) begin
		main_413_414_reg <= main_413_414;
		if (start == 1'b0 && ^(main_413_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %position.54.i = phi i32 [ %372, %411 ], [ %position.53.i, %407 ]*/
	if ((((cur_state == LEGUP_F_main_BB__407_547) & (memory_controller_waitrequest == 1'd0)) & (main_407_410 == 1'd0))) begin
		main_413_position54i = main_407_position53i_reg;
	end
	/* main: %413*/
	/*   %position.54.i = phi i32 [ %372, %411 ], [ %position.53.i, %407 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__411_552) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_413_position54i = main_366_372_reg;
	end
end
always @(posedge clk) begin
	/* main: %413*/
	/*   %position.54.i = phi i32 [ %372, %411 ], [ %position.53.i, %407 ]*/
	if ((((cur_state == LEGUP_F_main_BB__407_547) & (memory_controller_waitrequest == 1'd0)) & (main_407_410 == 1'd0))) begin
		main_413_position54i_reg <= main_413_position54i;
		if (start == 1'b0 && ^(main_413_position54i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_position54i_reg"); $finish; end
	end
	/* main: %413*/
	/*   %position.54.i = phi i32 [ %372, %411 ], [ %position.53.i, %407 ]*/
	if (((cur_state == LEGUP_F_main_BB__411_552) & (memory_controller_waitrequest == 1'd0))) begin
		main_413_position54i_reg <= main_413_position54i;
		if (start == 1'b0 && ^(main_413_position54i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_position54i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
		main_413_415 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__413_555)) begin
		main_413_415_reg <= main_413_415;
		if (start == 1'b0 && ^(main_413_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %416 = icmp sgt i32 %414, %415*/
		main_413_416 = ($signed(main_413_414_reg) > $signed(main_413_415));
end
always @(*) begin
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_417_418 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		main_417_418_reg <= main_417_418;
		if (start == 1'b0 && ^(main_417_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_417_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %420 = phi i32 [ %418, %417 ], [ %414, %413 ]*/
	if ((((cur_state == LEGUP_F_main_BB__413_555) & (memory_controller_waitrequest == 1'd0)) & (main_413_416 == 1'd0))) begin
		main_419_420 = main_413_414_reg;
	end
	/* main: %419*/
	/*   %420 = phi i32 [ %418, %417 ], [ %414, %413 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__417_560) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_419_420 = main_417_418_reg;
	end
end
always @(posedge clk) begin
	/* main: %419*/
	/*   %420 = phi i32 [ %418, %417 ], [ %414, %413 ]*/
	if ((((cur_state == LEGUP_F_main_BB__413_555) & (memory_controller_waitrequest == 1'd0)) & (main_413_416 == 1'd0))) begin
		main_419_420_reg <= main_419_420;
		if (start == 1'b0 && ^(main_419_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_420_reg"); $finish; end
	end
	/* main: %419*/
	/*   %420 = phi i32 [ %418, %417 ], [ %414, %413 ]*/
	if (((cur_state == LEGUP_F_main_BB__417_560) & (memory_controller_waitrequest == 1'd0))) begin
		main_419_420_reg <= main_419_420;
		if (start == 1'b0 && ^(main_419_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %position.55.i = phi i32 [ %373, %417 ], [ %position.54.i, %413 ]*/
	if ((((cur_state == LEGUP_F_main_BB__413_555) & (memory_controller_waitrequest == 1'd0)) & (main_413_416 == 1'd0))) begin
		main_419_position55i = main_413_position54i_reg;
	end
	/* main: %419*/
	/*   %position.55.i = phi i32 [ %373, %417 ], [ %position.54.i, %413 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__417_560) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_419_position55i = main_366_373_reg;
	end
end
always @(posedge clk) begin
	/* main: %419*/
	/*   %position.55.i = phi i32 [ %373, %417 ], [ %position.54.i, %413 ]*/
	if ((((cur_state == LEGUP_F_main_BB__413_555) & (memory_controller_waitrequest == 1'd0)) & (main_413_416 == 1'd0))) begin
		main_419_position55i_reg <= main_419_position55i;
		if (start == 1'b0 && ^(main_419_position55i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_position55i_reg"); $finish; end
	end
	/* main: %419*/
	/*   %position.55.i = phi i32 [ %373, %417 ], [ %position.54.i, %413 ]*/
	if (((cur_state == LEGUP_F_main_BB__417_560) & (memory_controller_waitrequest == 1'd0))) begin
		main_419_position55i_reg <= main_419_position55i;
		if (start == 1'b0 && ^(main_419_position55i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_position55i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
		main_419_421 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__419_563)) begin
		main_419_421_reg <= main_419_421;
		if (start == 1'b0 && ^(main_419_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %422 = icmp sgt i32 %420, %421*/
		main_419_422 = ($signed(main_419_420_reg) > $signed(main_419_421));
end
always @(*) begin
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_423_424 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		main_423_424_reg <= main_423_424;
		if (start == 1'b0 && ^(main_423_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_423_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %425*/
	/*   %426 = phi i32 [ %424, %423 ], [ %420, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__419_563) & (memory_controller_waitrequest == 1'd0)) & (main_419_422 == 1'd0))) begin
		main_425_426 = main_419_420_reg;
	end
	/* main: %425*/
	/*   %426 = phi i32 [ %424, %423 ], [ %420, %419 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__423_568) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_425_426 = main_423_424_reg;
	end
end
always @(posedge clk) begin
	/* main: %425*/
	/*   %426 = phi i32 [ %424, %423 ], [ %420, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__419_563) & (memory_controller_waitrequest == 1'd0)) & (main_419_422 == 1'd0))) begin
		main_425_426_reg <= main_425_426;
		if (start == 1'b0 && ^(main_425_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_426_reg"); $finish; end
	end
	/* main: %425*/
	/*   %426 = phi i32 [ %424, %423 ], [ %420, %419 ]*/
	if (((cur_state == LEGUP_F_main_BB__423_568) & (memory_controller_waitrequest == 1'd0))) begin
		main_425_426_reg <= main_425_426;
		if (start == 1'b0 && ^(main_425_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %425*/
	/*   %position.56.i = phi i32 [ %374, %423 ], [ %position.55.i, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__419_563) & (memory_controller_waitrequest == 1'd0)) & (main_419_422 == 1'd0))) begin
		main_425_position56i = main_419_position55i_reg;
	end
	/* main: %425*/
	/*   %position.56.i = phi i32 [ %374, %423 ], [ %position.55.i, %419 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__423_568) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_425_position56i = main_366_374_reg;
	end
end
always @(posedge clk) begin
	/* main: %425*/
	/*   %position.56.i = phi i32 [ %374, %423 ], [ %position.55.i, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__419_563) & (memory_controller_waitrequest == 1'd0)) & (main_419_422 == 1'd0))) begin
		main_425_position56i_reg <= main_425_position56i;
		if (start == 1'b0 && ^(main_425_position56i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_position56i_reg"); $finish; end
	end
	/* main: %425*/
	/*   %position.56.i = phi i32 [ %374, %423 ], [ %position.55.i, %419 ]*/
	if (((cur_state == LEGUP_F_main_BB__423_568) & (memory_controller_waitrequest == 1'd0))) begin
		main_425_position56i_reg <= main_425_position56i;
		if (start == 1'b0 && ^(main_425_position56i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_position56i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
		main_425_427 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__425_571)) begin
		main_425_427_reg <= main_425_427;
		if (start == 1'b0 && ^(main_425_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %425*/
	/*   %428 = icmp sgt i32 %426, %427*/
		main_425_428 = ($signed(main_425_426_reg) > $signed(main_425_427));
end
always @(*) begin
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_429_430 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		main_429_430_reg <= main_429_430;
		if (start == 1'b0 && ^(main_429_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_429_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %431*/
	/*   %position.57.i = phi i32 [ %375, %429 ], [ %position.56.i, %425 ]*/
	if ((((cur_state == LEGUP_F_main_BB__425_571) & (memory_controller_waitrequest == 1'd0)) & (main_425_428 == 1'd0))) begin
		main_431_position57i = main_425_position56i_reg;
	end
	/* main: %431*/
	/*   %position.57.i = phi i32 [ %375, %429 ], [ %position.56.i, %425 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__429_576) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_431_position57i = main_366_375_reg;
	end
end
always @(posedge clk) begin
	/* main: %431*/
	/*   %position.57.i = phi i32 [ %375, %429 ], [ %position.56.i, %425 ]*/
	if ((((cur_state == LEGUP_F_main_BB__425_571) & (memory_controller_waitrequest == 1'd0)) & (main_425_428 == 1'd0))) begin
		main_431_position57i_reg <= main_431_position57i;
		if (start == 1'b0 && ^(main_431_position57i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_431_position57i_reg"); $finish; end
	end
	/* main: %431*/
	/*   %position.57.i = phi i32 [ %375, %429 ], [ %position.56.i, %425 ]*/
	if (((cur_state == LEGUP_F_main_BB__429_576) & (memory_controller_waitrequest == 1'd0))) begin
		main_431_position57i_reg <= main_431_position57i;
		if (start == 1'b0 && ^(main_431_position57i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_431_position57i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %431*/
	/*   %432 = icmp sgt i32 %376, 91*/
		main_431_432 = ($signed(main_366_376_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %431*/
	/*   %indvar.next68 = add i32 %indvar67, 1*/
		main_431_indvarnext68 = (main_366_indvar67_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge73.i*/
	/*   %position.48.lcssa.i = phi i32 [ %17, %._crit_edge68.i ], [ %position.57.i, %._crit_edge73.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge68i_501) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge68i_365 == 1'd1))) begin
		main__crit_edge73i_position48lcssai = main_lrph27i_17_reg;
	end
	/* main: %._crit_edge73.i*/
	/*   %position.48.lcssa.i = phi i32 [ %17, %._crit_edge68.i ], [ %position.57.i, %._crit_edge73.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge73iloopexit_578) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge73i_position48lcssai = main_431_position57i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge73.i*/
	/*   %position.48.lcssa.i = phi i32 [ %17, %._crit_edge68.i ], [ %position.57.i, %._crit_edge73.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge68i_501) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge68i_365 == 1'd1))) begin
		main__crit_edge73i_position48lcssai_reg <= main__crit_edge73i_position48lcssai;
		if (start == 1'b0 && ^(main__crit_edge73i_position48lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge73i_position48lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge73.i*/
	/*   %position.48.lcssa.i = phi i32 [ %17, %._crit_edge68.i ], [ %position.57.i, %._crit_edge73.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge73iloopexit_578) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge73i_position48lcssai_reg <= main__crit_edge73i_position48lcssai;
		if (start == 1'b0 && ^(main__crit_edge73i_position48lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge73i_position48lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge73i_433 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge73.i*/
/*   %433 = srem i32 %26, 9*/
	main__crit_edge73i_433_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge73.i*/
	/*   %434 = sub nsw i32 100, %433*/
		main__crit_edge73i_434 = (32'd100 - main__crit_edge73i_433);
end
always @(*) begin
	/* main: %._crit_edge73.i*/
	/*   %435 = icmp sgt i32 %434, 99*/
		main__crit_edge73i_435 = ($signed(main__crit_edge73i_434) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph78.i*/
	/*   %436 = add i32 %433, -99*/
		main_lrph78i_436 = (main__crit_edge73i_433_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph78.i*/
	/*   %437 = sub i32 100, %433*/
		main_lrph78i_437 = (32'd100 - main__crit_edge73i_433_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph78.i*/
	/*   %437 = sub i32 100, %433*/
	if ((cur_state == LEGUP_F_main_BB_lrph78i_612)) begin
		main_lrph78i_437_reg <= main_lrph78i_437;
		if (start == 1'b0 && ^(main_lrph78i_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph78i_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph78.i*/
	/*   %438 = icmp sgt i32 %437, 99*/
		main_lrph78i_438 = ($signed(main_lrph78i_437) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph78.i*/
	/*   %smax80 = select i1 %438, i32 %437, i32 99*/
		main_lrph78i_smax80 = (main_lrph78i_438 ? main_lrph78i_437 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph78.i*/
	/*   %439 = add i32 %436, %smax80*/
		main_lrph78i_439 = (main_lrph78i_436 + main_lrph78i_smax80);
end
always @(posedge clk) begin
	/* main: %.lr.ph78.i*/
	/*   %439 = add i32 %436, %smax80*/
	if ((cur_state == LEGUP_F_main_BB_lrph78i_612)) begin
		main_lrph78i_439_reg <= main_lrph78i_439;
		if (start == 1'b0 && ^(main_lrph78i_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph78i_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %indvar78 = phi i32 [ %indvar.next79, %448 ], [ 0, %.lr.ph78.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph78i_612) & (memory_controller_waitrequest == 1'd0))) begin
		main_440_indvar78 = 32'd0;
	end
	/* main: %440*/
	/*   %indvar78 = phi i32 [ %indvar.next79, %448 ], [ 0, %.lr.ph78.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__448_622) & (memory_controller_waitrequest == 1'd0)) & (main_448_exitcond81 == 1'd0))) */ begin
		main_440_indvar78 = main_448_indvarnext79;
	end
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %indvar78 = phi i32 [ %indvar.next79, %448 ], [ 0, %.lr.ph78.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph78i_612) & (memory_controller_waitrequest == 1'd0))) begin
		main_440_indvar78_reg <= main_440_indvar78;
		if (start == 1'b0 && ^(main_440_indvar78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_indvar78_reg"); $finish; end
	end
	/* main: %440*/
	/*   %indvar78 = phi i32 [ %indvar.next79, %448 ], [ 0, %.lr.ph78.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__448_622) & (memory_controller_waitrequest == 1'd0)) & (main_448_exitcond81 == 1'd0))) begin
		main_440_indvar78_reg <= main_440_indvar78;
		if (start == 1'b0 && ^(main_440_indvar78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_indvar78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %position.5875.i = phi i32 [ %position.59.i, %448 ], [ %position.48.lcssa.i, %.lr.ph78.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph78i_612) & (memory_controller_waitrequest == 1'd0))) begin
		main_440_position5875i = main__crit_edge73i_position48lcssai_reg;
	end
	/* main: %440*/
	/*   %position.5875.i = phi i32 [ %position.59.i, %448 ], [ %position.48.lcssa.i, %.lr.ph78.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__448_622) & (memory_controller_waitrequest == 1'd0)) & (main_448_exitcond81 == 1'd0))) */ begin
		main_440_position5875i = main_448_position59i_reg;
	end
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %position.5875.i = phi i32 [ %position.59.i, %448 ], [ %position.48.lcssa.i, %.lr.ph78.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph78i_612) & (memory_controller_waitrequest == 1'd0))) begin
		main_440_position5875i_reg <= main_440_position5875i;
		if (start == 1'b0 && ^(main_440_position5875i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_position5875i_reg"); $finish; end
	end
	/* main: %440*/
	/*   %position.5875.i = phi i32 [ %position.59.i, %448 ], [ %position.48.lcssa.i, %.lr.ph78.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__448_622) & (memory_controller_waitrequest == 1'd0)) & (main_448_exitcond81 == 1'd0))) begin
		main_440_position5875i_reg <= main_440_position5875i;
		if (start == 1'b0 && ^(main_440_position5875i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_position5875i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %441 = sub i32 %indvar78, %433*/
		main_440_441 = (main_440_indvar78_reg - main__crit_edge73i_433_reg);
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %441 = sub i32 %indvar78, %433*/
	if ((cur_state == LEGUP_F_main_BB__440_613)) begin
		main_440_441_reg <= main_440_441;
		if (start == 1'b0 && ^(main_440_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %scevgep82 = getelementptr [100 x i32]* @y, i32 1, i32 %441*/
		main_440_scevgep82 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_440_441_reg)));
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %scevgep82 = getelementptr [100 x i32]* @y, i32 1, i32 %441*/
	if ((cur_state == LEGUP_F_main_BB__440_614)) begin
		main_440_scevgep82_reg <= main_440_scevgep82;
		if (start == 1'b0 && ^(main_440_scevgep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_scevgep82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %442 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.5875.i*/
		main_440_442 = (`TAG_g_y_a + (4 * main_440_position5875i_reg));
end
always @(*) begin
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
		main_440_443 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_615)) begin
		main_440_443_reg <= main_440_443;
		if (start == 1'b0 && ^(main_440_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
		main_440_444 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_616)) begin
		main_440_444_reg <= main_440_444;
		if (start == 1'b0 && ^(main_440_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %445 = icmp sgt i32 %443, %444*/
		main_440_445 = ($signed(main_440_443_reg) > $signed(main_440_444));
end
always @(*) begin
	/* main: %446*/
	/*   %d6.176.i = add i32 %437, %indvar78*/
		main_446_d6176i = (main_lrph78i_437_reg + main_440_indvar78_reg);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %d6.176.i = add i32 %437, %indvar78*/
	if ((cur_state == LEGUP_F_main_BB__446_617)) begin
		main_446_d6176i_reg <= main_446_d6176i;
		if (start == 1'b0 && ^(main_446_d6176i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_d6176i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
		main_446_447 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		main_446_447_reg <= main_446_447;
		if (start == 1'b0 && ^(main_446_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %448*/
	/*   %position.59.i = phi i32 [ %d6.176.i, %446 ], [ %position.5875.i, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_616) & (memory_controller_waitrequest == 1'd0)) & (main_440_445 == 1'd0))) begin
		main_448_position59i = main_440_position5875i_reg;
	end
	/* main: %448*/
	/*   %position.59.i = phi i32 [ %d6.176.i, %446 ], [ %position.5875.i, %440 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__446_621) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_448_position59i = main_446_d6176i_reg;
	end
end
always @(posedge clk) begin
	/* main: %448*/
	/*   %position.59.i = phi i32 [ %d6.176.i, %446 ], [ %position.5875.i, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_616) & (memory_controller_waitrequest == 1'd0)) & (main_440_445 == 1'd0))) begin
		main_448_position59i_reg <= main_448_position59i;
		if (start == 1'b0 && ^(main_448_position59i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_448_position59i_reg"); $finish; end
	end
	/* main: %448*/
	/*   %position.59.i = phi i32 [ %d6.176.i, %446 ], [ %position.5875.i, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__446_621) & (memory_controller_waitrequest == 1'd0))) begin
		main_448_position59i_reg <= main_448_position59i;
		if (start == 1'b0 && ^(main_448_position59i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_448_position59i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %448*/
	/*   %indvar.next79 = add i32 %indvar78, 1*/
		main_448_indvarnext79 = (main_440_indvar78_reg + 32'd1);
end
always @(*) begin
	/* main: %448*/
	/*   %exitcond81 = icmp eq i32 %indvar.next79, %439*/
		main_448_exitcond81 = (main_448_indvarnext79 == main_lrph78i_439_reg);
end
always @(*) begin
	/* main: %._crit_edge79.i*/
	/*   %449 = icmp sgt i32 %15, 91*/
		main__crit_edge79i_449 = ($signed(main_lrph27i_15_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %450*/
	/*   %indvar83 = phi i32 [ %indvar.next84, %515 ], [ 0, %.lr.ph83.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph83i_625) & (memory_controller_waitrequest == 1'd0))) begin
		main_450_indvar83 = 32'd0;
	end
	/* main: %450*/
	/*   %indvar83 = phi i32 [ %indvar.next84, %515 ], [ 0, %.lr.ph83.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__515_700) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) */ begin
		main_450_indvar83 = main_515_indvarnext84;
	end
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %indvar83 = phi i32 [ %indvar.next84, %515 ], [ 0, %.lr.ph83.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph83i_625) & (memory_controller_waitrequest == 1'd0))) begin
		main_450_indvar83_reg <= main_450_indvar83;
		if (start == 1'b0 && ^(main_450_indvar83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_indvar83_reg"); $finish; end
	end
	/* main: %450*/
	/*   %indvar83 = phi i32 [ %indvar.next84, %515 ], [ 0, %.lr.ph83.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__515_700) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) begin
		main_450_indvar83_reg <= main_450_indvar83;
		if (start == 1'b0 && ^(main_450_indvar83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_indvar83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %position.6080.i = phi i32 [ %position.69.i, %515 ], [ %16, %.lr.ph83.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph83i_625) & (memory_controller_waitrequest == 1'd0))) begin
		main_450_position6080i = main_lrph27i_16_reg;
	end
	/* main: %450*/
	/*   %position.6080.i = phi i32 [ %position.69.i, %515 ], [ %16, %.lr.ph83.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__515_700) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) */ begin
		main_450_position6080i = main_515_position69i_reg;
	end
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %position.6080.i = phi i32 [ %position.69.i, %515 ], [ %16, %.lr.ph83.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph83i_625) & (memory_controller_waitrequest == 1'd0))) begin
		main_450_position6080i_reg <= main_450_position6080i;
		if (start == 1'b0 && ^(main_450_position6080i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_position6080i_reg"); $finish; end
	end
	/* main: %450*/
	/*   %position.6080.i = phi i32 [ %position.69.i, %515 ], [ %16, %.lr.ph83.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__515_700) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) begin
		main_450_position6080i_reg <= main_450_position6080i;
		if (start == 1'b0 && ^(main_450_position6080i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_position6080i_reg"); $finish; end
	end
end
always @(*) begin
	main_450_451 = main_450_451_stage0_reg;
end
always @(*) begin
	/* main: %450*/
	/*   %d7.081.i = add i32 %15, %451*/
		main_450_d7081i = (main_lrph27i_15_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %d7.081.i = add i32 %15, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_d7081i_reg <= main_450_d7081i;
		if (start == 1'b0 && ^(main_450_d7081i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_d7081i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep93 = getelementptr [100 x i32]* @y, i32 0, i32 %d7.081.i*/
		main_450_scevgep93 = (`TAG_g_y_a + (4 * main_450_d7081i_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep93 = getelementptr [100 x i32]* @y, i32 0, i32 %d7.081.i*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep93_reg <= main_450_scevgep93;
		if (start == 1'b0 && ^(main_450_scevgep93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %452 = add i32 %14, %451*/
		main_450_452 = (main_lrph27i_14_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %452 = add i32 %14, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_452_reg <= main_450_452;
		if (start == 1'b0 && ^(main_450_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep92 = getelementptr [100 x i32]* @y, i32 0, i32 %452*/
		main_450_scevgep92 = (`TAG_g_y_a + (4 * main_450_452_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep92 = getelementptr [100 x i32]* @y, i32 0, i32 %452*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep92_reg <= main_450_scevgep92;
		if (start == 1'b0 && ^(main_450_scevgep92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %453 = add i32 %13, %451*/
		main_450_453 = (main_lrph27i_13_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %453 = add i32 %13, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_453_reg <= main_450_453;
		if (start == 1'b0 && ^(main_450_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep91 = getelementptr [100 x i32]* @y, i32 0, i32 %453*/
		main_450_scevgep91 = (`TAG_g_y_a + (4 * main_450_453_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep91 = getelementptr [100 x i32]* @y, i32 0, i32 %453*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep91_reg <= main_450_scevgep91;
		if (start == 1'b0 && ^(main_450_scevgep91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %454 = add i32 %3, %451*/
		main_450_454 = (main_lrph27i_3_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %454 = add i32 %3, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_454_reg <= main_450_454;
		if (start == 1'b0 && ^(main_450_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep90 = getelementptr [100 x i32]* @y, i32 0, i32 %454*/
		main_450_scevgep90 = (`TAG_g_y_a + (4 * main_450_454_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep90 = getelementptr [100 x i32]* @y, i32 0, i32 %454*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep90_reg <= main_450_scevgep90;
		if (start == 1'b0 && ^(main_450_scevgep90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %455 = add i32 %4, %451*/
		main_450_455 = (main_lrph27i_4_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %455 = add i32 %4, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_455_reg <= main_450_455;
		if (start == 1'b0 && ^(main_450_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep89 = getelementptr [100 x i32]* @y, i32 0, i32 %455*/
		main_450_scevgep89 = (`TAG_g_y_a + (4 * main_450_455_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep89 = getelementptr [100 x i32]* @y, i32 0, i32 %455*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep89_reg <= main_450_scevgep89;
		if (start == 1'b0 && ^(main_450_scevgep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %456 = add i32 %5, %451*/
		main_450_456 = (main_lrph27i_5_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %456 = add i32 %5, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_456_reg <= main_450_456;
		if (start == 1'b0 && ^(main_450_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep88 = getelementptr [100 x i32]* @y, i32 0, i32 %456*/
		main_450_scevgep88 = (`TAG_g_y_a + (4 * main_450_456_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep88 = getelementptr [100 x i32]* @y, i32 0, i32 %456*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep88_reg <= main_450_scevgep88;
		if (start == 1'b0 && ^(main_450_scevgep88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %457 = add i32 %6, %451*/
		main_450_457 = (main_lrph27i_6_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %457 = add i32 %6, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_457_reg <= main_450_457;
		if (start == 1'b0 && ^(main_450_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep87 = getelementptr [100 x i32]* @y, i32 0, i32 %457*/
		main_450_scevgep87 = (`TAG_g_y_a + (4 * main_450_457_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep87 = getelementptr [100 x i32]* @y, i32 0, i32 %457*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep87_reg <= main_450_scevgep87;
		if (start == 1'b0 && ^(main_450_scevgep87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %458 = add i32 %7, %451*/
		main_450_458 = (main_lrph27i_7_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %458 = add i32 %7, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_458_reg <= main_450_458;
		if (start == 1'b0 && ^(main_450_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep86 = getelementptr [100 x i32]* @y, i32 0, i32 %458*/
		main_450_scevgep86 = (`TAG_g_y_a + (4 * main_450_458_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep86 = getelementptr [100 x i32]* @y, i32 0, i32 %458*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep86_reg <= main_450_scevgep86;
		if (start == 1'b0 && ^(main_450_scevgep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %459 = add i32 %8, %451*/
		main_450_459 = (main_lrph27i_8_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %459 = add i32 %8, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_459_reg <= main_450_459;
		if (start == 1'b0 && ^(main_450_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %scevgep85 = getelementptr [100 x i32]* @y, i32 0, i32 %459*/
		main_450_scevgep85 = (`TAG_g_y_a + (4 * main_450_459_reg));
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %scevgep85 = getelementptr [100 x i32]* @y, i32 0, i32 %459*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_scevgep85_reg <= main_450_scevgep85;
		if (start == 1'b0 && ^(main_450_scevgep85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_scevgep85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %460 = add i32 %9, %451*/
		main_450_460 = (main_lrph27i_9_reg + main_450_451);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %460 = add i32 %9, %451*/
	if ((cur_state == LEGUP_F_main_BB__450_627)) begin
		main_450_460_reg <= main_450_460;
		if (start == 1'b0 && ^(main_450_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %461 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.6080.i*/
		main_450_461 = (`TAG_g_y_a + (4 * main_450_position6080i_reg));
end
always @(*) begin
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
		main_450_462 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		main_450_462_reg <= main_450_462;
		if (start == 1'b0 && ^(main_450_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
		main_450_463 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_630)) begin
		main_450_463_reg <= main_450_463;
		if (start == 1'b0 && ^(main_450_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_450_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %450*/
	/*   %464 = icmp sgt i32 %462, %463*/
		main_450_464 = ($signed(main_450_462_reg) > $signed(main_450_463));
end
always @(*) begin
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_465_466 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		main_465_466_reg <= main_465_466;
		if (start == 1'b0 && ^(main_465_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_465_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %468 = phi i32 [ %466, %465 ], [ %462, %450 ]*/
	if ((((cur_state == LEGUP_F_main_BB__450_630) & (memory_controller_waitrequest == 1'd0)) & (main_450_464 == 1'd0))) begin
		main_467_468 = main_450_462_reg;
	end
	/* main: %467*/
	/*   %468 = phi i32 [ %466, %465 ], [ %462, %450 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__465_635) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_467_468 = main_465_466_reg;
	end
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %468 = phi i32 [ %466, %465 ], [ %462, %450 ]*/
	if ((((cur_state == LEGUP_F_main_BB__450_630) & (memory_controller_waitrequest == 1'd0)) & (main_450_464 == 1'd0))) begin
		main_467_468_reg <= main_467_468;
		if (start == 1'b0 && ^(main_467_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_468_reg"); $finish; end
	end
	/* main: %467*/
	/*   %468 = phi i32 [ %466, %465 ], [ %462, %450 ]*/
	if (((cur_state == LEGUP_F_main_BB__465_635) & (memory_controller_waitrequest == 1'd0))) begin
		main_467_468_reg <= main_467_468;
		if (start == 1'b0 && ^(main_467_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %position.61.i = phi i32 [ %d7.081.i, %465 ], [ %position.6080.i, %450 ]*/
	if ((((cur_state == LEGUP_F_main_BB__450_630) & (memory_controller_waitrequest == 1'd0)) & (main_450_464 == 1'd0))) begin
		main_467_position61i = main_450_position6080i_reg;
	end
	/* main: %467*/
	/*   %position.61.i = phi i32 [ %d7.081.i, %465 ], [ %position.6080.i, %450 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__465_635) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_467_position61i = main_450_d7081i_reg;
	end
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %position.61.i = phi i32 [ %d7.081.i, %465 ], [ %position.6080.i, %450 ]*/
	if ((((cur_state == LEGUP_F_main_BB__450_630) & (memory_controller_waitrequest == 1'd0)) & (main_450_464 == 1'd0))) begin
		main_467_position61i_reg <= main_467_position61i;
		if (start == 1'b0 && ^(main_467_position61i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_position61i_reg"); $finish; end
	end
	/* main: %467*/
	/*   %position.61.i = phi i32 [ %d7.081.i, %465 ], [ %position.6080.i, %450 ]*/
	if (((cur_state == LEGUP_F_main_BB__465_635) & (memory_controller_waitrequest == 1'd0))) begin
		main_467_position61i_reg <= main_467_position61i;
		if (start == 1'b0 && ^(main_467_position61i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_position61i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
		main_467_469 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__467_638)) begin
		main_467_469_reg <= main_467_469;
		if (start == 1'b0 && ^(main_467_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %470 = icmp sgt i32 %468, %469*/
		main_467_470 = ($signed(main_467_468_reg) > $signed(main_467_469));
end
always @(*) begin
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_471_472 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		main_471_472_reg <= main_471_472;
		if (start == 1'b0 && ^(main_471_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_471_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %473*/
	/*   %474 = phi i32 [ %472, %471 ], [ %468, %467 ]*/
	if ((((cur_state == LEGUP_F_main_BB__467_638) & (memory_controller_waitrequest == 1'd0)) & (main_467_470 == 1'd0))) begin
		main_473_474 = main_467_468_reg;
	end
	/* main: %473*/
	/*   %474 = phi i32 [ %472, %471 ], [ %468, %467 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__471_643) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_473_474 = main_471_472_reg;
	end
end
always @(posedge clk) begin
	/* main: %473*/
	/*   %474 = phi i32 [ %472, %471 ], [ %468, %467 ]*/
	if ((((cur_state == LEGUP_F_main_BB__467_638) & (memory_controller_waitrequest == 1'd0)) & (main_467_470 == 1'd0))) begin
		main_473_474_reg <= main_473_474;
		if (start == 1'b0 && ^(main_473_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_473_474_reg"); $finish; end
	end
	/* main: %473*/
	/*   %474 = phi i32 [ %472, %471 ], [ %468, %467 ]*/
	if (((cur_state == LEGUP_F_main_BB__471_643) & (memory_controller_waitrequest == 1'd0))) begin
		main_473_474_reg <= main_473_474;
		if (start == 1'b0 && ^(main_473_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_473_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %473*/
	/*   %position.62.i = phi i32 [ %452, %471 ], [ %position.61.i, %467 ]*/
	if ((((cur_state == LEGUP_F_main_BB__467_638) & (memory_controller_waitrequest == 1'd0)) & (main_467_470 == 1'd0))) begin
		main_473_position62i = main_467_position61i_reg;
	end
	/* main: %473*/
	/*   %position.62.i = phi i32 [ %452, %471 ], [ %position.61.i, %467 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__471_643) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_473_position62i = main_450_452_reg;
	end
end
always @(posedge clk) begin
	/* main: %473*/
	/*   %position.62.i = phi i32 [ %452, %471 ], [ %position.61.i, %467 ]*/
	if ((((cur_state == LEGUP_F_main_BB__467_638) & (memory_controller_waitrequest == 1'd0)) & (main_467_470 == 1'd0))) begin
		main_473_position62i_reg <= main_473_position62i;
		if (start == 1'b0 && ^(main_473_position62i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_473_position62i_reg"); $finish; end
	end
	/* main: %473*/
	/*   %position.62.i = phi i32 [ %452, %471 ], [ %position.61.i, %467 ]*/
	if (((cur_state == LEGUP_F_main_BB__471_643) & (memory_controller_waitrequest == 1'd0))) begin
		main_473_position62i_reg <= main_473_position62i;
		if (start == 1'b0 && ^(main_473_position62i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_473_position62i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
		main_473_475 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__473_646)) begin
		main_473_475_reg <= main_473_475;
		if (start == 1'b0 && ^(main_473_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_473_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %473*/
	/*   %476 = icmp sgt i32 %474, %475*/
		main_473_476 = ($signed(main_473_474_reg) > $signed(main_473_475));
end
always @(*) begin
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_477_478 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		main_477_478_reg <= main_477_478;
		if (start == 1'b0 && ^(main_477_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %479*/
	/*   %480 = phi i32 [ %478, %477 ], [ %474, %473 ]*/
	if ((((cur_state == LEGUP_F_main_BB__473_646) & (memory_controller_waitrequest == 1'd0)) & (main_473_476 == 1'd0))) begin
		main_479_480 = main_473_474_reg;
	end
	/* main: %479*/
	/*   %480 = phi i32 [ %478, %477 ], [ %474, %473 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__477_651) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_479_480 = main_477_478_reg;
	end
end
always @(posedge clk) begin
	/* main: %479*/
	/*   %480 = phi i32 [ %478, %477 ], [ %474, %473 ]*/
	if ((((cur_state == LEGUP_F_main_BB__473_646) & (memory_controller_waitrequest == 1'd0)) & (main_473_476 == 1'd0))) begin
		main_479_480_reg <= main_479_480;
		if (start == 1'b0 && ^(main_479_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_479_480_reg"); $finish; end
	end
	/* main: %479*/
	/*   %480 = phi i32 [ %478, %477 ], [ %474, %473 ]*/
	if (((cur_state == LEGUP_F_main_BB__477_651) & (memory_controller_waitrequest == 1'd0))) begin
		main_479_480_reg <= main_479_480;
		if (start == 1'b0 && ^(main_479_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_479_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %479*/
	/*   %position.63.i = phi i32 [ %453, %477 ], [ %position.62.i, %473 ]*/
	if ((((cur_state == LEGUP_F_main_BB__473_646) & (memory_controller_waitrequest == 1'd0)) & (main_473_476 == 1'd0))) begin
		main_479_position63i = main_473_position62i_reg;
	end
	/* main: %479*/
	/*   %position.63.i = phi i32 [ %453, %477 ], [ %position.62.i, %473 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__477_651) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_479_position63i = main_450_453_reg;
	end
end
always @(posedge clk) begin
	/* main: %479*/
	/*   %position.63.i = phi i32 [ %453, %477 ], [ %position.62.i, %473 ]*/
	if ((((cur_state == LEGUP_F_main_BB__473_646) & (memory_controller_waitrequest == 1'd0)) & (main_473_476 == 1'd0))) begin
		main_479_position63i_reg <= main_479_position63i;
		if (start == 1'b0 && ^(main_479_position63i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_479_position63i_reg"); $finish; end
	end
	/* main: %479*/
	/*   %position.63.i = phi i32 [ %453, %477 ], [ %position.62.i, %473 ]*/
	if (((cur_state == LEGUP_F_main_BB__477_651) & (memory_controller_waitrequest == 1'd0))) begin
		main_479_position63i_reg <= main_479_position63i;
		if (start == 1'b0 && ^(main_479_position63i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_479_position63i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
		main_479_481 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__479_654)) begin
		main_479_481_reg <= main_479_481;
		if (start == 1'b0 && ^(main_479_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_479_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %479*/
	/*   %482 = icmp sgt i32 %480, %481*/
		main_479_482 = ($signed(main_479_480_reg) > $signed(main_479_481));
end
always @(*) begin
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_483_484 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		main_483_484_reg <= main_483_484;
		if (start == 1'b0 && ^(main_483_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_483_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %486 = phi i32 [ %484, %483 ], [ %480, %479 ]*/
	if ((((cur_state == LEGUP_F_main_BB__479_654) & (memory_controller_waitrequest == 1'd0)) & (main_479_482 == 1'd0))) begin
		main_485_486 = main_479_480_reg;
	end
	/* main: %485*/
	/*   %486 = phi i32 [ %484, %483 ], [ %480, %479 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__483_659) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_485_486 = main_483_484_reg;
	end
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %486 = phi i32 [ %484, %483 ], [ %480, %479 ]*/
	if ((((cur_state == LEGUP_F_main_BB__479_654) & (memory_controller_waitrequest == 1'd0)) & (main_479_482 == 1'd0))) begin
		main_485_486_reg <= main_485_486;
		if (start == 1'b0 && ^(main_485_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_486_reg"); $finish; end
	end
	/* main: %485*/
	/*   %486 = phi i32 [ %484, %483 ], [ %480, %479 ]*/
	if (((cur_state == LEGUP_F_main_BB__483_659) & (memory_controller_waitrequest == 1'd0))) begin
		main_485_486_reg <= main_485_486;
		if (start == 1'b0 && ^(main_485_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %position.64.i = phi i32 [ %454, %483 ], [ %position.63.i, %479 ]*/
	if ((((cur_state == LEGUP_F_main_BB__479_654) & (memory_controller_waitrequest == 1'd0)) & (main_479_482 == 1'd0))) begin
		main_485_position64i = main_479_position63i_reg;
	end
	/* main: %485*/
	/*   %position.64.i = phi i32 [ %454, %483 ], [ %position.63.i, %479 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__483_659) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_485_position64i = main_450_454_reg;
	end
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %position.64.i = phi i32 [ %454, %483 ], [ %position.63.i, %479 ]*/
	if ((((cur_state == LEGUP_F_main_BB__479_654) & (memory_controller_waitrequest == 1'd0)) & (main_479_482 == 1'd0))) begin
		main_485_position64i_reg <= main_485_position64i;
		if (start == 1'b0 && ^(main_485_position64i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_position64i_reg"); $finish; end
	end
	/* main: %485*/
	/*   %position.64.i = phi i32 [ %454, %483 ], [ %position.63.i, %479 ]*/
	if (((cur_state == LEGUP_F_main_BB__483_659) & (memory_controller_waitrequest == 1'd0))) begin
		main_485_position64i_reg <= main_485_position64i;
		if (start == 1'b0 && ^(main_485_position64i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_position64i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
		main_485_487 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__485_662)) begin
		main_485_487_reg <= main_485_487;
		if (start == 1'b0 && ^(main_485_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %488 = icmp sgt i32 %486, %487*/
		main_485_488 = ($signed(main_485_486_reg) > $signed(main_485_487));
end
always @(*) begin
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_489_490 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		main_489_490_reg <= main_489_490;
		if (start == 1'b0 && ^(main_489_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_489_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %492 = phi i32 [ %490, %489 ], [ %486, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB__485_662) & (memory_controller_waitrequest == 1'd0)) & (main_485_488 == 1'd0))) begin
		main_491_492 = main_485_486_reg;
	end
	/* main: %491*/
	/*   %492 = phi i32 [ %490, %489 ], [ %486, %485 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__489_667) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_491_492 = main_489_490_reg;
	end
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %492 = phi i32 [ %490, %489 ], [ %486, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB__485_662) & (memory_controller_waitrequest == 1'd0)) & (main_485_488 == 1'd0))) begin
		main_491_492_reg <= main_491_492;
		if (start == 1'b0 && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
	end
	/* main: %491*/
	/*   %492 = phi i32 [ %490, %489 ], [ %486, %485 ]*/
	if (((cur_state == LEGUP_F_main_BB__489_667) & (memory_controller_waitrequest == 1'd0))) begin
		main_491_492_reg <= main_491_492;
		if (start == 1'b0 && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %position.65.i = phi i32 [ %455, %489 ], [ %position.64.i, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB__485_662) & (memory_controller_waitrequest == 1'd0)) & (main_485_488 == 1'd0))) begin
		main_491_position65i = main_485_position64i_reg;
	end
	/* main: %491*/
	/*   %position.65.i = phi i32 [ %455, %489 ], [ %position.64.i, %485 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__489_667) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_491_position65i = main_450_455_reg;
	end
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %position.65.i = phi i32 [ %455, %489 ], [ %position.64.i, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB__485_662) & (memory_controller_waitrequest == 1'd0)) & (main_485_488 == 1'd0))) begin
		main_491_position65i_reg <= main_491_position65i;
		if (start == 1'b0 && ^(main_491_position65i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_position65i_reg"); $finish; end
	end
	/* main: %491*/
	/*   %position.65.i = phi i32 [ %455, %489 ], [ %position.64.i, %485 ]*/
	if (((cur_state == LEGUP_F_main_BB__489_667) & (memory_controller_waitrequest == 1'd0))) begin
		main_491_position65i_reg <= main_491_position65i;
		if (start == 1'b0 && ^(main_491_position65i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_position65i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
		main_491_493 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__491_670)) begin
		main_491_493_reg <= main_491_493;
		if (start == 1'b0 && ^(main_491_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %494 = icmp sgt i32 %492, %493*/
		main_491_494 = ($signed(main_491_492_reg) > $signed(main_491_493));
end
always @(*) begin
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_495_496 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		main_495_496_reg <= main_495_496;
		if (start == 1'b0 && ^(main_495_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_495_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %498 = phi i32 [ %496, %495 ], [ %492, %491 ]*/
	if ((((cur_state == LEGUP_F_main_BB__491_670) & (memory_controller_waitrequest == 1'd0)) & (main_491_494 == 1'd0))) begin
		main_497_498 = main_491_492_reg;
	end
	/* main: %497*/
	/*   %498 = phi i32 [ %496, %495 ], [ %492, %491 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__495_675) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_497_498 = main_495_496_reg;
	end
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %498 = phi i32 [ %496, %495 ], [ %492, %491 ]*/
	if ((((cur_state == LEGUP_F_main_BB__491_670) & (memory_controller_waitrequest == 1'd0)) & (main_491_494 == 1'd0))) begin
		main_497_498_reg <= main_497_498;
		if (start == 1'b0 && ^(main_497_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_498_reg"); $finish; end
	end
	/* main: %497*/
	/*   %498 = phi i32 [ %496, %495 ], [ %492, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__495_675) & (memory_controller_waitrequest == 1'd0))) begin
		main_497_498_reg <= main_497_498;
		if (start == 1'b0 && ^(main_497_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %position.66.i = phi i32 [ %456, %495 ], [ %position.65.i, %491 ]*/
	if ((((cur_state == LEGUP_F_main_BB__491_670) & (memory_controller_waitrequest == 1'd0)) & (main_491_494 == 1'd0))) begin
		main_497_position66i = main_491_position65i_reg;
	end
	/* main: %497*/
	/*   %position.66.i = phi i32 [ %456, %495 ], [ %position.65.i, %491 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__495_675) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_497_position66i = main_450_456_reg;
	end
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %position.66.i = phi i32 [ %456, %495 ], [ %position.65.i, %491 ]*/
	if ((((cur_state == LEGUP_F_main_BB__491_670) & (memory_controller_waitrequest == 1'd0)) & (main_491_494 == 1'd0))) begin
		main_497_position66i_reg <= main_497_position66i;
		if (start == 1'b0 && ^(main_497_position66i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_position66i_reg"); $finish; end
	end
	/* main: %497*/
	/*   %position.66.i = phi i32 [ %456, %495 ], [ %position.65.i, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__495_675) & (memory_controller_waitrequest == 1'd0))) begin
		main_497_position66i_reg <= main_497_position66i;
		if (start == 1'b0 && ^(main_497_position66i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_position66i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
		main_497_499 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__497_678)) begin
		main_497_499_reg <= main_497_499;
		if (start == 1'b0 && ^(main_497_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %500 = icmp sgt i32 %498, %499*/
		main_497_500 = ($signed(main_497_498_reg) > $signed(main_497_499));
end
always @(*) begin
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_501_502 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		main_501_502_reg <= main_501_502;
		if (start == 1'b0 && ^(main_501_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_501_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %504 = phi i32 [ %502, %501 ], [ %498, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB__497_678) & (memory_controller_waitrequest == 1'd0)) & (main_497_500 == 1'd0))) begin
		main_503_504 = main_497_498_reg;
	end
	/* main: %503*/
	/*   %504 = phi i32 [ %502, %501 ], [ %498, %497 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__501_683) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_503_504 = main_501_502_reg;
	end
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %504 = phi i32 [ %502, %501 ], [ %498, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB__497_678) & (memory_controller_waitrequest == 1'd0)) & (main_497_500 == 1'd0))) begin
		main_503_504_reg <= main_503_504;
		if (start == 1'b0 && ^(main_503_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_504_reg"); $finish; end
	end
	/* main: %503*/
	/*   %504 = phi i32 [ %502, %501 ], [ %498, %497 ]*/
	if (((cur_state == LEGUP_F_main_BB__501_683) & (memory_controller_waitrequest == 1'd0))) begin
		main_503_504_reg <= main_503_504;
		if (start == 1'b0 && ^(main_503_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %position.67.i = phi i32 [ %457, %501 ], [ %position.66.i, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB__497_678) & (memory_controller_waitrequest == 1'd0)) & (main_497_500 == 1'd0))) begin
		main_503_position67i = main_497_position66i_reg;
	end
	/* main: %503*/
	/*   %position.67.i = phi i32 [ %457, %501 ], [ %position.66.i, %497 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__501_683) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_503_position67i = main_450_457_reg;
	end
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %position.67.i = phi i32 [ %457, %501 ], [ %position.66.i, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB__497_678) & (memory_controller_waitrequest == 1'd0)) & (main_497_500 == 1'd0))) begin
		main_503_position67i_reg <= main_503_position67i;
		if (start == 1'b0 && ^(main_503_position67i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_position67i_reg"); $finish; end
	end
	/* main: %503*/
	/*   %position.67.i = phi i32 [ %457, %501 ], [ %position.66.i, %497 ]*/
	if (((cur_state == LEGUP_F_main_BB__501_683) & (memory_controller_waitrequest == 1'd0))) begin
		main_503_position67i_reg <= main_503_position67i;
		if (start == 1'b0 && ^(main_503_position67i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_position67i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
		main_503_505 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__503_686)) begin
		main_503_505_reg <= main_503_505;
		if (start == 1'b0 && ^(main_503_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %506 = icmp sgt i32 %504, %505*/
		main_503_506 = ($signed(main_503_504_reg) > $signed(main_503_505));
end
always @(*) begin
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_507_508 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		main_507_508_reg <= main_507_508;
		if (start == 1'b0 && ^(main_507_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_507_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %509*/
	/*   %510 = phi i32 [ %508, %507 ], [ %504, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__503_686) & (memory_controller_waitrequest == 1'd0)) & (main_503_506 == 1'd0))) begin
		main_509_510 = main_503_504_reg;
	end
	/* main: %509*/
	/*   %510 = phi i32 [ %508, %507 ], [ %504, %503 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__507_691) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_509_510 = main_507_508_reg;
	end
end
always @(posedge clk) begin
	/* main: %509*/
	/*   %510 = phi i32 [ %508, %507 ], [ %504, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__503_686) & (memory_controller_waitrequest == 1'd0)) & (main_503_506 == 1'd0))) begin
		main_509_510_reg <= main_509_510;
		if (start == 1'b0 && ^(main_509_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_509_510_reg"); $finish; end
	end
	/* main: %509*/
	/*   %510 = phi i32 [ %508, %507 ], [ %504, %503 ]*/
	if (((cur_state == LEGUP_F_main_BB__507_691) & (memory_controller_waitrequest == 1'd0))) begin
		main_509_510_reg <= main_509_510;
		if (start == 1'b0 && ^(main_509_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_509_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %509*/
	/*   %position.68.i = phi i32 [ %458, %507 ], [ %position.67.i, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__503_686) & (memory_controller_waitrequest == 1'd0)) & (main_503_506 == 1'd0))) begin
		main_509_position68i = main_503_position67i_reg;
	end
	/* main: %509*/
	/*   %position.68.i = phi i32 [ %458, %507 ], [ %position.67.i, %503 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__507_691) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_509_position68i = main_450_458_reg;
	end
end
always @(posedge clk) begin
	/* main: %509*/
	/*   %position.68.i = phi i32 [ %458, %507 ], [ %position.67.i, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__503_686) & (memory_controller_waitrequest == 1'd0)) & (main_503_506 == 1'd0))) begin
		main_509_position68i_reg <= main_509_position68i;
		if (start == 1'b0 && ^(main_509_position68i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_509_position68i_reg"); $finish; end
	end
	/* main: %509*/
	/*   %position.68.i = phi i32 [ %458, %507 ], [ %position.67.i, %503 ]*/
	if (((cur_state == LEGUP_F_main_BB__507_691) & (memory_controller_waitrequest == 1'd0))) begin
		main_509_position68i_reg <= main_509_position68i;
		if (start == 1'b0 && ^(main_509_position68i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_509_position68i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
		main_509_511 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__509_694)) begin
		main_509_511_reg <= main_509_511;
		if (start == 1'b0 && ^(main_509_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_509_511_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %509*/
	/*   %512 = icmp sgt i32 %510, %511*/
		main_509_512 = ($signed(main_509_510_reg) > $signed(main_509_511));
end
always @(*) begin
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_513_514 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		main_513_514_reg <= main_513_514;
		if (start == 1'b0 && ^(main_513_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_513_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %515*/
	/*   %position.69.i = phi i32 [ %459, %513 ], [ %position.68.i, %509 ]*/
	if ((((cur_state == LEGUP_F_main_BB__509_694) & (memory_controller_waitrequest == 1'd0)) & (main_509_512 == 1'd0))) begin
		main_515_position69i = main_509_position68i_reg;
	end
	/* main: %515*/
	/*   %position.69.i = phi i32 [ %459, %513 ], [ %position.68.i, %509 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__513_699) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_515_position69i = main_450_459_reg;
	end
end
always @(posedge clk) begin
	/* main: %515*/
	/*   %position.69.i = phi i32 [ %459, %513 ], [ %position.68.i, %509 ]*/
	if ((((cur_state == LEGUP_F_main_BB__509_694) & (memory_controller_waitrequest == 1'd0)) & (main_509_512 == 1'd0))) begin
		main_515_position69i_reg <= main_515_position69i;
		if (start == 1'b0 && ^(main_515_position69i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_515_position69i_reg"); $finish; end
	end
	/* main: %515*/
	/*   %position.69.i = phi i32 [ %459, %513 ], [ %position.68.i, %509 ]*/
	if (((cur_state == LEGUP_F_main_BB__513_699) & (memory_controller_waitrequest == 1'd0))) begin
		main_515_position69i_reg <= main_515_position69i;
		if (start == 1'b0 && ^(main_515_position69i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_515_position69i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %515*/
	/*   %516 = icmp sgt i32 %460, 91*/
		main_515_516 = ($signed(main_450_460_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %515*/
	/*   %indvar.next84 = add i32 %indvar83, 1*/
		main_515_indvarnext84 = (main_450_indvar83_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge84.i*/
	/*   %position.60.lcssa.i = phi i32 [ %16, %._crit_edge79.i ], [ %position.69.i, %._crit_edge84.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge79i_624) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge79i_449 == 1'd1))) begin
		main__crit_edge84i_position60lcssai = main_lrph27i_16_reg;
	end
	/* main: %._crit_edge84.i*/
	/*   %position.60.lcssa.i = phi i32 [ %16, %._crit_edge79.i ], [ %position.69.i, %._crit_edge84.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge84iloopexit_701) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge84i_position60lcssai = main_515_position69i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge84.i*/
	/*   %position.60.lcssa.i = phi i32 [ %16, %._crit_edge79.i ], [ %position.69.i, %._crit_edge84.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge79i_624) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge79i_449 == 1'd1))) begin
		main__crit_edge84i_position60lcssai_reg <= main__crit_edge84i_position60lcssai;
		if (start == 1'b0 && ^(main__crit_edge84i_position60lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge84i_position60lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge84.i*/
	/*   %position.60.lcssa.i = phi i32 [ %16, %._crit_edge79.i ], [ %position.69.i, %._crit_edge84.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge84iloopexit_701) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge84i_position60lcssai_reg <= main__crit_edge84i_position60lcssai;
		if (start == 1'b0 && ^(main__crit_edge84i_position60lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge84i_position60lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge84i_517 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge84.i*/
/*   %517 = srem i32 %25, 9*/
	main__crit_edge84i_517_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge84.i*/
	/*   %518 = sub nsw i32 100, %517*/
		main__crit_edge84i_518 = (32'd100 - main__crit_edge84i_517);
end
always @(*) begin
	/* main: %._crit_edge84.i*/
	/*   %519 = icmp sgt i32 %518, 99*/
		main__crit_edge84i_519 = ($signed(main__crit_edge84i_518) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph89.i*/
	/*   %520 = add i32 %517, -99*/
		main_lrph89i_520 = (main__crit_edge84i_517_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph89.i*/
	/*   %521 = sub i32 100, %517*/
		main_lrph89i_521 = (32'd100 - main__crit_edge84i_517_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph89.i*/
	/*   %521 = sub i32 100, %517*/
	if ((cur_state == LEGUP_F_main_BB_lrph89i_735)) begin
		main_lrph89i_521_reg <= main_lrph89i_521;
		if (start == 1'b0 && ^(main_lrph89i_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph89i_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph89.i*/
	/*   %522 = icmp sgt i32 %521, 99*/
		main_lrph89i_522 = ($signed(main_lrph89i_521) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph89.i*/
	/*   %smax96 = select i1 %522, i32 %521, i32 99*/
		main_lrph89i_smax96 = (main_lrph89i_522 ? main_lrph89i_521 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph89.i*/
	/*   %523 = add i32 %520, %smax96*/
		main_lrph89i_523 = (main_lrph89i_520 + main_lrph89i_smax96);
end
always @(posedge clk) begin
	/* main: %.lr.ph89.i*/
	/*   %523 = add i32 %520, %smax96*/
	if ((cur_state == LEGUP_F_main_BB_lrph89i_735)) begin
		main_lrph89i_523_reg <= main_lrph89i_523;
		if (start == 1'b0 && ^(main_lrph89i_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph89i_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %indvar94 = phi i32 [ %indvar.next95, %532 ], [ 0, %.lr.ph89.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph89i_735) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_indvar94 = 32'd0;
	end
	/* main: %524*/
	/*   %indvar94 = phi i32 [ %indvar.next95, %532 ], [ 0, %.lr.ph89.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__532_745) & (memory_controller_waitrequest == 1'd0)) & (main_532_exitcond97 == 1'd0))) */ begin
		main_524_indvar94 = main_532_indvarnext95;
	end
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %indvar94 = phi i32 [ %indvar.next95, %532 ], [ 0, %.lr.ph89.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph89i_735) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_indvar94_reg <= main_524_indvar94;
		if (start == 1'b0 && ^(main_524_indvar94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_indvar94_reg"); $finish; end
	end
	/* main: %524*/
	/*   %indvar94 = phi i32 [ %indvar.next95, %532 ], [ 0, %.lr.ph89.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__532_745) & (memory_controller_waitrequest == 1'd0)) & (main_532_exitcond97 == 1'd0))) begin
		main_524_indvar94_reg <= main_524_indvar94;
		if (start == 1'b0 && ^(main_524_indvar94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_indvar94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %position.7086.i = phi i32 [ %position.71.i, %532 ], [ %position.60.lcssa.i, %.lr.ph89.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph89i_735) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_position7086i = main__crit_edge84i_position60lcssai_reg;
	end
	/* main: %524*/
	/*   %position.7086.i = phi i32 [ %position.71.i, %532 ], [ %position.60.lcssa.i, %.lr.ph89.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__532_745) & (memory_controller_waitrequest == 1'd0)) & (main_532_exitcond97 == 1'd0))) */ begin
		main_524_position7086i = main_532_position71i_reg;
	end
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %position.7086.i = phi i32 [ %position.71.i, %532 ], [ %position.60.lcssa.i, %.lr.ph89.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph89i_735) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_position7086i_reg <= main_524_position7086i;
		if (start == 1'b0 && ^(main_524_position7086i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_position7086i_reg"); $finish; end
	end
	/* main: %524*/
	/*   %position.7086.i = phi i32 [ %position.71.i, %532 ], [ %position.60.lcssa.i, %.lr.ph89.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__532_745) & (memory_controller_waitrequest == 1'd0)) & (main_532_exitcond97 == 1'd0))) begin
		main_524_position7086i_reg <= main_524_position7086i;
		if (start == 1'b0 && ^(main_524_position7086i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_position7086i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %525 = sub i32 %indvar94, %517*/
		main_524_525 = (main_524_indvar94_reg - main__crit_edge84i_517_reg);
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %525 = sub i32 %indvar94, %517*/
	if ((cur_state == LEGUP_F_main_BB__524_736)) begin
		main_524_525_reg <= main_524_525;
		if (start == 1'b0 && ^(main_524_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %scevgep98 = getelementptr [100 x i32]* @y, i32 1, i32 %525*/
		main_524_scevgep98 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_524_525_reg)));
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %scevgep98 = getelementptr [100 x i32]* @y, i32 1, i32 %525*/
	if ((cur_state == LEGUP_F_main_BB__524_737)) begin
		main_524_scevgep98_reg <= main_524_scevgep98;
		if (start == 1'b0 && ^(main_524_scevgep98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_scevgep98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %526 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.7086.i*/
		main_524_526 = (`TAG_g_y_a + (4 * main_524_position7086i_reg));
end
always @(*) begin
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
		main_524_527 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_738)) begin
		main_524_527_reg <= main_524_527;
		if (start == 1'b0 && ^(main_524_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
		main_524_528 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_739)) begin
		main_524_528_reg <= main_524_528;
		if (start == 1'b0 && ^(main_524_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %529 = icmp sgt i32 %527, %528*/
		main_524_529 = ($signed(main_524_527_reg) > $signed(main_524_528));
end
always @(*) begin
	/* main: %530*/
	/*   %d7.187.i = add i32 %521, %indvar94*/
		main_530_d7187i = (main_lrph89i_521_reg + main_524_indvar94_reg);
end
always @(posedge clk) begin
	/* main: %530*/
	/*   %d7.187.i = add i32 %521, %indvar94*/
	if ((cur_state == LEGUP_F_main_BB__530_740)) begin
		main_530_d7187i_reg <= main_530_d7187i;
		if (start == 1'b0 && ^(main_530_d7187i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_530_d7187i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
		main_530_531 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		main_530_531_reg <= main_530_531;
		if (start == 1'b0 && ^(main_530_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_530_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %position.71.i = phi i32 [ %d7.187.i, %530 ], [ %position.7086.i, %524 ]*/
	if ((((cur_state == LEGUP_F_main_BB__524_739) & (memory_controller_waitrequest == 1'd0)) & (main_524_529 == 1'd0))) begin
		main_532_position71i = main_524_position7086i_reg;
	end
	/* main: %532*/
	/*   %position.71.i = phi i32 [ %d7.187.i, %530 ], [ %position.7086.i, %524 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__530_744) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_532_position71i = main_530_d7187i_reg;
	end
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %position.71.i = phi i32 [ %d7.187.i, %530 ], [ %position.7086.i, %524 ]*/
	if ((((cur_state == LEGUP_F_main_BB__524_739) & (memory_controller_waitrequest == 1'd0)) & (main_524_529 == 1'd0))) begin
		main_532_position71i_reg <= main_532_position71i;
		if (start == 1'b0 && ^(main_532_position71i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_position71i_reg"); $finish; end
	end
	/* main: %532*/
	/*   %position.71.i = phi i32 [ %d7.187.i, %530 ], [ %position.7086.i, %524 ]*/
	if (((cur_state == LEGUP_F_main_BB__530_744) & (memory_controller_waitrequest == 1'd0))) begin
		main_532_position71i_reg <= main_532_position71i;
		if (start == 1'b0 && ^(main_532_position71i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_position71i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %indvar.next95 = add i32 %indvar94, 1*/
		main_532_indvarnext95 = (main_524_indvar94_reg + 32'd1);
end
always @(*) begin
	/* main: %532*/
	/*   %exitcond97 = icmp eq i32 %indvar.next95, %523*/
		main_532_exitcond97 = (main_532_indvarnext95 == main_lrph89i_523_reg);
end
always @(*) begin
	/* main: %._crit_edge90.i*/
	/*   %533 = icmp sgt i32 %14, 91*/
		main__crit_edge90i_533 = ($signed(main_lrph27i_14_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %534*/
	/*   %indvar99 = phi i32 [ %indvar.next100, %599 ], [ 0, %.lr.ph94.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph94i_748) & (memory_controller_waitrequest == 1'd0))) begin
		main_534_indvar99 = 32'd0;
	end
	/* main: %534*/
	/*   %indvar99 = phi i32 [ %indvar.next100, %599 ], [ 0, %.lr.ph94.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__599_823) & (memory_controller_waitrequest == 1'd0)) & (main_599_600 == 1'd0))) */ begin
		main_534_indvar99 = main_599_indvarnext100;
	end
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %indvar99 = phi i32 [ %indvar.next100, %599 ], [ 0, %.lr.ph94.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph94i_748) & (memory_controller_waitrequest == 1'd0))) begin
		main_534_indvar99_reg <= main_534_indvar99;
		if (start == 1'b0 && ^(main_534_indvar99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_indvar99_reg"); $finish; end
	end
	/* main: %534*/
	/*   %indvar99 = phi i32 [ %indvar.next100, %599 ], [ 0, %.lr.ph94.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__599_823) & (memory_controller_waitrequest == 1'd0)) & (main_599_600 == 1'd0))) begin
		main_534_indvar99_reg <= main_534_indvar99;
		if (start == 1'b0 && ^(main_534_indvar99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_indvar99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %position.7291.i = phi i32 [ %position.81.i, %599 ], [ %15, %.lr.ph94.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph94i_748) & (memory_controller_waitrequest == 1'd0))) begin
		main_534_position7291i = main_lrph27i_15_reg;
	end
	/* main: %534*/
	/*   %position.7291.i = phi i32 [ %position.81.i, %599 ], [ %15, %.lr.ph94.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__599_823) & (memory_controller_waitrequest == 1'd0)) & (main_599_600 == 1'd0))) */ begin
		main_534_position7291i = main_599_position81i_reg;
	end
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %position.7291.i = phi i32 [ %position.81.i, %599 ], [ %15, %.lr.ph94.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph94i_748) & (memory_controller_waitrequest == 1'd0))) begin
		main_534_position7291i_reg <= main_534_position7291i;
		if (start == 1'b0 && ^(main_534_position7291i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_position7291i_reg"); $finish; end
	end
	/* main: %534*/
	/*   %position.7291.i = phi i32 [ %position.81.i, %599 ], [ %15, %.lr.ph94.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__599_823) & (memory_controller_waitrequest == 1'd0)) & (main_599_600 == 1'd0))) begin
		main_534_position7291i_reg <= main_534_position7291i;
		if (start == 1'b0 && ^(main_534_position7291i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_position7291i_reg"); $finish; end
	end
end
always @(*) begin
	main_534_535 = main_534_535_stage0_reg;
end
always @(*) begin
	/* main: %534*/
	/*   %d8.092.i = add i32 %14, %535*/
		main_534_d8092i = (main_lrph27i_14_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %d8.092.i = add i32 %14, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_d8092i_reg <= main_534_d8092i;
		if (start == 1'b0 && ^(main_534_d8092i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_d8092i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep109 = getelementptr [100 x i32]* @y, i32 0, i32 %d8.092.i*/
		main_534_scevgep109 = (`TAG_g_y_a + (4 * main_534_d8092i_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep109 = getelementptr [100 x i32]* @y, i32 0, i32 %d8.092.i*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep109_reg <= main_534_scevgep109;
		if (start == 1'b0 && ^(main_534_scevgep109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %536 = add i32 %13, %535*/
		main_534_536 = (main_lrph27i_13_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %536 = add i32 %13, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_536_reg <= main_534_536;
		if (start == 1'b0 && ^(main_534_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep108 = getelementptr [100 x i32]* @y, i32 0, i32 %536*/
		main_534_scevgep108 = (`TAG_g_y_a + (4 * main_534_536_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep108 = getelementptr [100 x i32]* @y, i32 0, i32 %536*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep108_reg <= main_534_scevgep108;
		if (start == 1'b0 && ^(main_534_scevgep108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %537 = add i32 %3, %535*/
		main_534_537 = (main_lrph27i_3_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %537 = add i32 %3, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_537_reg <= main_534_537;
		if (start == 1'b0 && ^(main_534_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_537_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep107 = getelementptr [100 x i32]* @y, i32 0, i32 %537*/
		main_534_scevgep107 = (`TAG_g_y_a + (4 * main_534_537_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep107 = getelementptr [100 x i32]* @y, i32 0, i32 %537*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep107_reg <= main_534_scevgep107;
		if (start == 1'b0 && ^(main_534_scevgep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %538 = add i32 %4, %535*/
		main_534_538 = (main_lrph27i_4_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %538 = add i32 %4, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_538_reg <= main_534_538;
		if (start == 1'b0 && ^(main_534_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep106 = getelementptr [100 x i32]* @y, i32 0, i32 %538*/
		main_534_scevgep106 = (`TAG_g_y_a + (4 * main_534_538_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep106 = getelementptr [100 x i32]* @y, i32 0, i32 %538*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep106_reg <= main_534_scevgep106;
		if (start == 1'b0 && ^(main_534_scevgep106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %539 = add i32 %5, %535*/
		main_534_539 = (main_lrph27i_5_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %539 = add i32 %5, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_539_reg <= main_534_539;
		if (start == 1'b0 && ^(main_534_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep105 = getelementptr [100 x i32]* @y, i32 0, i32 %539*/
		main_534_scevgep105 = (`TAG_g_y_a + (4 * main_534_539_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep105 = getelementptr [100 x i32]* @y, i32 0, i32 %539*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep105_reg <= main_534_scevgep105;
		if (start == 1'b0 && ^(main_534_scevgep105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %540 = add i32 %6, %535*/
		main_534_540 = (main_lrph27i_6_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %540 = add i32 %6, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_540_reg <= main_534_540;
		if (start == 1'b0 && ^(main_534_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep104 = getelementptr [100 x i32]* @y, i32 0, i32 %540*/
		main_534_scevgep104 = (`TAG_g_y_a + (4 * main_534_540_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep104 = getelementptr [100 x i32]* @y, i32 0, i32 %540*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep104_reg <= main_534_scevgep104;
		if (start == 1'b0 && ^(main_534_scevgep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %541 = add i32 %7, %535*/
		main_534_541 = (main_lrph27i_7_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %541 = add i32 %7, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_541_reg <= main_534_541;
		if (start == 1'b0 && ^(main_534_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep103 = getelementptr [100 x i32]* @y, i32 0, i32 %541*/
		main_534_scevgep103 = (`TAG_g_y_a + (4 * main_534_541_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep103 = getelementptr [100 x i32]* @y, i32 0, i32 %541*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep103_reg <= main_534_scevgep103;
		if (start == 1'b0 && ^(main_534_scevgep103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %542 = add i32 %8, %535*/
		main_534_542 = (main_lrph27i_8_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %542 = add i32 %8, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_542_reg <= main_534_542;
		if (start == 1'b0 && ^(main_534_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep102 = getelementptr [100 x i32]* @y, i32 0, i32 %542*/
		main_534_scevgep102 = (`TAG_g_y_a + (4 * main_534_542_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep102 = getelementptr [100 x i32]* @y, i32 0, i32 %542*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep102_reg <= main_534_scevgep102;
		if (start == 1'b0 && ^(main_534_scevgep102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %543 = add i32 %9, %535*/
		main_534_543 = (main_lrph27i_9_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %543 = add i32 %9, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_543_reg <= main_534_543;
		if (start == 1'b0 && ^(main_534_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %scevgep101 = getelementptr [100 x i32]* @y, i32 0, i32 %543*/
		main_534_scevgep101 = (`TAG_g_y_a + (4 * main_534_543_reg));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %scevgep101 = getelementptr [100 x i32]* @y, i32 0, i32 %543*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_scevgep101_reg <= main_534_scevgep101;
		if (start == 1'b0 && ^(main_534_scevgep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_scevgep101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %544 = add i32 %10, %535*/
		main_534_544 = (main_lrph27i_10_reg + main_534_535);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %544 = add i32 %10, %535*/
	if ((cur_state == LEGUP_F_main_BB__534_750)) begin
		main_534_544_reg <= main_534_544;
		if (start == 1'b0 && ^(main_534_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_544_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %545 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.7291.i*/
		main_534_545 = (`TAG_g_y_a + (4 * main_534_position7291i_reg));
end
always @(*) begin
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
		main_534_546 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		main_534_546_reg <= main_534_546;
		if (start == 1'b0 && ^(main_534_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
		main_534_547 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_753)) begin
		main_534_547_reg <= main_534_547;
		if (start == 1'b0 && ^(main_534_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %548 = icmp sgt i32 %546, %547*/
		main_534_548 = ($signed(main_534_546_reg) > $signed(main_534_547));
end
always @(*) begin
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_549_550 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		main_549_550_reg <= main_549_550;
		if (start == 1'b0 && ^(main_549_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_549_550_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %552 = phi i32 [ %550, %549 ], [ %546, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__534_753) & (memory_controller_waitrequest == 1'd0)) & (main_534_548 == 1'd0))) begin
		main_551_552 = main_534_546_reg;
	end
	/* main: %551*/
	/*   %552 = phi i32 [ %550, %549 ], [ %546, %534 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__549_758) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_551_552 = main_549_550_reg;
	end
end
always @(posedge clk) begin
	/* main: %551*/
	/*   %552 = phi i32 [ %550, %549 ], [ %546, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__534_753) & (memory_controller_waitrequest == 1'd0)) & (main_534_548 == 1'd0))) begin
		main_551_552_reg <= main_551_552;
		if (start == 1'b0 && ^(main_551_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_552_reg"); $finish; end
	end
	/* main: %551*/
	/*   %552 = phi i32 [ %550, %549 ], [ %546, %534 ]*/
	if (((cur_state == LEGUP_F_main_BB__549_758) & (memory_controller_waitrequest == 1'd0))) begin
		main_551_552_reg <= main_551_552;
		if (start == 1'b0 && ^(main_551_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_552_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %position.73.i = phi i32 [ %d8.092.i, %549 ], [ %position.7291.i, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__534_753) & (memory_controller_waitrequest == 1'd0)) & (main_534_548 == 1'd0))) begin
		main_551_position73i = main_534_position7291i_reg;
	end
	/* main: %551*/
	/*   %position.73.i = phi i32 [ %d8.092.i, %549 ], [ %position.7291.i, %534 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__549_758) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_551_position73i = main_534_d8092i_reg;
	end
end
always @(posedge clk) begin
	/* main: %551*/
	/*   %position.73.i = phi i32 [ %d8.092.i, %549 ], [ %position.7291.i, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__534_753) & (memory_controller_waitrequest == 1'd0)) & (main_534_548 == 1'd0))) begin
		main_551_position73i_reg <= main_551_position73i;
		if (start == 1'b0 && ^(main_551_position73i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_position73i_reg"); $finish; end
	end
	/* main: %551*/
	/*   %position.73.i = phi i32 [ %d8.092.i, %549 ], [ %position.7291.i, %534 ]*/
	if (((cur_state == LEGUP_F_main_BB__549_758) & (memory_controller_waitrequest == 1'd0))) begin
		main_551_position73i_reg <= main_551_position73i;
		if (start == 1'b0 && ^(main_551_position73i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_position73i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
		main_551_553 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__551_761)) begin
		main_551_553_reg <= main_551_553;
		if (start == 1'b0 && ^(main_551_553) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_553_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %554 = icmp sgt i32 %552, %553*/
		main_551_554 = ($signed(main_551_552_reg) > $signed(main_551_553));
end
always @(*) begin
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_555_556 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		main_555_556_reg <= main_555_556;
		if (start == 1'b0 && ^(main_555_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_555_556_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %557*/
	/*   %558 = phi i32 [ %556, %555 ], [ %552, %551 ]*/
	if ((((cur_state == LEGUP_F_main_BB__551_761) & (memory_controller_waitrequest == 1'd0)) & (main_551_554 == 1'd0))) begin
		main_557_558 = main_551_552_reg;
	end
	/* main: %557*/
	/*   %558 = phi i32 [ %556, %555 ], [ %552, %551 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__555_766) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_557_558 = main_555_556_reg;
	end
end
always @(posedge clk) begin
	/* main: %557*/
	/*   %558 = phi i32 [ %556, %555 ], [ %552, %551 ]*/
	if ((((cur_state == LEGUP_F_main_BB__551_761) & (memory_controller_waitrequest == 1'd0)) & (main_551_554 == 1'd0))) begin
		main_557_558_reg <= main_557_558;
		if (start == 1'b0 && ^(main_557_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_557_558_reg"); $finish; end
	end
	/* main: %557*/
	/*   %558 = phi i32 [ %556, %555 ], [ %552, %551 ]*/
	if (((cur_state == LEGUP_F_main_BB__555_766) & (memory_controller_waitrequest == 1'd0))) begin
		main_557_558_reg <= main_557_558;
		if (start == 1'b0 && ^(main_557_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_557_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %557*/
	/*   %position.74.i = phi i32 [ %536, %555 ], [ %position.73.i, %551 ]*/
	if ((((cur_state == LEGUP_F_main_BB__551_761) & (memory_controller_waitrequest == 1'd0)) & (main_551_554 == 1'd0))) begin
		main_557_position74i = main_551_position73i_reg;
	end
	/* main: %557*/
	/*   %position.74.i = phi i32 [ %536, %555 ], [ %position.73.i, %551 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__555_766) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_557_position74i = main_534_536_reg;
	end
end
always @(posedge clk) begin
	/* main: %557*/
	/*   %position.74.i = phi i32 [ %536, %555 ], [ %position.73.i, %551 ]*/
	if ((((cur_state == LEGUP_F_main_BB__551_761) & (memory_controller_waitrequest == 1'd0)) & (main_551_554 == 1'd0))) begin
		main_557_position74i_reg <= main_557_position74i;
		if (start == 1'b0 && ^(main_557_position74i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_557_position74i_reg"); $finish; end
	end
	/* main: %557*/
	/*   %position.74.i = phi i32 [ %536, %555 ], [ %position.73.i, %551 ]*/
	if (((cur_state == LEGUP_F_main_BB__555_766) & (memory_controller_waitrequest == 1'd0))) begin
		main_557_position74i_reg <= main_557_position74i;
		if (start == 1'b0 && ^(main_557_position74i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_557_position74i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
		main_557_559 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__557_769)) begin
		main_557_559_reg <= main_557_559;
		if (start == 1'b0 && ^(main_557_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_557_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %557*/
	/*   %560 = icmp sgt i32 %558, %559*/
		main_557_560 = ($signed(main_557_558_reg) > $signed(main_557_559));
end
always @(*) begin
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_561_562 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		main_561_562_reg <= main_561_562;
		if (start == 1'b0 && ^(main_561_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_561_562_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %563*/
	/*   %564 = phi i32 [ %562, %561 ], [ %558, %557 ]*/
	if ((((cur_state == LEGUP_F_main_BB__557_769) & (memory_controller_waitrequest == 1'd0)) & (main_557_560 == 1'd0))) begin
		main_563_564 = main_557_558_reg;
	end
	/* main: %563*/
	/*   %564 = phi i32 [ %562, %561 ], [ %558, %557 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__561_774) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_563_564 = main_561_562_reg;
	end
end
always @(posedge clk) begin
	/* main: %563*/
	/*   %564 = phi i32 [ %562, %561 ], [ %558, %557 ]*/
	if ((((cur_state == LEGUP_F_main_BB__557_769) & (memory_controller_waitrequest == 1'd0)) & (main_557_560 == 1'd0))) begin
		main_563_564_reg <= main_563_564;
		if (start == 1'b0 && ^(main_563_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_563_564_reg"); $finish; end
	end
	/* main: %563*/
	/*   %564 = phi i32 [ %562, %561 ], [ %558, %557 ]*/
	if (((cur_state == LEGUP_F_main_BB__561_774) & (memory_controller_waitrequest == 1'd0))) begin
		main_563_564_reg <= main_563_564;
		if (start == 1'b0 && ^(main_563_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_563_564_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %563*/
	/*   %position.75.i = phi i32 [ %537, %561 ], [ %position.74.i, %557 ]*/
	if ((((cur_state == LEGUP_F_main_BB__557_769) & (memory_controller_waitrequest == 1'd0)) & (main_557_560 == 1'd0))) begin
		main_563_position75i = main_557_position74i_reg;
	end
	/* main: %563*/
	/*   %position.75.i = phi i32 [ %537, %561 ], [ %position.74.i, %557 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__561_774) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_563_position75i = main_534_537_reg;
	end
end
always @(posedge clk) begin
	/* main: %563*/
	/*   %position.75.i = phi i32 [ %537, %561 ], [ %position.74.i, %557 ]*/
	if ((((cur_state == LEGUP_F_main_BB__557_769) & (memory_controller_waitrequest == 1'd0)) & (main_557_560 == 1'd0))) begin
		main_563_position75i_reg <= main_563_position75i;
		if (start == 1'b0 && ^(main_563_position75i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_563_position75i_reg"); $finish; end
	end
	/* main: %563*/
	/*   %position.75.i = phi i32 [ %537, %561 ], [ %position.74.i, %557 ]*/
	if (((cur_state == LEGUP_F_main_BB__561_774) & (memory_controller_waitrequest == 1'd0))) begin
		main_563_position75i_reg <= main_563_position75i;
		if (start == 1'b0 && ^(main_563_position75i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_563_position75i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
		main_563_565 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__563_777)) begin
		main_563_565_reg <= main_563_565;
		if (start == 1'b0 && ^(main_563_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_563_565_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %563*/
	/*   %566 = icmp sgt i32 %564, %565*/
		main_563_566 = ($signed(main_563_564_reg) > $signed(main_563_565));
end
always @(*) begin
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_567_568 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		main_567_568_reg <= main_567_568;
		if (start == 1'b0 && ^(main_567_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_567_568_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %569*/
	/*   %570 = phi i32 [ %568, %567 ], [ %564, %563 ]*/
	if ((((cur_state == LEGUP_F_main_BB__563_777) & (memory_controller_waitrequest == 1'd0)) & (main_563_566 == 1'd0))) begin
		main_569_570 = main_563_564_reg;
	end
	/* main: %569*/
	/*   %570 = phi i32 [ %568, %567 ], [ %564, %563 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__567_782) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_569_570 = main_567_568_reg;
	end
end
always @(posedge clk) begin
	/* main: %569*/
	/*   %570 = phi i32 [ %568, %567 ], [ %564, %563 ]*/
	if ((((cur_state == LEGUP_F_main_BB__563_777) & (memory_controller_waitrequest == 1'd0)) & (main_563_566 == 1'd0))) begin
		main_569_570_reg <= main_569_570;
		if (start == 1'b0 && ^(main_569_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_569_570_reg"); $finish; end
	end
	/* main: %569*/
	/*   %570 = phi i32 [ %568, %567 ], [ %564, %563 ]*/
	if (((cur_state == LEGUP_F_main_BB__567_782) & (memory_controller_waitrequest == 1'd0))) begin
		main_569_570_reg <= main_569_570;
		if (start == 1'b0 && ^(main_569_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_569_570_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %569*/
	/*   %position.76.i = phi i32 [ %538, %567 ], [ %position.75.i, %563 ]*/
	if ((((cur_state == LEGUP_F_main_BB__563_777) & (memory_controller_waitrequest == 1'd0)) & (main_563_566 == 1'd0))) begin
		main_569_position76i = main_563_position75i_reg;
	end
	/* main: %569*/
	/*   %position.76.i = phi i32 [ %538, %567 ], [ %position.75.i, %563 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__567_782) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_569_position76i = main_534_538_reg;
	end
end
always @(posedge clk) begin
	/* main: %569*/
	/*   %position.76.i = phi i32 [ %538, %567 ], [ %position.75.i, %563 ]*/
	if ((((cur_state == LEGUP_F_main_BB__563_777) & (memory_controller_waitrequest == 1'd0)) & (main_563_566 == 1'd0))) begin
		main_569_position76i_reg <= main_569_position76i;
		if (start == 1'b0 && ^(main_569_position76i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_569_position76i_reg"); $finish; end
	end
	/* main: %569*/
	/*   %position.76.i = phi i32 [ %538, %567 ], [ %position.75.i, %563 ]*/
	if (((cur_state == LEGUP_F_main_BB__567_782) & (memory_controller_waitrequest == 1'd0))) begin
		main_569_position76i_reg <= main_569_position76i;
		if (start == 1'b0 && ^(main_569_position76i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_569_position76i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
		main_569_571 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__569_785)) begin
		main_569_571_reg <= main_569_571;
		if (start == 1'b0 && ^(main_569_571) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_569_571_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %569*/
	/*   %572 = icmp sgt i32 %570, %571*/
		main_569_572 = ($signed(main_569_570_reg) > $signed(main_569_571));
end
always @(*) begin
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_573_574 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		main_573_574_reg <= main_573_574;
		if (start == 1'b0 && ^(main_573_574) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_574_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %576 = phi i32 [ %574, %573 ], [ %570, %569 ]*/
	if ((((cur_state == LEGUP_F_main_BB__569_785) & (memory_controller_waitrequest == 1'd0)) & (main_569_572 == 1'd0))) begin
		main_575_576 = main_569_570_reg;
	end
	/* main: %575*/
	/*   %576 = phi i32 [ %574, %573 ], [ %570, %569 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__573_790) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_575_576 = main_573_574_reg;
	end
end
always @(posedge clk) begin
	/* main: %575*/
	/*   %576 = phi i32 [ %574, %573 ], [ %570, %569 ]*/
	if ((((cur_state == LEGUP_F_main_BB__569_785) & (memory_controller_waitrequest == 1'd0)) & (main_569_572 == 1'd0))) begin
		main_575_576_reg <= main_575_576;
		if (start == 1'b0 && ^(main_575_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_576_reg"); $finish; end
	end
	/* main: %575*/
	/*   %576 = phi i32 [ %574, %573 ], [ %570, %569 ]*/
	if (((cur_state == LEGUP_F_main_BB__573_790) & (memory_controller_waitrequest == 1'd0))) begin
		main_575_576_reg <= main_575_576;
		if (start == 1'b0 && ^(main_575_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_576_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %position.77.i = phi i32 [ %539, %573 ], [ %position.76.i, %569 ]*/
	if ((((cur_state == LEGUP_F_main_BB__569_785) & (memory_controller_waitrequest == 1'd0)) & (main_569_572 == 1'd0))) begin
		main_575_position77i = main_569_position76i_reg;
	end
	/* main: %575*/
	/*   %position.77.i = phi i32 [ %539, %573 ], [ %position.76.i, %569 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__573_790) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_575_position77i = main_534_539_reg;
	end
end
always @(posedge clk) begin
	/* main: %575*/
	/*   %position.77.i = phi i32 [ %539, %573 ], [ %position.76.i, %569 ]*/
	if ((((cur_state == LEGUP_F_main_BB__569_785) & (memory_controller_waitrequest == 1'd0)) & (main_569_572 == 1'd0))) begin
		main_575_position77i_reg <= main_575_position77i;
		if (start == 1'b0 && ^(main_575_position77i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_position77i_reg"); $finish; end
	end
	/* main: %575*/
	/*   %position.77.i = phi i32 [ %539, %573 ], [ %position.76.i, %569 ]*/
	if (((cur_state == LEGUP_F_main_BB__573_790) & (memory_controller_waitrequest == 1'd0))) begin
		main_575_position77i_reg <= main_575_position77i;
		if (start == 1'b0 && ^(main_575_position77i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_position77i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
		main_575_577 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__575_793)) begin
		main_575_577_reg <= main_575_577;
		if (start == 1'b0 && ^(main_575_577) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_577_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %578 = icmp sgt i32 %576, %577*/
		main_575_578 = ($signed(main_575_576_reg) > $signed(main_575_577));
end
always @(*) begin
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_579_580 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		main_579_580_reg <= main_579_580;
		if (start == 1'b0 && ^(main_579_580) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_579_580_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %582 = phi i32 [ %580, %579 ], [ %576, %575 ]*/
	if ((((cur_state == LEGUP_F_main_BB__575_793) & (memory_controller_waitrequest == 1'd0)) & (main_575_578 == 1'd0))) begin
		main_581_582 = main_575_576_reg;
	end
	/* main: %581*/
	/*   %582 = phi i32 [ %580, %579 ], [ %576, %575 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__579_798) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_581_582 = main_579_580_reg;
	end
end
always @(posedge clk) begin
	/* main: %581*/
	/*   %582 = phi i32 [ %580, %579 ], [ %576, %575 ]*/
	if ((((cur_state == LEGUP_F_main_BB__575_793) & (memory_controller_waitrequest == 1'd0)) & (main_575_578 == 1'd0))) begin
		main_581_582_reg <= main_581_582;
		if (start == 1'b0 && ^(main_581_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_582_reg"); $finish; end
	end
	/* main: %581*/
	/*   %582 = phi i32 [ %580, %579 ], [ %576, %575 ]*/
	if (((cur_state == LEGUP_F_main_BB__579_798) & (memory_controller_waitrequest == 1'd0))) begin
		main_581_582_reg <= main_581_582;
		if (start == 1'b0 && ^(main_581_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_582_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %position.78.i = phi i32 [ %540, %579 ], [ %position.77.i, %575 ]*/
	if ((((cur_state == LEGUP_F_main_BB__575_793) & (memory_controller_waitrequest == 1'd0)) & (main_575_578 == 1'd0))) begin
		main_581_position78i = main_575_position77i_reg;
	end
	/* main: %581*/
	/*   %position.78.i = phi i32 [ %540, %579 ], [ %position.77.i, %575 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__579_798) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_581_position78i = main_534_540_reg;
	end
end
always @(posedge clk) begin
	/* main: %581*/
	/*   %position.78.i = phi i32 [ %540, %579 ], [ %position.77.i, %575 ]*/
	if ((((cur_state == LEGUP_F_main_BB__575_793) & (memory_controller_waitrequest == 1'd0)) & (main_575_578 == 1'd0))) begin
		main_581_position78i_reg <= main_581_position78i;
		if (start == 1'b0 && ^(main_581_position78i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_position78i_reg"); $finish; end
	end
	/* main: %581*/
	/*   %position.78.i = phi i32 [ %540, %579 ], [ %position.77.i, %575 ]*/
	if (((cur_state == LEGUP_F_main_BB__579_798) & (memory_controller_waitrequest == 1'd0))) begin
		main_581_position78i_reg <= main_581_position78i;
		if (start == 1'b0 && ^(main_581_position78i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_position78i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
		main_581_583 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_801)) begin
		main_581_583_reg <= main_581_583;
		if (start == 1'b0 && ^(main_581_583) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_583_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %584 = icmp sgt i32 %582, %583*/
		main_581_584 = ($signed(main_581_582_reg) > $signed(main_581_583));
end
always @(*) begin
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_585_586 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		main_585_586_reg <= main_585_586;
		if (start == 1'b0 && ^(main_585_586) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_585_586_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %587*/
	/*   %588 = phi i32 [ %586, %585 ], [ %582, %581 ]*/
	if ((((cur_state == LEGUP_F_main_BB__581_801) & (memory_controller_waitrequest == 1'd0)) & (main_581_584 == 1'd0))) begin
		main_587_588 = main_581_582_reg;
	end
	/* main: %587*/
	/*   %588 = phi i32 [ %586, %585 ], [ %582, %581 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__585_806) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_587_588 = main_585_586_reg;
	end
end
always @(posedge clk) begin
	/* main: %587*/
	/*   %588 = phi i32 [ %586, %585 ], [ %582, %581 ]*/
	if ((((cur_state == LEGUP_F_main_BB__581_801) & (memory_controller_waitrequest == 1'd0)) & (main_581_584 == 1'd0))) begin
		main_587_588_reg <= main_587_588;
		if (start == 1'b0 && ^(main_587_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_587_588_reg"); $finish; end
	end
	/* main: %587*/
	/*   %588 = phi i32 [ %586, %585 ], [ %582, %581 ]*/
	if (((cur_state == LEGUP_F_main_BB__585_806) & (memory_controller_waitrequest == 1'd0))) begin
		main_587_588_reg <= main_587_588;
		if (start == 1'b0 && ^(main_587_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_587_588_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %587*/
	/*   %position.79.i = phi i32 [ %541, %585 ], [ %position.78.i, %581 ]*/
	if ((((cur_state == LEGUP_F_main_BB__581_801) & (memory_controller_waitrequest == 1'd0)) & (main_581_584 == 1'd0))) begin
		main_587_position79i = main_581_position78i_reg;
	end
	/* main: %587*/
	/*   %position.79.i = phi i32 [ %541, %585 ], [ %position.78.i, %581 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__585_806) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_587_position79i = main_534_541_reg;
	end
end
always @(posedge clk) begin
	/* main: %587*/
	/*   %position.79.i = phi i32 [ %541, %585 ], [ %position.78.i, %581 ]*/
	if ((((cur_state == LEGUP_F_main_BB__581_801) & (memory_controller_waitrequest == 1'd0)) & (main_581_584 == 1'd0))) begin
		main_587_position79i_reg <= main_587_position79i;
		if (start == 1'b0 && ^(main_587_position79i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_587_position79i_reg"); $finish; end
	end
	/* main: %587*/
	/*   %position.79.i = phi i32 [ %541, %585 ], [ %position.78.i, %581 ]*/
	if (((cur_state == LEGUP_F_main_BB__585_806) & (memory_controller_waitrequest == 1'd0))) begin
		main_587_position79i_reg <= main_587_position79i;
		if (start == 1'b0 && ^(main_587_position79i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_587_position79i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
		main_587_589 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__587_809)) begin
		main_587_589_reg <= main_587_589;
		if (start == 1'b0 && ^(main_587_589) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_587_589_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %587*/
	/*   %590 = icmp sgt i32 %588, %589*/
		main_587_590 = ($signed(main_587_588_reg) > $signed(main_587_589));
end
always @(*) begin
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_591_592 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		main_591_592_reg <= main_591_592;
		if (start == 1'b0 && ^(main_591_592) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_591_592_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %593*/
	/*   %594 = phi i32 [ %592, %591 ], [ %588, %587 ]*/
	if ((((cur_state == LEGUP_F_main_BB__587_809) & (memory_controller_waitrequest == 1'd0)) & (main_587_590 == 1'd0))) begin
		main_593_594 = main_587_588_reg;
	end
	/* main: %593*/
	/*   %594 = phi i32 [ %592, %591 ], [ %588, %587 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__591_814) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_593_594 = main_591_592_reg;
	end
end
always @(posedge clk) begin
	/* main: %593*/
	/*   %594 = phi i32 [ %592, %591 ], [ %588, %587 ]*/
	if ((((cur_state == LEGUP_F_main_BB__587_809) & (memory_controller_waitrequest == 1'd0)) & (main_587_590 == 1'd0))) begin
		main_593_594_reg <= main_593_594;
		if (start == 1'b0 && ^(main_593_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_594_reg"); $finish; end
	end
	/* main: %593*/
	/*   %594 = phi i32 [ %592, %591 ], [ %588, %587 ]*/
	if (((cur_state == LEGUP_F_main_BB__591_814) & (memory_controller_waitrequest == 1'd0))) begin
		main_593_594_reg <= main_593_594;
		if (start == 1'b0 && ^(main_593_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_594_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %593*/
	/*   %position.80.i = phi i32 [ %542, %591 ], [ %position.79.i, %587 ]*/
	if ((((cur_state == LEGUP_F_main_BB__587_809) & (memory_controller_waitrequest == 1'd0)) & (main_587_590 == 1'd0))) begin
		main_593_position80i = main_587_position79i_reg;
	end
	/* main: %593*/
	/*   %position.80.i = phi i32 [ %542, %591 ], [ %position.79.i, %587 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__591_814) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_593_position80i = main_534_542_reg;
	end
end
always @(posedge clk) begin
	/* main: %593*/
	/*   %position.80.i = phi i32 [ %542, %591 ], [ %position.79.i, %587 ]*/
	if ((((cur_state == LEGUP_F_main_BB__587_809) & (memory_controller_waitrequest == 1'd0)) & (main_587_590 == 1'd0))) begin
		main_593_position80i_reg <= main_593_position80i;
		if (start == 1'b0 && ^(main_593_position80i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_position80i_reg"); $finish; end
	end
	/* main: %593*/
	/*   %position.80.i = phi i32 [ %542, %591 ], [ %position.79.i, %587 ]*/
	if (((cur_state == LEGUP_F_main_BB__591_814) & (memory_controller_waitrequest == 1'd0))) begin
		main_593_position80i_reg <= main_593_position80i;
		if (start == 1'b0 && ^(main_593_position80i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_position80i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
		main_593_595 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__593_817)) begin
		main_593_595_reg <= main_593_595;
		if (start == 1'b0 && ^(main_593_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_595_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %593*/
	/*   %596 = icmp sgt i32 %594, %595*/
		main_593_596 = ($signed(main_593_594_reg) > $signed(main_593_595));
end
always @(*) begin
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_597_598 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		main_597_598_reg <= main_597_598;
		if (start == 1'b0 && ^(main_597_598) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_597_598_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %599*/
	/*   %position.81.i = phi i32 [ %543, %597 ], [ %position.80.i, %593 ]*/
	if ((((cur_state == LEGUP_F_main_BB__593_817) & (memory_controller_waitrequest == 1'd0)) & (main_593_596 == 1'd0))) begin
		main_599_position81i = main_593_position80i_reg;
	end
	/* main: %599*/
	/*   %position.81.i = phi i32 [ %543, %597 ], [ %position.80.i, %593 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__597_822) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_599_position81i = main_534_543_reg;
	end
end
always @(posedge clk) begin
	/* main: %599*/
	/*   %position.81.i = phi i32 [ %543, %597 ], [ %position.80.i, %593 ]*/
	if ((((cur_state == LEGUP_F_main_BB__593_817) & (memory_controller_waitrequest == 1'd0)) & (main_593_596 == 1'd0))) begin
		main_599_position81i_reg <= main_599_position81i;
		if (start == 1'b0 && ^(main_599_position81i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_599_position81i_reg"); $finish; end
	end
	/* main: %599*/
	/*   %position.81.i = phi i32 [ %543, %597 ], [ %position.80.i, %593 ]*/
	if (((cur_state == LEGUP_F_main_BB__597_822) & (memory_controller_waitrequest == 1'd0))) begin
		main_599_position81i_reg <= main_599_position81i;
		if (start == 1'b0 && ^(main_599_position81i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_599_position81i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %599*/
	/*   %600 = icmp sgt i32 %544, 91*/
		main_599_600 = ($signed(main_534_544_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %599*/
	/*   %indvar.next100 = add i32 %indvar99, 1*/
		main_599_indvarnext100 = (main_534_indvar99_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge95.i*/
	/*   %position.72.lcssa.i = phi i32 [ %15, %._crit_edge90.i ], [ %position.81.i, %._crit_edge95.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge90i_747) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge90i_533 == 1'd1))) begin
		main__crit_edge95i_position72lcssai = main_lrph27i_15_reg;
	end
	/* main: %._crit_edge95.i*/
	/*   %position.72.lcssa.i = phi i32 [ %15, %._crit_edge90.i ], [ %position.81.i, %._crit_edge95.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge95iloopexit_824) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge95i_position72lcssai = main_599_position81i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge95.i*/
	/*   %position.72.lcssa.i = phi i32 [ %15, %._crit_edge90.i ], [ %position.81.i, %._crit_edge95.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge90i_747) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge90i_533 == 1'd1))) begin
		main__crit_edge95i_position72lcssai_reg <= main__crit_edge95i_position72lcssai;
		if (start == 1'b0 && ^(main__crit_edge95i_position72lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge95i_position72lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge95.i*/
	/*   %position.72.lcssa.i = phi i32 [ %15, %._crit_edge90.i ], [ %position.81.i, %._crit_edge95.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge95iloopexit_824) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge95i_position72lcssai_reg <= main__crit_edge95i_position72lcssai;
		if (start == 1'b0 && ^(main__crit_edge95i_position72lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge95i_position72lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge95i_601 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge95.i*/
/*   %601 = srem i32 %24, 9*/
	main__crit_edge95i_601_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge95.i*/
	/*   %602 = sub nsw i32 100, %601*/
		main__crit_edge95i_602 = (32'd100 - main__crit_edge95i_601);
end
always @(*) begin
	/* main: %._crit_edge95.i*/
	/*   %603 = icmp sgt i32 %602, 99*/
		main__crit_edge95i_603 = ($signed(main__crit_edge95i_602) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph100.i*/
	/*   %604 = add i32 %601, -99*/
		main_lrph100i_604 = (main__crit_edge95i_601_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph100.i*/
	/*   %605 = sub i32 100, %601*/
		main_lrph100i_605 = (32'd100 - main__crit_edge95i_601_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph100.i*/
	/*   %605 = sub i32 100, %601*/
	if ((cur_state == LEGUP_F_main_BB_lrph100i_858)) begin
		main_lrph100i_605_reg <= main_lrph100i_605;
		if (start == 1'b0 && ^(main_lrph100i_605) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph100i_605_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph100.i*/
	/*   %606 = icmp sgt i32 %605, 99*/
		main_lrph100i_606 = ($signed(main_lrph100i_605) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph100.i*/
	/*   %smax112 = select i1 %606, i32 %605, i32 99*/
		main_lrph100i_smax112 = (main_lrph100i_606 ? main_lrph100i_605 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph100.i*/
	/*   %607 = add i32 %604, %smax112*/
		main_lrph100i_607 = (main_lrph100i_604 + main_lrph100i_smax112);
end
always @(posedge clk) begin
	/* main: %.lr.ph100.i*/
	/*   %607 = add i32 %604, %smax112*/
	if ((cur_state == LEGUP_F_main_BB_lrph100i_858)) begin
		main_lrph100i_607_reg <= main_lrph100i_607;
		if (start == 1'b0 && ^(main_lrph100i_607) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph100i_607_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %indvar110 = phi i32 [ %indvar.next111, %616 ], [ 0, %.lr.ph100.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph100i_858) & (memory_controller_waitrequest == 1'd0))) begin
		main_608_indvar110 = 32'd0;
	end
	/* main: %608*/
	/*   %indvar110 = phi i32 [ %indvar.next111, %616 ], [ 0, %.lr.ph100.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__616_868) & (memory_controller_waitrequest == 1'd0)) & (main_616_exitcond113 == 1'd0))) */ begin
		main_608_indvar110 = main_616_indvarnext111;
	end
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %indvar110 = phi i32 [ %indvar.next111, %616 ], [ 0, %.lr.ph100.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph100i_858) & (memory_controller_waitrequest == 1'd0))) begin
		main_608_indvar110_reg <= main_608_indvar110;
		if (start == 1'b0 && ^(main_608_indvar110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_indvar110_reg"); $finish; end
	end
	/* main: %608*/
	/*   %indvar110 = phi i32 [ %indvar.next111, %616 ], [ 0, %.lr.ph100.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__616_868) & (memory_controller_waitrequest == 1'd0)) & (main_616_exitcond113 == 1'd0))) begin
		main_608_indvar110_reg <= main_608_indvar110;
		if (start == 1'b0 && ^(main_608_indvar110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_indvar110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %position.8297.i = phi i32 [ %position.83.i, %616 ], [ %position.72.lcssa.i, %.lr.ph100.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph100i_858) & (memory_controller_waitrequest == 1'd0))) begin
		main_608_position8297i = main__crit_edge95i_position72lcssai_reg;
	end
	/* main: %608*/
	/*   %position.8297.i = phi i32 [ %position.83.i, %616 ], [ %position.72.lcssa.i, %.lr.ph100.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__616_868) & (memory_controller_waitrequest == 1'd0)) & (main_616_exitcond113 == 1'd0))) */ begin
		main_608_position8297i = main_616_position83i_reg;
	end
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %position.8297.i = phi i32 [ %position.83.i, %616 ], [ %position.72.lcssa.i, %.lr.ph100.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph100i_858) & (memory_controller_waitrequest == 1'd0))) begin
		main_608_position8297i_reg <= main_608_position8297i;
		if (start == 1'b0 && ^(main_608_position8297i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_position8297i_reg"); $finish; end
	end
	/* main: %608*/
	/*   %position.8297.i = phi i32 [ %position.83.i, %616 ], [ %position.72.lcssa.i, %.lr.ph100.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__616_868) & (memory_controller_waitrequest == 1'd0)) & (main_616_exitcond113 == 1'd0))) begin
		main_608_position8297i_reg <= main_608_position8297i;
		if (start == 1'b0 && ^(main_608_position8297i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_position8297i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %609 = sub i32 %indvar110, %601*/
		main_608_609 = (main_608_indvar110_reg - main__crit_edge95i_601_reg);
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %609 = sub i32 %indvar110, %601*/
	if ((cur_state == LEGUP_F_main_BB__608_859)) begin
		main_608_609_reg <= main_608_609;
		if (start == 1'b0 && ^(main_608_609) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_609_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %scevgep114 = getelementptr [100 x i32]* @y, i32 1, i32 %609*/
		main_608_scevgep114 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_608_609_reg)));
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %scevgep114 = getelementptr [100 x i32]* @y, i32 1, i32 %609*/
	if ((cur_state == LEGUP_F_main_BB__608_860)) begin
		main_608_scevgep114_reg <= main_608_scevgep114;
		if (start == 1'b0 && ^(main_608_scevgep114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_scevgep114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %610 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.8297.i*/
		main_608_610 = (`TAG_g_y_a + (4 * main_608_position8297i_reg));
end
always @(*) begin
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
		main_608_611 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_861)) begin
		main_608_611_reg <= main_608_611;
		if (start == 1'b0 && ^(main_608_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_611_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
		main_608_612 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_862)) begin
		main_608_612_reg <= main_608_612;
		if (start == 1'b0 && ^(main_608_612) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_608_612_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %608*/
	/*   %613 = icmp sgt i32 %611, %612*/
		main_608_613 = ($signed(main_608_611_reg) > $signed(main_608_612));
end
always @(*) begin
	/* main: %614*/
	/*   %d8.198.i = add i32 %605, %indvar110*/
		main_614_d8198i = (main_lrph100i_605_reg + main_608_indvar110_reg);
end
always @(posedge clk) begin
	/* main: %614*/
	/*   %d8.198.i = add i32 %605, %indvar110*/
	if ((cur_state == LEGUP_F_main_BB__614_863)) begin
		main_614_d8198i_reg <= main_614_d8198i;
		if (start == 1'b0 && ^(main_614_d8198i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_614_d8198i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
		main_614_615 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		main_614_615_reg <= main_614_615;
		if (start == 1'b0 && ^(main_614_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_614_615_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %616*/
	/*   %position.83.i = phi i32 [ %d8.198.i, %614 ], [ %position.8297.i, %608 ]*/
	if ((((cur_state == LEGUP_F_main_BB__608_862) & (memory_controller_waitrequest == 1'd0)) & (main_608_613 == 1'd0))) begin
		main_616_position83i = main_608_position8297i_reg;
	end
	/* main: %616*/
	/*   %position.83.i = phi i32 [ %d8.198.i, %614 ], [ %position.8297.i, %608 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__614_867) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_616_position83i = main_614_d8198i_reg;
	end
end
always @(posedge clk) begin
	/* main: %616*/
	/*   %position.83.i = phi i32 [ %d8.198.i, %614 ], [ %position.8297.i, %608 ]*/
	if ((((cur_state == LEGUP_F_main_BB__608_862) & (memory_controller_waitrequest == 1'd0)) & (main_608_613 == 1'd0))) begin
		main_616_position83i_reg <= main_616_position83i;
		if (start == 1'b0 && ^(main_616_position83i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_616_position83i_reg"); $finish; end
	end
	/* main: %616*/
	/*   %position.83.i = phi i32 [ %d8.198.i, %614 ], [ %position.8297.i, %608 ]*/
	if (((cur_state == LEGUP_F_main_BB__614_867) & (memory_controller_waitrequest == 1'd0))) begin
		main_616_position83i_reg <= main_616_position83i;
		if (start == 1'b0 && ^(main_616_position83i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_616_position83i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %616*/
	/*   %indvar.next111 = add i32 %indvar110, 1*/
		main_616_indvarnext111 = (main_608_indvar110_reg + 32'd1);
end
always @(*) begin
	/* main: %616*/
	/*   %exitcond113 = icmp eq i32 %indvar.next111, %607*/
		main_616_exitcond113 = (main_616_indvarnext111 == main_lrph100i_607_reg);
end
always @(*) begin
	/* main: %._crit_edge101.i*/
	/*   %617 = icmp sgt i32 %13, 91*/
		main__crit_edge101i_617 = ($signed(main_lrph27i_13_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %618*/
	/*   %indvar115 = phi i32 [ %indvar.next116, %683 ], [ 0, %.lr.ph105.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph105i_871) & (memory_controller_waitrequest == 1'd0))) begin
		main_618_indvar115 = 32'd0;
	end
	/* main: %618*/
	/*   %indvar115 = phi i32 [ %indvar.next116, %683 ], [ 0, %.lr.ph105.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__683_946) & (memory_controller_waitrequest == 1'd0)) & (main_683_684 == 1'd0))) */ begin
		main_618_indvar115 = main_683_indvarnext116;
	end
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %indvar115 = phi i32 [ %indvar.next116, %683 ], [ 0, %.lr.ph105.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph105i_871) & (memory_controller_waitrequest == 1'd0))) begin
		main_618_indvar115_reg <= main_618_indvar115;
		if (start == 1'b0 && ^(main_618_indvar115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_indvar115_reg"); $finish; end
	end
	/* main: %618*/
	/*   %indvar115 = phi i32 [ %indvar.next116, %683 ], [ 0, %.lr.ph105.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__683_946) & (memory_controller_waitrequest == 1'd0)) & (main_683_684 == 1'd0))) begin
		main_618_indvar115_reg <= main_618_indvar115;
		if (start == 1'b0 && ^(main_618_indvar115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_indvar115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %position.84102.i = phi i32 [ %position.93.i, %683 ], [ %14, %.lr.ph105.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph105i_871) & (memory_controller_waitrequest == 1'd0))) begin
		main_618_position84102i = main_lrph27i_14_reg;
	end
	/* main: %618*/
	/*   %position.84102.i = phi i32 [ %position.93.i, %683 ], [ %14, %.lr.ph105.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__683_946) & (memory_controller_waitrequest == 1'd0)) & (main_683_684 == 1'd0))) */ begin
		main_618_position84102i = main_683_position93i_reg;
	end
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %position.84102.i = phi i32 [ %position.93.i, %683 ], [ %14, %.lr.ph105.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph105i_871) & (memory_controller_waitrequest == 1'd0))) begin
		main_618_position84102i_reg <= main_618_position84102i;
		if (start == 1'b0 && ^(main_618_position84102i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_position84102i_reg"); $finish; end
	end
	/* main: %618*/
	/*   %position.84102.i = phi i32 [ %position.93.i, %683 ], [ %14, %.lr.ph105.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__683_946) & (memory_controller_waitrequest == 1'd0)) & (main_683_684 == 1'd0))) begin
		main_618_position84102i_reg <= main_618_position84102i;
		if (start == 1'b0 && ^(main_618_position84102i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_position84102i_reg"); $finish; end
	end
end
always @(*) begin
	main_618_619 = main_618_619_stage0_reg;
end
always @(*) begin
	/* main: %618*/
	/*   %d9.0103.i = add i32 %13, %619*/
		main_618_d90103i = (main_lrph27i_13_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %d9.0103.i = add i32 %13, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_d90103i_reg <= main_618_d90103i;
		if (start == 1'b0 && ^(main_618_d90103i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_d90103i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep125 = getelementptr [100 x i32]* @y, i32 0, i32 %d9.0103.i*/
		main_618_scevgep125 = (`TAG_g_y_a + (4 * main_618_d90103i_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep125 = getelementptr [100 x i32]* @y, i32 0, i32 %d9.0103.i*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep125_reg <= main_618_scevgep125;
		if (start == 1'b0 && ^(main_618_scevgep125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %620 = add i32 %3, %619*/
		main_618_620 = (main_lrph27i_3_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %620 = add i32 %3, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_620_reg <= main_618_620;
		if (start == 1'b0 && ^(main_618_620) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_620_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep124 = getelementptr [100 x i32]* @y, i32 0, i32 %620*/
		main_618_scevgep124 = (`TAG_g_y_a + (4 * main_618_620_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep124 = getelementptr [100 x i32]* @y, i32 0, i32 %620*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep124_reg <= main_618_scevgep124;
		if (start == 1'b0 && ^(main_618_scevgep124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %621 = add i32 %4, %619*/
		main_618_621 = (main_lrph27i_4_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %621 = add i32 %4, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_621_reg <= main_618_621;
		if (start == 1'b0 && ^(main_618_621) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_621_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep123 = getelementptr [100 x i32]* @y, i32 0, i32 %621*/
		main_618_scevgep123 = (`TAG_g_y_a + (4 * main_618_621_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep123 = getelementptr [100 x i32]* @y, i32 0, i32 %621*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep123_reg <= main_618_scevgep123;
		if (start == 1'b0 && ^(main_618_scevgep123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %622 = add i32 %5, %619*/
		main_618_622 = (main_lrph27i_5_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %622 = add i32 %5, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_622_reg <= main_618_622;
		if (start == 1'b0 && ^(main_618_622) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_622_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep122 = getelementptr [100 x i32]* @y, i32 0, i32 %622*/
		main_618_scevgep122 = (`TAG_g_y_a + (4 * main_618_622_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep122 = getelementptr [100 x i32]* @y, i32 0, i32 %622*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep122_reg <= main_618_scevgep122;
		if (start == 1'b0 && ^(main_618_scevgep122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %623 = add i32 %6, %619*/
		main_618_623 = (main_lrph27i_6_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %623 = add i32 %6, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_623_reg <= main_618_623;
		if (start == 1'b0 && ^(main_618_623) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_623_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep121 = getelementptr [100 x i32]* @y, i32 0, i32 %623*/
		main_618_scevgep121 = (`TAG_g_y_a + (4 * main_618_623_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep121 = getelementptr [100 x i32]* @y, i32 0, i32 %623*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep121_reg <= main_618_scevgep121;
		if (start == 1'b0 && ^(main_618_scevgep121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %624 = add i32 %7, %619*/
		main_618_624 = (main_lrph27i_7_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %624 = add i32 %7, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_624_reg <= main_618_624;
		if (start == 1'b0 && ^(main_618_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_624_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep120 = getelementptr [100 x i32]* @y, i32 0, i32 %624*/
		main_618_scevgep120 = (`TAG_g_y_a + (4 * main_618_624_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep120 = getelementptr [100 x i32]* @y, i32 0, i32 %624*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep120_reg <= main_618_scevgep120;
		if (start == 1'b0 && ^(main_618_scevgep120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %625 = add i32 %8, %619*/
		main_618_625 = (main_lrph27i_8_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %625 = add i32 %8, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_625_reg <= main_618_625;
		if (start == 1'b0 && ^(main_618_625) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_625_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep119 = getelementptr [100 x i32]* @y, i32 0, i32 %625*/
		main_618_scevgep119 = (`TAG_g_y_a + (4 * main_618_625_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep119 = getelementptr [100 x i32]* @y, i32 0, i32 %625*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep119_reg <= main_618_scevgep119;
		if (start == 1'b0 && ^(main_618_scevgep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %626 = add i32 %9, %619*/
		main_618_626 = (main_lrph27i_9_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %626 = add i32 %9, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_626_reg <= main_618_626;
		if (start == 1'b0 && ^(main_618_626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_626_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep118 = getelementptr [100 x i32]* @y, i32 0, i32 %626*/
		main_618_scevgep118 = (`TAG_g_y_a + (4 * main_618_626_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep118 = getelementptr [100 x i32]* @y, i32 0, i32 %626*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep118_reg <= main_618_scevgep118;
		if (start == 1'b0 && ^(main_618_scevgep118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %627 = add i32 %10, %619*/
		main_618_627 = (main_lrph27i_10_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %627 = add i32 %10, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_627_reg <= main_618_627;
		if (start == 1'b0 && ^(main_618_627) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_627_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %scevgep117 = getelementptr [100 x i32]* @y, i32 0, i32 %627*/
		main_618_scevgep117 = (`TAG_g_y_a + (4 * main_618_627_reg));
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %scevgep117 = getelementptr [100 x i32]* @y, i32 0, i32 %627*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_scevgep117_reg <= main_618_scevgep117;
		if (start == 1'b0 && ^(main_618_scevgep117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_scevgep117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %628 = add i32 %11, %619*/
		main_618_628 = (main_lrph27i_11_reg + main_618_619);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %628 = add i32 %11, %619*/
	if ((cur_state == LEGUP_F_main_BB__618_873)) begin
		main_618_628_reg <= main_618_628;
		if (start == 1'b0 && ^(main_618_628) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_628_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %629 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.84102.i*/
		main_618_629 = (`TAG_g_y_a + (4 * main_618_position84102i_reg));
end
always @(*) begin
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
		main_618_630 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		main_618_630_reg <= main_618_630;
		if (start == 1'b0 && ^(main_618_630) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_630_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
		main_618_631 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_876)) begin
		main_618_631_reg <= main_618_631;
		if (start == 1'b0 && ^(main_618_631) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_618_631_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %618*/
	/*   %632 = icmp sgt i32 %630, %631*/
		main_618_632 = ($signed(main_618_630_reg) > $signed(main_618_631));
end
always @(*) begin
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_633_634 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		main_633_634_reg <= main_633_634;
		if (start == 1'b0 && ^(main_633_634) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_633_634_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %635*/
	/*   %636 = phi i32 [ %634, %633 ], [ %630, %618 ]*/
	if ((((cur_state == LEGUP_F_main_BB__618_876) & (memory_controller_waitrequest == 1'd0)) & (main_618_632 == 1'd0))) begin
		main_635_636 = main_618_630_reg;
	end
	/* main: %635*/
	/*   %636 = phi i32 [ %634, %633 ], [ %630, %618 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__633_881) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_635_636 = main_633_634_reg;
	end
end
always @(posedge clk) begin
	/* main: %635*/
	/*   %636 = phi i32 [ %634, %633 ], [ %630, %618 ]*/
	if ((((cur_state == LEGUP_F_main_BB__618_876) & (memory_controller_waitrequest == 1'd0)) & (main_618_632 == 1'd0))) begin
		main_635_636_reg <= main_635_636;
		if (start == 1'b0 && ^(main_635_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_635_636_reg"); $finish; end
	end
	/* main: %635*/
	/*   %636 = phi i32 [ %634, %633 ], [ %630, %618 ]*/
	if (((cur_state == LEGUP_F_main_BB__633_881) & (memory_controller_waitrequest == 1'd0))) begin
		main_635_636_reg <= main_635_636;
		if (start == 1'b0 && ^(main_635_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_635_636_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %635*/
	/*   %position.85.i = phi i32 [ %d9.0103.i, %633 ], [ %position.84102.i, %618 ]*/
	if ((((cur_state == LEGUP_F_main_BB__618_876) & (memory_controller_waitrequest == 1'd0)) & (main_618_632 == 1'd0))) begin
		main_635_position85i = main_618_position84102i_reg;
	end
	/* main: %635*/
	/*   %position.85.i = phi i32 [ %d9.0103.i, %633 ], [ %position.84102.i, %618 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__633_881) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_635_position85i = main_618_d90103i_reg;
	end
end
always @(posedge clk) begin
	/* main: %635*/
	/*   %position.85.i = phi i32 [ %d9.0103.i, %633 ], [ %position.84102.i, %618 ]*/
	if ((((cur_state == LEGUP_F_main_BB__618_876) & (memory_controller_waitrequest == 1'd0)) & (main_618_632 == 1'd0))) begin
		main_635_position85i_reg <= main_635_position85i;
		if (start == 1'b0 && ^(main_635_position85i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_635_position85i_reg"); $finish; end
	end
	/* main: %635*/
	/*   %position.85.i = phi i32 [ %d9.0103.i, %633 ], [ %position.84102.i, %618 ]*/
	if (((cur_state == LEGUP_F_main_BB__633_881) & (memory_controller_waitrequest == 1'd0))) begin
		main_635_position85i_reg <= main_635_position85i;
		if (start == 1'b0 && ^(main_635_position85i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_635_position85i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
		main_635_637 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__635_884)) begin
		main_635_637_reg <= main_635_637;
		if (start == 1'b0 && ^(main_635_637) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_635_637_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %635*/
	/*   %638 = icmp sgt i32 %636, %637*/
		main_635_638 = ($signed(main_635_636_reg) > $signed(main_635_637));
end
always @(*) begin
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_639_640 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		main_639_640_reg <= main_639_640;
		if (start == 1'b0 && ^(main_639_640) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_639_640_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %641*/
	/*   %642 = phi i32 [ %640, %639 ], [ %636, %635 ]*/
	if ((((cur_state == LEGUP_F_main_BB__635_884) & (memory_controller_waitrequest == 1'd0)) & (main_635_638 == 1'd0))) begin
		main_641_642 = main_635_636_reg;
	end
	/* main: %641*/
	/*   %642 = phi i32 [ %640, %639 ], [ %636, %635 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__639_889) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_641_642 = main_639_640_reg;
	end
end
always @(posedge clk) begin
	/* main: %641*/
	/*   %642 = phi i32 [ %640, %639 ], [ %636, %635 ]*/
	if ((((cur_state == LEGUP_F_main_BB__635_884) & (memory_controller_waitrequest == 1'd0)) & (main_635_638 == 1'd0))) begin
		main_641_642_reg <= main_641_642;
		if (start == 1'b0 && ^(main_641_642) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_642_reg"); $finish; end
	end
	/* main: %641*/
	/*   %642 = phi i32 [ %640, %639 ], [ %636, %635 ]*/
	if (((cur_state == LEGUP_F_main_BB__639_889) & (memory_controller_waitrequest == 1'd0))) begin
		main_641_642_reg <= main_641_642;
		if (start == 1'b0 && ^(main_641_642) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_642_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %641*/
	/*   %position.86.i = phi i32 [ %620, %639 ], [ %position.85.i, %635 ]*/
	if ((((cur_state == LEGUP_F_main_BB__635_884) & (memory_controller_waitrequest == 1'd0)) & (main_635_638 == 1'd0))) begin
		main_641_position86i = main_635_position85i_reg;
	end
	/* main: %641*/
	/*   %position.86.i = phi i32 [ %620, %639 ], [ %position.85.i, %635 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__639_889) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_641_position86i = main_618_620_reg;
	end
end
always @(posedge clk) begin
	/* main: %641*/
	/*   %position.86.i = phi i32 [ %620, %639 ], [ %position.85.i, %635 ]*/
	if ((((cur_state == LEGUP_F_main_BB__635_884) & (memory_controller_waitrequest == 1'd0)) & (main_635_638 == 1'd0))) begin
		main_641_position86i_reg <= main_641_position86i;
		if (start == 1'b0 && ^(main_641_position86i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_position86i_reg"); $finish; end
	end
	/* main: %641*/
	/*   %position.86.i = phi i32 [ %620, %639 ], [ %position.85.i, %635 ]*/
	if (((cur_state == LEGUP_F_main_BB__639_889) & (memory_controller_waitrequest == 1'd0))) begin
		main_641_position86i_reg <= main_641_position86i;
		if (start == 1'b0 && ^(main_641_position86i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_position86i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
		main_641_643 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__641_892)) begin
		main_641_643_reg <= main_641_643;
		if (start == 1'b0 && ^(main_641_643) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_643_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %641*/
	/*   %644 = icmp sgt i32 %642, %643*/
		main_641_644 = ($signed(main_641_642_reg) > $signed(main_641_643));
end
always @(*) begin
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_645_646 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		main_645_646_reg <= main_645_646;
		if (start == 1'b0 && ^(main_645_646) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_645_646_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %647*/
	/*   %648 = phi i32 [ %646, %645 ], [ %642, %641 ]*/
	if ((((cur_state == LEGUP_F_main_BB__641_892) & (memory_controller_waitrequest == 1'd0)) & (main_641_644 == 1'd0))) begin
		main_647_648 = main_641_642_reg;
	end
	/* main: %647*/
	/*   %648 = phi i32 [ %646, %645 ], [ %642, %641 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__645_897) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_647_648 = main_645_646_reg;
	end
end
always @(posedge clk) begin
	/* main: %647*/
	/*   %648 = phi i32 [ %646, %645 ], [ %642, %641 ]*/
	if ((((cur_state == LEGUP_F_main_BB__641_892) & (memory_controller_waitrequest == 1'd0)) & (main_641_644 == 1'd0))) begin
		main_647_648_reg <= main_647_648;
		if (start == 1'b0 && ^(main_647_648) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_647_648_reg"); $finish; end
	end
	/* main: %647*/
	/*   %648 = phi i32 [ %646, %645 ], [ %642, %641 ]*/
	if (((cur_state == LEGUP_F_main_BB__645_897) & (memory_controller_waitrequest == 1'd0))) begin
		main_647_648_reg <= main_647_648;
		if (start == 1'b0 && ^(main_647_648) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_647_648_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %647*/
	/*   %position.87.i = phi i32 [ %621, %645 ], [ %position.86.i, %641 ]*/
	if ((((cur_state == LEGUP_F_main_BB__641_892) & (memory_controller_waitrequest == 1'd0)) & (main_641_644 == 1'd0))) begin
		main_647_position87i = main_641_position86i_reg;
	end
	/* main: %647*/
	/*   %position.87.i = phi i32 [ %621, %645 ], [ %position.86.i, %641 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__645_897) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_647_position87i = main_618_621_reg;
	end
end
always @(posedge clk) begin
	/* main: %647*/
	/*   %position.87.i = phi i32 [ %621, %645 ], [ %position.86.i, %641 ]*/
	if ((((cur_state == LEGUP_F_main_BB__641_892) & (memory_controller_waitrequest == 1'd0)) & (main_641_644 == 1'd0))) begin
		main_647_position87i_reg <= main_647_position87i;
		if (start == 1'b0 && ^(main_647_position87i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_647_position87i_reg"); $finish; end
	end
	/* main: %647*/
	/*   %position.87.i = phi i32 [ %621, %645 ], [ %position.86.i, %641 ]*/
	if (((cur_state == LEGUP_F_main_BB__645_897) & (memory_controller_waitrequest == 1'd0))) begin
		main_647_position87i_reg <= main_647_position87i;
		if (start == 1'b0 && ^(main_647_position87i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_647_position87i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
		main_647_649 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__647_900)) begin
		main_647_649_reg <= main_647_649;
		if (start == 1'b0 && ^(main_647_649) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_647_649_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %647*/
	/*   %650 = icmp sgt i32 %648, %649*/
		main_647_650 = ($signed(main_647_648_reg) > $signed(main_647_649));
end
always @(*) begin
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_651_652 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		main_651_652_reg <= main_651_652;
		if (start == 1'b0 && ^(main_651_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_651_652_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %653*/
	/*   %654 = phi i32 [ %652, %651 ], [ %648, %647 ]*/
	if ((((cur_state == LEGUP_F_main_BB__647_900) & (memory_controller_waitrequest == 1'd0)) & (main_647_650 == 1'd0))) begin
		main_653_654 = main_647_648_reg;
	end
	/* main: %653*/
	/*   %654 = phi i32 [ %652, %651 ], [ %648, %647 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__651_905) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_653_654 = main_651_652_reg;
	end
end
always @(posedge clk) begin
	/* main: %653*/
	/*   %654 = phi i32 [ %652, %651 ], [ %648, %647 ]*/
	if ((((cur_state == LEGUP_F_main_BB__647_900) & (memory_controller_waitrequest == 1'd0)) & (main_647_650 == 1'd0))) begin
		main_653_654_reg <= main_653_654;
		if (start == 1'b0 && ^(main_653_654) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_653_654_reg"); $finish; end
	end
	/* main: %653*/
	/*   %654 = phi i32 [ %652, %651 ], [ %648, %647 ]*/
	if (((cur_state == LEGUP_F_main_BB__651_905) & (memory_controller_waitrequest == 1'd0))) begin
		main_653_654_reg <= main_653_654;
		if (start == 1'b0 && ^(main_653_654) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_653_654_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %653*/
	/*   %position.88.i = phi i32 [ %622, %651 ], [ %position.87.i, %647 ]*/
	if ((((cur_state == LEGUP_F_main_BB__647_900) & (memory_controller_waitrequest == 1'd0)) & (main_647_650 == 1'd0))) begin
		main_653_position88i = main_647_position87i_reg;
	end
	/* main: %653*/
	/*   %position.88.i = phi i32 [ %622, %651 ], [ %position.87.i, %647 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__651_905) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_653_position88i = main_618_622_reg;
	end
end
always @(posedge clk) begin
	/* main: %653*/
	/*   %position.88.i = phi i32 [ %622, %651 ], [ %position.87.i, %647 ]*/
	if ((((cur_state == LEGUP_F_main_BB__647_900) & (memory_controller_waitrequest == 1'd0)) & (main_647_650 == 1'd0))) begin
		main_653_position88i_reg <= main_653_position88i;
		if (start == 1'b0 && ^(main_653_position88i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_653_position88i_reg"); $finish; end
	end
	/* main: %653*/
	/*   %position.88.i = phi i32 [ %622, %651 ], [ %position.87.i, %647 ]*/
	if (((cur_state == LEGUP_F_main_BB__651_905) & (memory_controller_waitrequest == 1'd0))) begin
		main_653_position88i_reg <= main_653_position88i;
		if (start == 1'b0 && ^(main_653_position88i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_653_position88i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
		main_653_655 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__653_908)) begin
		main_653_655_reg <= main_653_655;
		if (start == 1'b0 && ^(main_653_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_653_655_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %653*/
	/*   %656 = icmp sgt i32 %654, %655*/
		main_653_656 = ($signed(main_653_654_reg) > $signed(main_653_655));
end
always @(*) begin
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_657_658 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		main_657_658_reg <= main_657_658;
		if (start == 1'b0 && ^(main_657_658) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_657_658_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %659*/
	/*   %660 = phi i32 [ %658, %657 ], [ %654, %653 ]*/
	if ((((cur_state == LEGUP_F_main_BB__653_908) & (memory_controller_waitrequest == 1'd0)) & (main_653_656 == 1'd0))) begin
		main_659_660 = main_653_654_reg;
	end
	/* main: %659*/
	/*   %660 = phi i32 [ %658, %657 ], [ %654, %653 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__657_913) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_659_660 = main_657_658_reg;
	end
end
always @(posedge clk) begin
	/* main: %659*/
	/*   %660 = phi i32 [ %658, %657 ], [ %654, %653 ]*/
	if ((((cur_state == LEGUP_F_main_BB__653_908) & (memory_controller_waitrequest == 1'd0)) & (main_653_656 == 1'd0))) begin
		main_659_660_reg <= main_659_660;
		if (start == 1'b0 && ^(main_659_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_659_660_reg"); $finish; end
	end
	/* main: %659*/
	/*   %660 = phi i32 [ %658, %657 ], [ %654, %653 ]*/
	if (((cur_state == LEGUP_F_main_BB__657_913) & (memory_controller_waitrequest == 1'd0))) begin
		main_659_660_reg <= main_659_660;
		if (start == 1'b0 && ^(main_659_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_659_660_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %659*/
	/*   %position.89.i = phi i32 [ %623, %657 ], [ %position.88.i, %653 ]*/
	if ((((cur_state == LEGUP_F_main_BB__653_908) & (memory_controller_waitrequest == 1'd0)) & (main_653_656 == 1'd0))) begin
		main_659_position89i = main_653_position88i_reg;
	end
	/* main: %659*/
	/*   %position.89.i = phi i32 [ %623, %657 ], [ %position.88.i, %653 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__657_913) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_659_position89i = main_618_623_reg;
	end
end
always @(posedge clk) begin
	/* main: %659*/
	/*   %position.89.i = phi i32 [ %623, %657 ], [ %position.88.i, %653 ]*/
	if ((((cur_state == LEGUP_F_main_BB__653_908) & (memory_controller_waitrequest == 1'd0)) & (main_653_656 == 1'd0))) begin
		main_659_position89i_reg <= main_659_position89i;
		if (start == 1'b0 && ^(main_659_position89i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_659_position89i_reg"); $finish; end
	end
	/* main: %659*/
	/*   %position.89.i = phi i32 [ %623, %657 ], [ %position.88.i, %653 ]*/
	if (((cur_state == LEGUP_F_main_BB__657_913) & (memory_controller_waitrequest == 1'd0))) begin
		main_659_position89i_reg <= main_659_position89i;
		if (start == 1'b0 && ^(main_659_position89i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_659_position89i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
		main_659_661 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__659_916)) begin
		main_659_661_reg <= main_659_661;
		if (start == 1'b0 && ^(main_659_661) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_659_661_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %659*/
	/*   %662 = icmp sgt i32 %660, %661*/
		main_659_662 = ($signed(main_659_660_reg) > $signed(main_659_661));
end
always @(*) begin
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_663_664 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		main_663_664_reg <= main_663_664;
		if (start == 1'b0 && ^(main_663_664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_663_664_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %665*/
	/*   %666 = phi i32 [ %664, %663 ], [ %660, %659 ]*/
	if ((((cur_state == LEGUP_F_main_BB__659_916) & (memory_controller_waitrequest == 1'd0)) & (main_659_662 == 1'd0))) begin
		main_665_666 = main_659_660_reg;
	end
	/* main: %665*/
	/*   %666 = phi i32 [ %664, %663 ], [ %660, %659 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__663_921) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_665_666 = main_663_664_reg;
	end
end
always @(posedge clk) begin
	/* main: %665*/
	/*   %666 = phi i32 [ %664, %663 ], [ %660, %659 ]*/
	if ((((cur_state == LEGUP_F_main_BB__659_916) & (memory_controller_waitrequest == 1'd0)) & (main_659_662 == 1'd0))) begin
		main_665_666_reg <= main_665_666;
		if (start == 1'b0 && ^(main_665_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_665_666_reg"); $finish; end
	end
	/* main: %665*/
	/*   %666 = phi i32 [ %664, %663 ], [ %660, %659 ]*/
	if (((cur_state == LEGUP_F_main_BB__663_921) & (memory_controller_waitrequest == 1'd0))) begin
		main_665_666_reg <= main_665_666;
		if (start == 1'b0 && ^(main_665_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_665_666_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %665*/
	/*   %position.90.i = phi i32 [ %624, %663 ], [ %position.89.i, %659 ]*/
	if ((((cur_state == LEGUP_F_main_BB__659_916) & (memory_controller_waitrequest == 1'd0)) & (main_659_662 == 1'd0))) begin
		main_665_position90i = main_659_position89i_reg;
	end
	/* main: %665*/
	/*   %position.90.i = phi i32 [ %624, %663 ], [ %position.89.i, %659 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__663_921) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_665_position90i = main_618_624_reg;
	end
end
always @(posedge clk) begin
	/* main: %665*/
	/*   %position.90.i = phi i32 [ %624, %663 ], [ %position.89.i, %659 ]*/
	if ((((cur_state == LEGUP_F_main_BB__659_916) & (memory_controller_waitrequest == 1'd0)) & (main_659_662 == 1'd0))) begin
		main_665_position90i_reg <= main_665_position90i;
		if (start == 1'b0 && ^(main_665_position90i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_665_position90i_reg"); $finish; end
	end
	/* main: %665*/
	/*   %position.90.i = phi i32 [ %624, %663 ], [ %position.89.i, %659 ]*/
	if (((cur_state == LEGUP_F_main_BB__663_921) & (memory_controller_waitrequest == 1'd0))) begin
		main_665_position90i_reg <= main_665_position90i;
		if (start == 1'b0 && ^(main_665_position90i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_665_position90i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
		main_665_667 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__665_924)) begin
		main_665_667_reg <= main_665_667;
		if (start == 1'b0 && ^(main_665_667) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_665_667_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %665*/
	/*   %668 = icmp sgt i32 %666, %667*/
		main_665_668 = ($signed(main_665_666_reg) > $signed(main_665_667));
end
always @(*) begin
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_669_670 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		main_669_670_reg <= main_669_670;
		if (start == 1'b0 && ^(main_669_670) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_669_670_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %671*/
	/*   %672 = phi i32 [ %670, %669 ], [ %666, %665 ]*/
	if ((((cur_state == LEGUP_F_main_BB__665_924) & (memory_controller_waitrequest == 1'd0)) & (main_665_668 == 1'd0))) begin
		main_671_672 = main_665_666_reg;
	end
	/* main: %671*/
	/*   %672 = phi i32 [ %670, %669 ], [ %666, %665 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__669_929) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_671_672 = main_669_670_reg;
	end
end
always @(posedge clk) begin
	/* main: %671*/
	/*   %672 = phi i32 [ %670, %669 ], [ %666, %665 ]*/
	if ((((cur_state == LEGUP_F_main_BB__665_924) & (memory_controller_waitrequest == 1'd0)) & (main_665_668 == 1'd0))) begin
		main_671_672_reg <= main_671_672;
		if (start == 1'b0 && ^(main_671_672) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_671_672_reg"); $finish; end
	end
	/* main: %671*/
	/*   %672 = phi i32 [ %670, %669 ], [ %666, %665 ]*/
	if (((cur_state == LEGUP_F_main_BB__669_929) & (memory_controller_waitrequest == 1'd0))) begin
		main_671_672_reg <= main_671_672;
		if (start == 1'b0 && ^(main_671_672) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_671_672_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %671*/
	/*   %position.91.i = phi i32 [ %625, %669 ], [ %position.90.i, %665 ]*/
	if ((((cur_state == LEGUP_F_main_BB__665_924) & (memory_controller_waitrequest == 1'd0)) & (main_665_668 == 1'd0))) begin
		main_671_position91i = main_665_position90i_reg;
	end
	/* main: %671*/
	/*   %position.91.i = phi i32 [ %625, %669 ], [ %position.90.i, %665 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__669_929) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_671_position91i = main_618_625_reg;
	end
end
always @(posedge clk) begin
	/* main: %671*/
	/*   %position.91.i = phi i32 [ %625, %669 ], [ %position.90.i, %665 ]*/
	if ((((cur_state == LEGUP_F_main_BB__665_924) & (memory_controller_waitrequest == 1'd0)) & (main_665_668 == 1'd0))) begin
		main_671_position91i_reg <= main_671_position91i;
		if (start == 1'b0 && ^(main_671_position91i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_671_position91i_reg"); $finish; end
	end
	/* main: %671*/
	/*   %position.91.i = phi i32 [ %625, %669 ], [ %position.90.i, %665 ]*/
	if (((cur_state == LEGUP_F_main_BB__669_929) & (memory_controller_waitrequest == 1'd0))) begin
		main_671_position91i_reg <= main_671_position91i;
		if (start == 1'b0 && ^(main_671_position91i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_671_position91i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
		main_671_673 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__671_932)) begin
		main_671_673_reg <= main_671_673;
		if (start == 1'b0 && ^(main_671_673) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_671_673_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %671*/
	/*   %674 = icmp sgt i32 %672, %673*/
		main_671_674 = ($signed(main_671_672_reg) > $signed(main_671_673));
end
always @(*) begin
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_675_676 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		main_675_676_reg <= main_675_676;
		if (start == 1'b0 && ^(main_675_676) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_675_676_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %677*/
	/*   %678 = phi i32 [ %676, %675 ], [ %672, %671 ]*/
	if ((((cur_state == LEGUP_F_main_BB__671_932) & (memory_controller_waitrequest == 1'd0)) & (main_671_674 == 1'd0))) begin
		main_677_678 = main_671_672_reg;
	end
	/* main: %677*/
	/*   %678 = phi i32 [ %676, %675 ], [ %672, %671 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__675_937) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_677_678 = main_675_676_reg;
	end
end
always @(posedge clk) begin
	/* main: %677*/
	/*   %678 = phi i32 [ %676, %675 ], [ %672, %671 ]*/
	if ((((cur_state == LEGUP_F_main_BB__671_932) & (memory_controller_waitrequest == 1'd0)) & (main_671_674 == 1'd0))) begin
		main_677_678_reg <= main_677_678;
		if (start == 1'b0 && ^(main_677_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_678_reg"); $finish; end
	end
	/* main: %677*/
	/*   %678 = phi i32 [ %676, %675 ], [ %672, %671 ]*/
	if (((cur_state == LEGUP_F_main_BB__675_937) & (memory_controller_waitrequest == 1'd0))) begin
		main_677_678_reg <= main_677_678;
		if (start == 1'b0 && ^(main_677_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_678_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %677*/
	/*   %position.92.i = phi i32 [ %626, %675 ], [ %position.91.i, %671 ]*/
	if ((((cur_state == LEGUP_F_main_BB__671_932) & (memory_controller_waitrequest == 1'd0)) & (main_671_674 == 1'd0))) begin
		main_677_position92i = main_671_position91i_reg;
	end
	/* main: %677*/
	/*   %position.92.i = phi i32 [ %626, %675 ], [ %position.91.i, %671 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__675_937) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_677_position92i = main_618_626_reg;
	end
end
always @(posedge clk) begin
	/* main: %677*/
	/*   %position.92.i = phi i32 [ %626, %675 ], [ %position.91.i, %671 ]*/
	if ((((cur_state == LEGUP_F_main_BB__671_932) & (memory_controller_waitrequest == 1'd0)) & (main_671_674 == 1'd0))) begin
		main_677_position92i_reg <= main_677_position92i;
		if (start == 1'b0 && ^(main_677_position92i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_position92i_reg"); $finish; end
	end
	/* main: %677*/
	/*   %position.92.i = phi i32 [ %626, %675 ], [ %position.91.i, %671 ]*/
	if (((cur_state == LEGUP_F_main_BB__675_937) & (memory_controller_waitrequest == 1'd0))) begin
		main_677_position92i_reg <= main_677_position92i;
		if (start == 1'b0 && ^(main_677_position92i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_position92i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
		main_677_679 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__677_940)) begin
		main_677_679_reg <= main_677_679;
		if (start == 1'b0 && ^(main_677_679) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_679_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %677*/
	/*   %680 = icmp sgt i32 %678, %679*/
		main_677_680 = ($signed(main_677_678_reg) > $signed(main_677_679));
end
always @(*) begin
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_681_682 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		main_681_682_reg <= main_681_682;
		if (start == 1'b0 && ^(main_681_682) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_681_682_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %683*/
	/*   %position.93.i = phi i32 [ %627, %681 ], [ %position.92.i, %677 ]*/
	if ((((cur_state == LEGUP_F_main_BB__677_940) & (memory_controller_waitrequest == 1'd0)) & (main_677_680 == 1'd0))) begin
		main_683_position93i = main_677_position92i_reg;
	end
	/* main: %683*/
	/*   %position.93.i = phi i32 [ %627, %681 ], [ %position.92.i, %677 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__681_945) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_683_position93i = main_618_627_reg;
	end
end
always @(posedge clk) begin
	/* main: %683*/
	/*   %position.93.i = phi i32 [ %627, %681 ], [ %position.92.i, %677 ]*/
	if ((((cur_state == LEGUP_F_main_BB__677_940) & (memory_controller_waitrequest == 1'd0)) & (main_677_680 == 1'd0))) begin
		main_683_position93i_reg <= main_683_position93i;
		if (start == 1'b0 && ^(main_683_position93i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_683_position93i_reg"); $finish; end
	end
	/* main: %683*/
	/*   %position.93.i = phi i32 [ %627, %681 ], [ %position.92.i, %677 ]*/
	if (((cur_state == LEGUP_F_main_BB__681_945) & (memory_controller_waitrequest == 1'd0))) begin
		main_683_position93i_reg <= main_683_position93i;
		if (start == 1'b0 && ^(main_683_position93i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_683_position93i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %683*/
	/*   %684 = icmp sgt i32 %628, 91*/
		main_683_684 = ($signed(main_618_628_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %683*/
	/*   %indvar.next116 = add i32 %indvar115, 1*/
		main_683_indvarnext116 = (main_618_indvar115_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge106.i*/
	/*   %position.84.lcssa.i = phi i32 [ %14, %._crit_edge101.i ], [ %position.93.i, %._crit_edge106.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge101i_870) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge101i_617 == 1'd1))) begin
		main__crit_edge106i_position84lcssai = main_lrph27i_14_reg;
	end
	/* main: %._crit_edge106.i*/
	/*   %position.84.lcssa.i = phi i32 [ %14, %._crit_edge101.i ], [ %position.93.i, %._crit_edge106.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge106iloopexit_947) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge106i_position84lcssai = main_683_position93i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge106.i*/
	/*   %position.84.lcssa.i = phi i32 [ %14, %._crit_edge101.i ], [ %position.93.i, %._crit_edge106.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge101i_870) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge101i_617 == 1'd1))) begin
		main__crit_edge106i_position84lcssai_reg <= main__crit_edge106i_position84lcssai;
		if (start == 1'b0 && ^(main__crit_edge106i_position84lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge106i_position84lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge106.i*/
	/*   %position.84.lcssa.i = phi i32 [ %14, %._crit_edge101.i ], [ %position.93.i, %._crit_edge106.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge106iloopexit_947) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge106i_position84lcssai_reg <= main__crit_edge106i_position84lcssai;
		if (start == 1'b0 && ^(main__crit_edge106i_position84lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge106i_position84lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge106i_685 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge106.i*/
/*   %685 = srem i32 %23, 9*/
	main__crit_edge106i_685_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge106.i*/
	/*   %686 = sub nsw i32 100, %685*/
		main__crit_edge106i_686 = (32'd100 - main__crit_edge106i_685);
end
always @(*) begin
	/* main: %._crit_edge106.i*/
	/*   %687 = icmp sgt i32 %686, 99*/
		main__crit_edge106i_687 = ($signed(main__crit_edge106i_686) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph111.i*/
	/*   %688 = add i32 %685, -99*/
		main_lrph111i_688 = (main__crit_edge106i_685_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph111.i*/
	/*   %689 = sub i32 100, %685*/
		main_lrph111i_689 = (32'd100 - main__crit_edge106i_685_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph111.i*/
	/*   %689 = sub i32 100, %685*/
	if ((cur_state == LEGUP_F_main_BB_lrph111i_981)) begin
		main_lrph111i_689_reg <= main_lrph111i_689;
		if (start == 1'b0 && ^(main_lrph111i_689) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph111i_689_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph111.i*/
	/*   %690 = icmp sgt i32 %689, 99*/
		main_lrph111i_690 = ($signed(main_lrph111i_689) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph111.i*/
	/*   %smax128 = select i1 %690, i32 %689, i32 99*/
		main_lrph111i_smax128 = (main_lrph111i_690 ? main_lrph111i_689 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph111.i*/
	/*   %691 = add i32 %688, %smax128*/
		main_lrph111i_691 = (main_lrph111i_688 + main_lrph111i_smax128);
end
always @(posedge clk) begin
	/* main: %.lr.ph111.i*/
	/*   %691 = add i32 %688, %smax128*/
	if ((cur_state == LEGUP_F_main_BB_lrph111i_981)) begin
		main_lrph111i_691_reg <= main_lrph111i_691;
		if (start == 1'b0 && ^(main_lrph111i_691) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph111i_691_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %indvar126 = phi i32 [ %indvar.next127, %700 ], [ 0, %.lr.ph111.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph111i_981) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_indvar126 = 32'd0;
	end
	/* main: %692*/
	/*   %indvar126 = phi i32 [ %indvar.next127, %700 ], [ 0, %.lr.ph111.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__700_991) & (memory_controller_waitrequest == 1'd0)) & (main_700_exitcond129 == 1'd0))) */ begin
		main_692_indvar126 = main_700_indvarnext127;
	end
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %indvar126 = phi i32 [ %indvar.next127, %700 ], [ 0, %.lr.ph111.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph111i_981) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_indvar126_reg <= main_692_indvar126;
		if (start == 1'b0 && ^(main_692_indvar126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_indvar126_reg"); $finish; end
	end
	/* main: %692*/
	/*   %indvar126 = phi i32 [ %indvar.next127, %700 ], [ 0, %.lr.ph111.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__700_991) & (memory_controller_waitrequest == 1'd0)) & (main_700_exitcond129 == 1'd0))) begin
		main_692_indvar126_reg <= main_692_indvar126;
		if (start == 1'b0 && ^(main_692_indvar126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_indvar126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %position.94108.i = phi i32 [ %position.95.i, %700 ], [ %position.84.lcssa.i, %.lr.ph111.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph111i_981) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_position94108i = main__crit_edge106i_position84lcssai_reg;
	end
	/* main: %692*/
	/*   %position.94108.i = phi i32 [ %position.95.i, %700 ], [ %position.84.lcssa.i, %.lr.ph111.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__700_991) & (memory_controller_waitrequest == 1'd0)) & (main_700_exitcond129 == 1'd0))) */ begin
		main_692_position94108i = main_700_position95i_reg;
	end
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %position.94108.i = phi i32 [ %position.95.i, %700 ], [ %position.84.lcssa.i, %.lr.ph111.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph111i_981) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_position94108i_reg <= main_692_position94108i;
		if (start == 1'b0 && ^(main_692_position94108i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_position94108i_reg"); $finish; end
	end
	/* main: %692*/
	/*   %position.94108.i = phi i32 [ %position.95.i, %700 ], [ %position.84.lcssa.i, %.lr.ph111.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__700_991) & (memory_controller_waitrequest == 1'd0)) & (main_700_exitcond129 == 1'd0))) begin
		main_692_position94108i_reg <= main_692_position94108i;
		if (start == 1'b0 && ^(main_692_position94108i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_position94108i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %693 = sub i32 %indvar126, %685*/
		main_692_693 = (main_692_indvar126_reg - main__crit_edge106i_685_reg);
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %693 = sub i32 %indvar126, %685*/
	if ((cur_state == LEGUP_F_main_BB__692_982)) begin
		main_692_693_reg <= main_692_693;
		if (start == 1'b0 && ^(main_692_693) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_693_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %scevgep130 = getelementptr [100 x i32]* @y, i32 1, i32 %693*/
		main_692_scevgep130 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_692_693_reg)));
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %scevgep130 = getelementptr [100 x i32]* @y, i32 1, i32 %693*/
	if ((cur_state == LEGUP_F_main_BB__692_983)) begin
		main_692_scevgep130_reg <= main_692_scevgep130;
		if (start == 1'b0 && ^(main_692_scevgep130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_scevgep130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %694 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.94108.i*/
		main_692_694 = (`TAG_g_y_a + (4 * main_692_position94108i_reg));
end
always @(*) begin
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
		main_692_695 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_984)) begin
		main_692_695_reg <= main_692_695;
		if (start == 1'b0 && ^(main_692_695) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_695_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
		main_692_696 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_985)) begin
		main_692_696_reg <= main_692_696;
		if (start == 1'b0 && ^(main_692_696) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_696_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %697 = icmp sgt i32 %695, %696*/
		main_692_697 = ($signed(main_692_695_reg) > $signed(main_692_696));
end
always @(*) begin
	/* main: %698*/
	/*   %d9.1109.i = add i32 %689, %indvar126*/
		main_698_d91109i = (main_lrph111i_689_reg + main_692_indvar126_reg);
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %d9.1109.i = add i32 %689, %indvar126*/
	if ((cur_state == LEGUP_F_main_BB__698_986)) begin
		main_698_d91109i_reg <= main_698_d91109i;
		if (start == 1'b0 && ^(main_698_d91109i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_d91109i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
		main_698_699 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		main_698_699_reg <= main_698_699;
		if (start == 1'b0 && ^(main_698_699) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_699_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %700*/
	/*   %position.95.i = phi i32 [ %d9.1109.i, %698 ], [ %position.94108.i, %692 ]*/
	if ((((cur_state == LEGUP_F_main_BB__692_985) & (memory_controller_waitrequest == 1'd0)) & (main_692_697 == 1'd0))) begin
		main_700_position95i = main_692_position94108i_reg;
	end
	/* main: %700*/
	/*   %position.95.i = phi i32 [ %d9.1109.i, %698 ], [ %position.94108.i, %692 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__698_990) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_700_position95i = main_698_d91109i_reg;
	end
end
always @(posedge clk) begin
	/* main: %700*/
	/*   %position.95.i = phi i32 [ %d9.1109.i, %698 ], [ %position.94108.i, %692 ]*/
	if ((((cur_state == LEGUP_F_main_BB__692_985) & (memory_controller_waitrequest == 1'd0)) & (main_692_697 == 1'd0))) begin
		main_700_position95i_reg <= main_700_position95i;
		if (start == 1'b0 && ^(main_700_position95i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_700_position95i_reg"); $finish; end
	end
	/* main: %700*/
	/*   %position.95.i = phi i32 [ %d9.1109.i, %698 ], [ %position.94108.i, %692 ]*/
	if (((cur_state == LEGUP_F_main_BB__698_990) & (memory_controller_waitrequest == 1'd0))) begin
		main_700_position95i_reg <= main_700_position95i;
		if (start == 1'b0 && ^(main_700_position95i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_700_position95i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %700*/
	/*   %indvar.next127 = add i32 %indvar126, 1*/
		main_700_indvarnext127 = (main_692_indvar126_reg + 32'd1);
end
always @(*) begin
	/* main: %700*/
	/*   %exitcond129 = icmp eq i32 %indvar.next127, %691*/
		main_700_exitcond129 = (main_700_indvarnext127 == main_lrph111i_691_reg);
end
always @(*) begin
	/* main: %._crit_edge112.i*/
	/*   %701 = icmp sgt i32 %3, 91*/
		main__crit_edge112i_701 = ($signed(main_lrph27i_3_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %702*/
	/*   %indvar131 = phi i32 [ %indvar.next132, %767 ], [ 0, %.lr.ph116.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph116i_994) & (memory_controller_waitrequest == 1'd0))) begin
		main_702_indvar131 = 32'd0;
	end
	/* main: %702*/
	/*   %indvar131 = phi i32 [ %indvar.next132, %767 ], [ 0, %.lr.ph116.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__767_1069) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd0))) */ begin
		main_702_indvar131 = main_767_indvarnext132;
	end
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %indvar131 = phi i32 [ %indvar.next132, %767 ], [ 0, %.lr.ph116.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph116i_994) & (memory_controller_waitrequest == 1'd0))) begin
		main_702_indvar131_reg <= main_702_indvar131;
		if (start == 1'b0 && ^(main_702_indvar131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_indvar131_reg"); $finish; end
	end
	/* main: %702*/
	/*   %indvar131 = phi i32 [ %indvar.next132, %767 ], [ 0, %.lr.ph116.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__767_1069) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd0))) begin
		main_702_indvar131_reg <= main_702_indvar131;
		if (start == 1'b0 && ^(main_702_indvar131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_indvar131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %position.96113.i = phi i32 [ %position.105.i, %767 ], [ %13, %.lr.ph116.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph116i_994) & (memory_controller_waitrequest == 1'd0))) begin
		main_702_position96113i = main_lrph27i_13_reg;
	end
	/* main: %702*/
	/*   %position.96113.i = phi i32 [ %position.105.i, %767 ], [ %13, %.lr.ph116.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__767_1069) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd0))) */ begin
		main_702_position96113i = main_767_position105i_reg;
	end
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %position.96113.i = phi i32 [ %position.105.i, %767 ], [ %13, %.lr.ph116.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph116i_994) & (memory_controller_waitrequest == 1'd0))) begin
		main_702_position96113i_reg <= main_702_position96113i;
		if (start == 1'b0 && ^(main_702_position96113i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_position96113i_reg"); $finish; end
	end
	/* main: %702*/
	/*   %position.96113.i = phi i32 [ %position.105.i, %767 ], [ %13, %.lr.ph116.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__767_1069) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd0))) begin
		main_702_position96113i_reg <= main_702_position96113i;
		if (start == 1'b0 && ^(main_702_position96113i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_position96113i_reg"); $finish; end
	end
end
always @(*) begin
	main_702_703 = main_702_703_stage0_reg;
end
always @(*) begin
	/* main: %702*/
	/*   %d10.0114.i = add i32 %3, %703*/
		main_702_d100114i = (main_lrph27i_3_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %d10.0114.i = add i32 %3, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_d100114i_reg <= main_702_d100114i;
		if (start == 1'b0 && ^(main_702_d100114i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_d100114i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep141 = getelementptr [100 x i32]* @y, i32 0, i32 %d10.0114.i*/
		main_702_scevgep141 = (`TAG_g_y_a + (4 * main_702_d100114i_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep141 = getelementptr [100 x i32]* @y, i32 0, i32 %d10.0114.i*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep141_reg <= main_702_scevgep141;
		if (start == 1'b0 && ^(main_702_scevgep141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %704 = add i32 %4, %703*/
		main_702_704 = (main_lrph27i_4_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %704 = add i32 %4, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_704_reg <= main_702_704;
		if (start == 1'b0 && ^(main_702_704) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_704_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep140 = getelementptr [100 x i32]* @y, i32 0, i32 %704*/
		main_702_scevgep140 = (`TAG_g_y_a + (4 * main_702_704_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep140 = getelementptr [100 x i32]* @y, i32 0, i32 %704*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep140_reg <= main_702_scevgep140;
		if (start == 1'b0 && ^(main_702_scevgep140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %705 = add i32 %5, %703*/
		main_702_705 = (main_lrph27i_5_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %705 = add i32 %5, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_705_reg <= main_702_705;
		if (start == 1'b0 && ^(main_702_705) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_705_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep139 = getelementptr [100 x i32]* @y, i32 0, i32 %705*/
		main_702_scevgep139 = (`TAG_g_y_a + (4 * main_702_705_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep139 = getelementptr [100 x i32]* @y, i32 0, i32 %705*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep139_reg <= main_702_scevgep139;
		if (start == 1'b0 && ^(main_702_scevgep139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %706 = add i32 %6, %703*/
		main_702_706 = (main_lrph27i_6_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %706 = add i32 %6, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_706_reg <= main_702_706;
		if (start == 1'b0 && ^(main_702_706) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_706_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep138 = getelementptr [100 x i32]* @y, i32 0, i32 %706*/
		main_702_scevgep138 = (`TAG_g_y_a + (4 * main_702_706_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep138 = getelementptr [100 x i32]* @y, i32 0, i32 %706*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep138_reg <= main_702_scevgep138;
		if (start == 1'b0 && ^(main_702_scevgep138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %707 = add i32 %7, %703*/
		main_702_707 = (main_lrph27i_7_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %707 = add i32 %7, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_707_reg <= main_702_707;
		if (start == 1'b0 && ^(main_702_707) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_707_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep137 = getelementptr [100 x i32]* @y, i32 0, i32 %707*/
		main_702_scevgep137 = (`TAG_g_y_a + (4 * main_702_707_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep137 = getelementptr [100 x i32]* @y, i32 0, i32 %707*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep137_reg <= main_702_scevgep137;
		if (start == 1'b0 && ^(main_702_scevgep137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %708 = add i32 %8, %703*/
		main_702_708 = (main_lrph27i_8_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %708 = add i32 %8, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_708_reg <= main_702_708;
		if (start == 1'b0 && ^(main_702_708) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_708_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep136 = getelementptr [100 x i32]* @y, i32 0, i32 %708*/
		main_702_scevgep136 = (`TAG_g_y_a + (4 * main_702_708_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep136 = getelementptr [100 x i32]* @y, i32 0, i32 %708*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep136_reg <= main_702_scevgep136;
		if (start == 1'b0 && ^(main_702_scevgep136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %709 = add i32 %9, %703*/
		main_702_709 = (main_lrph27i_9_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %709 = add i32 %9, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_709_reg <= main_702_709;
		if (start == 1'b0 && ^(main_702_709) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_709_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep135 = getelementptr [100 x i32]* @y, i32 0, i32 %709*/
		main_702_scevgep135 = (`TAG_g_y_a + (4 * main_702_709_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep135 = getelementptr [100 x i32]* @y, i32 0, i32 %709*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep135_reg <= main_702_scevgep135;
		if (start == 1'b0 && ^(main_702_scevgep135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %710 = add i32 %10, %703*/
		main_702_710 = (main_lrph27i_10_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %710 = add i32 %10, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_710_reg <= main_702_710;
		if (start == 1'b0 && ^(main_702_710) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_710_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep134 = getelementptr [100 x i32]* @y, i32 0, i32 %710*/
		main_702_scevgep134 = (`TAG_g_y_a + (4 * main_702_710_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep134 = getelementptr [100 x i32]* @y, i32 0, i32 %710*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep134_reg <= main_702_scevgep134;
		if (start == 1'b0 && ^(main_702_scevgep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %711 = add i32 %11, %703*/
		main_702_711 = (main_lrph27i_11_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %711 = add i32 %11, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_711_reg <= main_702_711;
		if (start == 1'b0 && ^(main_702_711) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_711_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %scevgep133 = getelementptr [100 x i32]* @y, i32 0, i32 %711*/
		main_702_scevgep133 = (`TAG_g_y_a + (4 * main_702_711_reg));
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %scevgep133 = getelementptr [100 x i32]* @y, i32 0, i32 %711*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_scevgep133_reg <= main_702_scevgep133;
		if (start == 1'b0 && ^(main_702_scevgep133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_scevgep133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %712 = add i32 %12, %703*/
		main_702_712 = (main_lrph27i_12_reg + main_702_703);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %712 = add i32 %12, %703*/
	if ((cur_state == LEGUP_F_main_BB__702_996)) begin
		main_702_712_reg <= main_702_712;
		if (start == 1'b0 && ^(main_702_712) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_712_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %713 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.96113.i*/
		main_702_713 = (`TAG_g_y_a + (4 * main_702_position96113i_reg));
end
always @(*) begin
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
		main_702_714 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		main_702_714_reg <= main_702_714;
		if (start == 1'b0 && ^(main_702_714) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_714_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
		main_702_715 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_999)) begin
		main_702_715_reg <= main_702_715;
		if (start == 1'b0 && ^(main_702_715) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_702_715_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %702*/
	/*   %716 = icmp sgt i32 %714, %715*/
		main_702_716 = ($signed(main_702_714_reg) > $signed(main_702_715));
end
always @(*) begin
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_717_718 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		main_717_718_reg <= main_717_718;
		if (start == 1'b0 && ^(main_717_718) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_717_718_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %719*/
	/*   %720 = phi i32 [ %718, %717 ], [ %714, %702 ]*/
	if ((((cur_state == LEGUP_F_main_BB__702_999) & (memory_controller_waitrequest == 1'd0)) & (main_702_716 == 1'd0))) begin
		main_719_720 = main_702_714_reg;
	end
	/* main: %719*/
	/*   %720 = phi i32 [ %718, %717 ], [ %714, %702 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__717_1004) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_719_720 = main_717_718_reg;
	end
end
always @(posedge clk) begin
	/* main: %719*/
	/*   %720 = phi i32 [ %718, %717 ], [ %714, %702 ]*/
	if ((((cur_state == LEGUP_F_main_BB__702_999) & (memory_controller_waitrequest == 1'd0)) & (main_702_716 == 1'd0))) begin
		main_719_720_reg <= main_719_720;
		if (start == 1'b0 && ^(main_719_720) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_719_720_reg"); $finish; end
	end
	/* main: %719*/
	/*   %720 = phi i32 [ %718, %717 ], [ %714, %702 ]*/
	if (((cur_state == LEGUP_F_main_BB__717_1004) & (memory_controller_waitrequest == 1'd0))) begin
		main_719_720_reg <= main_719_720;
		if (start == 1'b0 && ^(main_719_720) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_719_720_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %719*/
	/*   %position.97.i = phi i32 [ %d10.0114.i, %717 ], [ %position.96113.i, %702 ]*/
	if ((((cur_state == LEGUP_F_main_BB__702_999) & (memory_controller_waitrequest == 1'd0)) & (main_702_716 == 1'd0))) begin
		main_719_position97i = main_702_position96113i_reg;
	end
	/* main: %719*/
	/*   %position.97.i = phi i32 [ %d10.0114.i, %717 ], [ %position.96113.i, %702 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__717_1004) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_719_position97i = main_702_d100114i_reg;
	end
end
always @(posedge clk) begin
	/* main: %719*/
	/*   %position.97.i = phi i32 [ %d10.0114.i, %717 ], [ %position.96113.i, %702 ]*/
	if ((((cur_state == LEGUP_F_main_BB__702_999) & (memory_controller_waitrequest == 1'd0)) & (main_702_716 == 1'd0))) begin
		main_719_position97i_reg <= main_719_position97i;
		if (start == 1'b0 && ^(main_719_position97i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_719_position97i_reg"); $finish; end
	end
	/* main: %719*/
	/*   %position.97.i = phi i32 [ %d10.0114.i, %717 ], [ %position.96113.i, %702 ]*/
	if (((cur_state == LEGUP_F_main_BB__717_1004) & (memory_controller_waitrequest == 1'd0))) begin
		main_719_position97i_reg <= main_719_position97i;
		if (start == 1'b0 && ^(main_719_position97i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_719_position97i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
		main_719_721 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__719_1007)) begin
		main_719_721_reg <= main_719_721;
		if (start == 1'b0 && ^(main_719_721) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_719_721_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %719*/
	/*   %722 = icmp sgt i32 %720, %721*/
		main_719_722 = ($signed(main_719_720_reg) > $signed(main_719_721));
end
always @(*) begin
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_723_724 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		main_723_724_reg <= main_723_724;
		if (start == 1'b0 && ^(main_723_724) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_723_724_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %725*/
	/*   %726 = phi i32 [ %724, %723 ], [ %720, %719 ]*/
	if ((((cur_state == LEGUP_F_main_BB__719_1007) & (memory_controller_waitrequest == 1'd0)) & (main_719_722 == 1'd0))) begin
		main_725_726 = main_719_720_reg;
	end
	/* main: %725*/
	/*   %726 = phi i32 [ %724, %723 ], [ %720, %719 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__723_1012) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_725_726 = main_723_724_reg;
	end
end
always @(posedge clk) begin
	/* main: %725*/
	/*   %726 = phi i32 [ %724, %723 ], [ %720, %719 ]*/
	if ((((cur_state == LEGUP_F_main_BB__719_1007) & (memory_controller_waitrequest == 1'd0)) & (main_719_722 == 1'd0))) begin
		main_725_726_reg <= main_725_726;
		if (start == 1'b0 && ^(main_725_726) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_725_726_reg"); $finish; end
	end
	/* main: %725*/
	/*   %726 = phi i32 [ %724, %723 ], [ %720, %719 ]*/
	if (((cur_state == LEGUP_F_main_BB__723_1012) & (memory_controller_waitrequest == 1'd0))) begin
		main_725_726_reg <= main_725_726;
		if (start == 1'b0 && ^(main_725_726) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_725_726_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %725*/
	/*   %position.98.i = phi i32 [ %704, %723 ], [ %position.97.i, %719 ]*/
	if ((((cur_state == LEGUP_F_main_BB__719_1007) & (memory_controller_waitrequest == 1'd0)) & (main_719_722 == 1'd0))) begin
		main_725_position98i = main_719_position97i_reg;
	end
	/* main: %725*/
	/*   %position.98.i = phi i32 [ %704, %723 ], [ %position.97.i, %719 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__723_1012) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_725_position98i = main_702_704_reg;
	end
end
always @(posedge clk) begin
	/* main: %725*/
	/*   %position.98.i = phi i32 [ %704, %723 ], [ %position.97.i, %719 ]*/
	if ((((cur_state == LEGUP_F_main_BB__719_1007) & (memory_controller_waitrequest == 1'd0)) & (main_719_722 == 1'd0))) begin
		main_725_position98i_reg <= main_725_position98i;
		if (start == 1'b0 && ^(main_725_position98i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_725_position98i_reg"); $finish; end
	end
	/* main: %725*/
	/*   %position.98.i = phi i32 [ %704, %723 ], [ %position.97.i, %719 ]*/
	if (((cur_state == LEGUP_F_main_BB__723_1012) & (memory_controller_waitrequest == 1'd0))) begin
		main_725_position98i_reg <= main_725_position98i;
		if (start == 1'b0 && ^(main_725_position98i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_725_position98i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
		main_725_727 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__725_1015)) begin
		main_725_727_reg <= main_725_727;
		if (start == 1'b0 && ^(main_725_727) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_725_727_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %725*/
	/*   %728 = icmp sgt i32 %726, %727*/
		main_725_728 = ($signed(main_725_726_reg) > $signed(main_725_727));
end
always @(*) begin
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_729_730 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		main_729_730_reg <= main_729_730;
		if (start == 1'b0 && ^(main_729_730) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_729_730_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %731*/
	/*   %732 = phi i32 [ %730, %729 ], [ %726, %725 ]*/
	if ((((cur_state == LEGUP_F_main_BB__725_1015) & (memory_controller_waitrequest == 1'd0)) & (main_725_728 == 1'd0))) begin
		main_731_732 = main_725_726_reg;
	end
	/* main: %731*/
	/*   %732 = phi i32 [ %730, %729 ], [ %726, %725 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__729_1020) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_731_732 = main_729_730_reg;
	end
end
always @(posedge clk) begin
	/* main: %731*/
	/*   %732 = phi i32 [ %730, %729 ], [ %726, %725 ]*/
	if ((((cur_state == LEGUP_F_main_BB__725_1015) & (memory_controller_waitrequest == 1'd0)) & (main_725_728 == 1'd0))) begin
		main_731_732_reg <= main_731_732;
		if (start == 1'b0 && ^(main_731_732) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_731_732_reg"); $finish; end
	end
	/* main: %731*/
	/*   %732 = phi i32 [ %730, %729 ], [ %726, %725 ]*/
	if (((cur_state == LEGUP_F_main_BB__729_1020) & (memory_controller_waitrequest == 1'd0))) begin
		main_731_732_reg <= main_731_732;
		if (start == 1'b0 && ^(main_731_732) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_731_732_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %731*/
	/*   %position.99.i = phi i32 [ %705, %729 ], [ %position.98.i, %725 ]*/
	if ((((cur_state == LEGUP_F_main_BB__725_1015) & (memory_controller_waitrequest == 1'd0)) & (main_725_728 == 1'd0))) begin
		main_731_position99i = main_725_position98i_reg;
	end
	/* main: %731*/
	/*   %position.99.i = phi i32 [ %705, %729 ], [ %position.98.i, %725 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__729_1020) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_731_position99i = main_702_705_reg;
	end
end
always @(posedge clk) begin
	/* main: %731*/
	/*   %position.99.i = phi i32 [ %705, %729 ], [ %position.98.i, %725 ]*/
	if ((((cur_state == LEGUP_F_main_BB__725_1015) & (memory_controller_waitrequest == 1'd0)) & (main_725_728 == 1'd0))) begin
		main_731_position99i_reg <= main_731_position99i;
		if (start == 1'b0 && ^(main_731_position99i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_731_position99i_reg"); $finish; end
	end
	/* main: %731*/
	/*   %position.99.i = phi i32 [ %705, %729 ], [ %position.98.i, %725 ]*/
	if (((cur_state == LEGUP_F_main_BB__729_1020) & (memory_controller_waitrequest == 1'd0))) begin
		main_731_position99i_reg <= main_731_position99i;
		if (start == 1'b0 && ^(main_731_position99i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_731_position99i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
		main_731_733 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__731_1023)) begin
		main_731_733_reg <= main_731_733;
		if (start == 1'b0 && ^(main_731_733) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_731_733_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %731*/
	/*   %734 = icmp sgt i32 %732, %733*/
		main_731_734 = ($signed(main_731_732_reg) > $signed(main_731_733));
end
always @(*) begin
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_735_736 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		main_735_736_reg <= main_735_736;
		if (start == 1'b0 && ^(main_735_736) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_735_736_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %737*/
	/*   %738 = phi i32 [ %736, %735 ], [ %732, %731 ]*/
	if ((((cur_state == LEGUP_F_main_BB__731_1023) & (memory_controller_waitrequest == 1'd0)) & (main_731_734 == 1'd0))) begin
		main_737_738 = main_731_732_reg;
	end
	/* main: %737*/
	/*   %738 = phi i32 [ %736, %735 ], [ %732, %731 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__735_1028) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_737_738 = main_735_736_reg;
	end
end
always @(posedge clk) begin
	/* main: %737*/
	/*   %738 = phi i32 [ %736, %735 ], [ %732, %731 ]*/
	if ((((cur_state == LEGUP_F_main_BB__731_1023) & (memory_controller_waitrequest == 1'd0)) & (main_731_734 == 1'd0))) begin
		main_737_738_reg <= main_737_738;
		if (start == 1'b0 && ^(main_737_738) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_737_738_reg"); $finish; end
	end
	/* main: %737*/
	/*   %738 = phi i32 [ %736, %735 ], [ %732, %731 ]*/
	if (((cur_state == LEGUP_F_main_BB__735_1028) & (memory_controller_waitrequest == 1'd0))) begin
		main_737_738_reg <= main_737_738;
		if (start == 1'b0 && ^(main_737_738) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_737_738_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %737*/
	/*   %position.100.i = phi i32 [ %706, %735 ], [ %position.99.i, %731 ]*/
	if ((((cur_state == LEGUP_F_main_BB__731_1023) & (memory_controller_waitrequest == 1'd0)) & (main_731_734 == 1'd0))) begin
		main_737_position100i = main_731_position99i_reg;
	end
	/* main: %737*/
	/*   %position.100.i = phi i32 [ %706, %735 ], [ %position.99.i, %731 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__735_1028) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_737_position100i = main_702_706_reg;
	end
end
always @(posedge clk) begin
	/* main: %737*/
	/*   %position.100.i = phi i32 [ %706, %735 ], [ %position.99.i, %731 ]*/
	if ((((cur_state == LEGUP_F_main_BB__731_1023) & (memory_controller_waitrequest == 1'd0)) & (main_731_734 == 1'd0))) begin
		main_737_position100i_reg <= main_737_position100i;
		if (start == 1'b0 && ^(main_737_position100i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_737_position100i_reg"); $finish; end
	end
	/* main: %737*/
	/*   %position.100.i = phi i32 [ %706, %735 ], [ %position.99.i, %731 ]*/
	if (((cur_state == LEGUP_F_main_BB__735_1028) & (memory_controller_waitrequest == 1'd0))) begin
		main_737_position100i_reg <= main_737_position100i;
		if (start == 1'b0 && ^(main_737_position100i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_737_position100i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
		main_737_739 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_1031)) begin
		main_737_739_reg <= main_737_739;
		if (start == 1'b0 && ^(main_737_739) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_737_739_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %737*/
	/*   %740 = icmp sgt i32 %738, %739*/
		main_737_740 = ($signed(main_737_738_reg) > $signed(main_737_739));
end
always @(*) begin
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_741_742 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		main_741_742_reg <= main_741_742;
		if (start == 1'b0 && ^(main_741_742) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_742_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %743*/
	/*   %744 = phi i32 [ %742, %741 ], [ %738, %737 ]*/
	if ((((cur_state == LEGUP_F_main_BB__737_1031) & (memory_controller_waitrequest == 1'd0)) & (main_737_740 == 1'd0))) begin
		main_743_744 = main_737_738_reg;
	end
	/* main: %743*/
	/*   %744 = phi i32 [ %742, %741 ], [ %738, %737 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__741_1036) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_743_744 = main_741_742_reg;
	end
end
always @(posedge clk) begin
	/* main: %743*/
	/*   %744 = phi i32 [ %742, %741 ], [ %738, %737 ]*/
	if ((((cur_state == LEGUP_F_main_BB__737_1031) & (memory_controller_waitrequest == 1'd0)) & (main_737_740 == 1'd0))) begin
		main_743_744_reg <= main_743_744;
		if (start == 1'b0 && ^(main_743_744) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_743_744_reg"); $finish; end
	end
	/* main: %743*/
	/*   %744 = phi i32 [ %742, %741 ], [ %738, %737 ]*/
	if (((cur_state == LEGUP_F_main_BB__741_1036) & (memory_controller_waitrequest == 1'd0))) begin
		main_743_744_reg <= main_743_744;
		if (start == 1'b0 && ^(main_743_744) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_743_744_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %743*/
	/*   %position.101.i = phi i32 [ %707, %741 ], [ %position.100.i, %737 ]*/
	if ((((cur_state == LEGUP_F_main_BB__737_1031) & (memory_controller_waitrequest == 1'd0)) & (main_737_740 == 1'd0))) begin
		main_743_position101i = main_737_position100i_reg;
	end
	/* main: %743*/
	/*   %position.101.i = phi i32 [ %707, %741 ], [ %position.100.i, %737 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__741_1036) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_743_position101i = main_702_707_reg;
	end
end
always @(posedge clk) begin
	/* main: %743*/
	/*   %position.101.i = phi i32 [ %707, %741 ], [ %position.100.i, %737 ]*/
	if ((((cur_state == LEGUP_F_main_BB__737_1031) & (memory_controller_waitrequest == 1'd0)) & (main_737_740 == 1'd0))) begin
		main_743_position101i_reg <= main_743_position101i;
		if (start == 1'b0 && ^(main_743_position101i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_743_position101i_reg"); $finish; end
	end
	/* main: %743*/
	/*   %position.101.i = phi i32 [ %707, %741 ], [ %position.100.i, %737 ]*/
	if (((cur_state == LEGUP_F_main_BB__741_1036) & (memory_controller_waitrequest == 1'd0))) begin
		main_743_position101i_reg <= main_743_position101i;
		if (start == 1'b0 && ^(main_743_position101i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_743_position101i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
		main_743_745 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__743_1039)) begin
		main_743_745_reg <= main_743_745;
		if (start == 1'b0 && ^(main_743_745) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_743_745_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %743*/
	/*   %746 = icmp sgt i32 %744, %745*/
		main_743_746 = ($signed(main_743_744_reg) > $signed(main_743_745));
end
always @(*) begin
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_747_748 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		main_747_748_reg <= main_747_748;
		if (start == 1'b0 && ^(main_747_748) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_747_748_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %749*/
	/*   %750 = phi i32 [ %748, %747 ], [ %744, %743 ]*/
	if ((((cur_state == LEGUP_F_main_BB__743_1039) & (memory_controller_waitrequest == 1'd0)) & (main_743_746 == 1'd0))) begin
		main_749_750 = main_743_744_reg;
	end
	/* main: %749*/
	/*   %750 = phi i32 [ %748, %747 ], [ %744, %743 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__747_1044) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_749_750 = main_747_748_reg;
	end
end
always @(posedge clk) begin
	/* main: %749*/
	/*   %750 = phi i32 [ %748, %747 ], [ %744, %743 ]*/
	if ((((cur_state == LEGUP_F_main_BB__743_1039) & (memory_controller_waitrequest == 1'd0)) & (main_743_746 == 1'd0))) begin
		main_749_750_reg <= main_749_750;
		if (start == 1'b0 && ^(main_749_750) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_749_750_reg"); $finish; end
	end
	/* main: %749*/
	/*   %750 = phi i32 [ %748, %747 ], [ %744, %743 ]*/
	if (((cur_state == LEGUP_F_main_BB__747_1044) & (memory_controller_waitrequest == 1'd0))) begin
		main_749_750_reg <= main_749_750;
		if (start == 1'b0 && ^(main_749_750) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_749_750_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %749*/
	/*   %position.102.i = phi i32 [ %708, %747 ], [ %position.101.i, %743 ]*/
	if ((((cur_state == LEGUP_F_main_BB__743_1039) & (memory_controller_waitrequest == 1'd0)) & (main_743_746 == 1'd0))) begin
		main_749_position102i = main_743_position101i_reg;
	end
	/* main: %749*/
	/*   %position.102.i = phi i32 [ %708, %747 ], [ %position.101.i, %743 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__747_1044) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_749_position102i = main_702_708_reg;
	end
end
always @(posedge clk) begin
	/* main: %749*/
	/*   %position.102.i = phi i32 [ %708, %747 ], [ %position.101.i, %743 ]*/
	if ((((cur_state == LEGUP_F_main_BB__743_1039) & (memory_controller_waitrequest == 1'd0)) & (main_743_746 == 1'd0))) begin
		main_749_position102i_reg <= main_749_position102i;
		if (start == 1'b0 && ^(main_749_position102i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_749_position102i_reg"); $finish; end
	end
	/* main: %749*/
	/*   %position.102.i = phi i32 [ %708, %747 ], [ %position.101.i, %743 ]*/
	if (((cur_state == LEGUP_F_main_BB__747_1044) & (memory_controller_waitrequest == 1'd0))) begin
		main_749_position102i_reg <= main_749_position102i;
		if (start == 1'b0 && ^(main_749_position102i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_749_position102i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
		main_749_751 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__749_1047)) begin
		main_749_751_reg <= main_749_751;
		if (start == 1'b0 && ^(main_749_751) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_749_751_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %749*/
	/*   %752 = icmp sgt i32 %750, %751*/
		main_749_752 = ($signed(main_749_750_reg) > $signed(main_749_751));
end
always @(*) begin
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_753_754 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		main_753_754_reg <= main_753_754;
		if (start == 1'b0 && ^(main_753_754) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_753_754_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %755*/
	/*   %756 = phi i32 [ %754, %753 ], [ %750, %749 ]*/
	if ((((cur_state == LEGUP_F_main_BB__749_1047) & (memory_controller_waitrequest == 1'd0)) & (main_749_752 == 1'd0))) begin
		main_755_756 = main_749_750_reg;
	end
	/* main: %755*/
	/*   %756 = phi i32 [ %754, %753 ], [ %750, %749 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__753_1052) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_755_756 = main_753_754_reg;
	end
end
always @(posedge clk) begin
	/* main: %755*/
	/*   %756 = phi i32 [ %754, %753 ], [ %750, %749 ]*/
	if ((((cur_state == LEGUP_F_main_BB__749_1047) & (memory_controller_waitrequest == 1'd0)) & (main_749_752 == 1'd0))) begin
		main_755_756_reg <= main_755_756;
		if (start == 1'b0 && ^(main_755_756) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_755_756_reg"); $finish; end
	end
	/* main: %755*/
	/*   %756 = phi i32 [ %754, %753 ], [ %750, %749 ]*/
	if (((cur_state == LEGUP_F_main_BB__753_1052) & (memory_controller_waitrequest == 1'd0))) begin
		main_755_756_reg <= main_755_756;
		if (start == 1'b0 && ^(main_755_756) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_755_756_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %755*/
	/*   %position.103.i = phi i32 [ %709, %753 ], [ %position.102.i, %749 ]*/
	if ((((cur_state == LEGUP_F_main_BB__749_1047) & (memory_controller_waitrequest == 1'd0)) & (main_749_752 == 1'd0))) begin
		main_755_position103i = main_749_position102i_reg;
	end
	/* main: %755*/
	/*   %position.103.i = phi i32 [ %709, %753 ], [ %position.102.i, %749 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__753_1052) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_755_position103i = main_702_709_reg;
	end
end
always @(posedge clk) begin
	/* main: %755*/
	/*   %position.103.i = phi i32 [ %709, %753 ], [ %position.102.i, %749 ]*/
	if ((((cur_state == LEGUP_F_main_BB__749_1047) & (memory_controller_waitrequest == 1'd0)) & (main_749_752 == 1'd0))) begin
		main_755_position103i_reg <= main_755_position103i;
		if (start == 1'b0 && ^(main_755_position103i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_755_position103i_reg"); $finish; end
	end
	/* main: %755*/
	/*   %position.103.i = phi i32 [ %709, %753 ], [ %position.102.i, %749 ]*/
	if (((cur_state == LEGUP_F_main_BB__753_1052) & (memory_controller_waitrequest == 1'd0))) begin
		main_755_position103i_reg <= main_755_position103i;
		if (start == 1'b0 && ^(main_755_position103i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_755_position103i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
		main_755_757 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__755_1055)) begin
		main_755_757_reg <= main_755_757;
		if (start == 1'b0 && ^(main_755_757) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_755_757_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %755*/
	/*   %758 = icmp sgt i32 %756, %757*/
		main_755_758 = ($signed(main_755_756_reg) > $signed(main_755_757));
end
always @(*) begin
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_759_760 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		main_759_760_reg <= main_759_760;
		if (start == 1'b0 && ^(main_759_760) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_759_760_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %762 = phi i32 [ %760, %759 ], [ %756, %755 ]*/
	if ((((cur_state == LEGUP_F_main_BB__755_1055) & (memory_controller_waitrequest == 1'd0)) & (main_755_758 == 1'd0))) begin
		main_761_762 = main_755_756_reg;
	end
	/* main: %761*/
	/*   %762 = phi i32 [ %760, %759 ], [ %756, %755 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__759_1060) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_761_762 = main_759_760_reg;
	end
end
always @(posedge clk) begin
	/* main: %761*/
	/*   %762 = phi i32 [ %760, %759 ], [ %756, %755 ]*/
	if ((((cur_state == LEGUP_F_main_BB__755_1055) & (memory_controller_waitrequest == 1'd0)) & (main_755_758 == 1'd0))) begin
		main_761_762_reg <= main_761_762;
		if (start == 1'b0 && ^(main_761_762) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_762_reg"); $finish; end
	end
	/* main: %761*/
	/*   %762 = phi i32 [ %760, %759 ], [ %756, %755 ]*/
	if (((cur_state == LEGUP_F_main_BB__759_1060) & (memory_controller_waitrequest == 1'd0))) begin
		main_761_762_reg <= main_761_762;
		if (start == 1'b0 && ^(main_761_762) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_762_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %position.104.i = phi i32 [ %710, %759 ], [ %position.103.i, %755 ]*/
	if ((((cur_state == LEGUP_F_main_BB__755_1055) & (memory_controller_waitrequest == 1'd0)) & (main_755_758 == 1'd0))) begin
		main_761_position104i = main_755_position103i_reg;
	end
	/* main: %761*/
	/*   %position.104.i = phi i32 [ %710, %759 ], [ %position.103.i, %755 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__759_1060) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_761_position104i = main_702_710_reg;
	end
end
always @(posedge clk) begin
	/* main: %761*/
	/*   %position.104.i = phi i32 [ %710, %759 ], [ %position.103.i, %755 ]*/
	if ((((cur_state == LEGUP_F_main_BB__755_1055) & (memory_controller_waitrequest == 1'd0)) & (main_755_758 == 1'd0))) begin
		main_761_position104i_reg <= main_761_position104i;
		if (start == 1'b0 && ^(main_761_position104i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_position104i_reg"); $finish; end
	end
	/* main: %761*/
	/*   %position.104.i = phi i32 [ %710, %759 ], [ %position.103.i, %755 ]*/
	if (((cur_state == LEGUP_F_main_BB__759_1060) & (memory_controller_waitrequest == 1'd0))) begin
		main_761_position104i_reg <= main_761_position104i;
		if (start == 1'b0 && ^(main_761_position104i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_position104i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
		main_761_763 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__761_1063)) begin
		main_761_763_reg <= main_761_763;
		if (start == 1'b0 && ^(main_761_763) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_763_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %764 = icmp sgt i32 %762, %763*/
		main_761_764 = ($signed(main_761_762_reg) > $signed(main_761_763));
end
always @(*) begin
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_765_766 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		main_765_766_reg <= main_765_766;
		if (start == 1'b0 && ^(main_765_766) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_765_766_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %767*/
	/*   %position.105.i = phi i32 [ %711, %765 ], [ %position.104.i, %761 ]*/
	if ((((cur_state == LEGUP_F_main_BB__761_1063) & (memory_controller_waitrequest == 1'd0)) & (main_761_764 == 1'd0))) begin
		main_767_position105i = main_761_position104i_reg;
	end
	/* main: %767*/
	/*   %position.105.i = phi i32 [ %711, %765 ], [ %position.104.i, %761 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__765_1068) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_767_position105i = main_702_711_reg;
	end
end
always @(posedge clk) begin
	/* main: %767*/
	/*   %position.105.i = phi i32 [ %711, %765 ], [ %position.104.i, %761 ]*/
	if ((((cur_state == LEGUP_F_main_BB__761_1063) & (memory_controller_waitrequest == 1'd0)) & (main_761_764 == 1'd0))) begin
		main_767_position105i_reg <= main_767_position105i;
		if (start == 1'b0 && ^(main_767_position105i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_767_position105i_reg"); $finish; end
	end
	/* main: %767*/
	/*   %position.105.i = phi i32 [ %711, %765 ], [ %position.104.i, %761 ]*/
	if (((cur_state == LEGUP_F_main_BB__765_1068) & (memory_controller_waitrequest == 1'd0))) begin
		main_767_position105i_reg <= main_767_position105i;
		if (start == 1'b0 && ^(main_767_position105i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_767_position105i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %767*/
	/*   %768 = icmp sgt i32 %712, 91*/
		main_767_768 = ($signed(main_702_712_reg) > $signed(32'd91));
end
always @(*) begin
	/* main: %767*/
	/*   %indvar.next132 = add i32 %indvar131, 1*/
		main_767_indvarnext132 = (main_702_indvar131_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge117.i*/
	/*   %position.96.lcssa.i = phi i32 [ %13, %._crit_edge112.i ], [ %position.105.i, %._crit_edge117.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge112i_993) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge112i_701 == 1'd1))) begin
		main__crit_edge117i_position96lcssai = main_lrph27i_13_reg;
	end
	/* main: %._crit_edge117.i*/
	/*   %position.96.lcssa.i = phi i32 [ %13, %._crit_edge112.i ], [ %position.105.i, %._crit_edge117.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge117iloopexit_1070) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge117i_position96lcssai = main_767_position105i_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge117.i*/
	/*   %position.96.lcssa.i = phi i32 [ %13, %._crit_edge112.i ], [ %position.105.i, %._crit_edge117.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge112i_993) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge112i_701 == 1'd1))) begin
		main__crit_edge117i_position96lcssai_reg <= main__crit_edge117i_position96lcssai;
		if (start == 1'b0 && ^(main__crit_edge117i_position96lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge117i_position96lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge117.i*/
	/*   %position.96.lcssa.i = phi i32 [ %13, %._crit_edge112.i ], [ %position.105.i, %._crit_edge117.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge117iloopexit_1070) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge117i_position96lcssai_reg <= main__crit_edge117i_position96lcssai;
		if (start == 1'b0 && ^(main__crit_edge117i_position96lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge117i_position96lcssai_reg"); $finish; end
	end
end
always @(*) begin
	main__crit_edge117i_769 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %._crit_edge117.i*/
/*   %769 = srem i32 %22, 9*/
	main__crit_edge117i_769_reg = main__crit_edge28i_98_reg;
end
always @(*) begin
	/* main: %._crit_edge117.i*/
	/*   %770 = sub nsw i32 100, %769*/
		main__crit_edge117i_770 = (32'd100 - main__crit_edge117i_769);
end
always @(*) begin
	/* main: %._crit_edge117.i*/
	/*   %771 = icmp sgt i32 %770, 99*/
		main__crit_edge117i_771 = ($signed(main__crit_edge117i_770) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph122.i*/
	/*   %772 = add i32 %769, -99*/
		main_lrph122i_772 = (main__crit_edge117i_769_reg + -32'd99);
end
always @(*) begin
	/* main: %.lr.ph122.i*/
	/*   %773 = sub i32 100, %769*/
		main_lrph122i_773 = (32'd100 - main__crit_edge117i_769_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph122.i*/
	/*   %773 = sub i32 100, %769*/
	if ((cur_state == LEGUP_F_main_BB_lrph122i_1104)) begin
		main_lrph122i_773_reg <= main_lrph122i_773;
		if (start == 1'b0 && ^(main_lrph122i_773) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph122i_773_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph122.i*/
	/*   %774 = icmp sgt i32 %773, 99*/
		main_lrph122i_774 = ($signed(main_lrph122i_773) > $signed(32'd99));
end
always @(*) begin
	/* main: %.lr.ph122.i*/
	/*   %smax144 = select i1 %774, i32 %773, i32 99*/
		main_lrph122i_smax144 = (main_lrph122i_774 ? main_lrph122i_773 : 32'd99);
end
always @(*) begin
	/* main: %.lr.ph122.i*/
	/*   %775 = add i32 %772, %smax144*/
		main_lrph122i_775 = (main_lrph122i_772 + main_lrph122i_smax144);
end
always @(posedge clk) begin
	/* main: %.lr.ph122.i*/
	/*   %775 = add i32 %772, %smax144*/
	if ((cur_state == LEGUP_F_main_BB_lrph122i_1104)) begin
		main_lrph122i_775_reg <= main_lrph122i_775;
		if (start == 1'b0 && ^(main_lrph122i_775) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph122i_775_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %indvar142 = phi i32 [ %indvar.next143, %784 ], [ 0, %.lr.ph122.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph122i_1104) & (memory_controller_waitrequest == 1'd0))) begin
		main_776_indvar142 = 32'd0;
	end
	/* main: %776*/
	/*   %indvar142 = phi i32 [ %indvar.next143, %784 ], [ 0, %.lr.ph122.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__784_1114) & (memory_controller_waitrequest == 1'd0)) & (main_784_exitcond145 == 1'd0))) */ begin
		main_776_indvar142 = main_784_indvarnext143;
	end
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %indvar142 = phi i32 [ %indvar.next143, %784 ], [ 0, %.lr.ph122.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph122i_1104) & (memory_controller_waitrequest == 1'd0))) begin
		main_776_indvar142_reg <= main_776_indvar142;
		if (start == 1'b0 && ^(main_776_indvar142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_indvar142_reg"); $finish; end
	end
	/* main: %776*/
	/*   %indvar142 = phi i32 [ %indvar.next143, %784 ], [ 0, %.lr.ph122.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__784_1114) & (memory_controller_waitrequest == 1'd0)) & (main_784_exitcond145 == 1'd0))) begin
		main_776_indvar142_reg <= main_776_indvar142;
		if (start == 1'b0 && ^(main_776_indvar142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_indvar142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %position.106119.i = phi i32 [ %position.107.i, %784 ], [ %position.96.lcssa.i, %.lr.ph122.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph122i_1104) & (memory_controller_waitrequest == 1'd0))) begin
		main_776_position106119i = main__crit_edge117i_position96lcssai_reg;
	end
	/* main: %776*/
	/*   %position.106119.i = phi i32 [ %position.107.i, %784 ], [ %position.96.lcssa.i, %.lr.ph122.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__784_1114) & (memory_controller_waitrequest == 1'd0)) & (main_784_exitcond145 == 1'd0))) */ begin
		main_776_position106119i = main_784_position107i_reg;
	end
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %position.106119.i = phi i32 [ %position.107.i, %784 ], [ %position.96.lcssa.i, %.lr.ph122.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph122i_1104) & (memory_controller_waitrequest == 1'd0))) begin
		main_776_position106119i_reg <= main_776_position106119i;
		if (start == 1'b0 && ^(main_776_position106119i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_position106119i_reg"); $finish; end
	end
	/* main: %776*/
	/*   %position.106119.i = phi i32 [ %position.107.i, %784 ], [ %position.96.lcssa.i, %.lr.ph122.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__784_1114) & (memory_controller_waitrequest == 1'd0)) & (main_784_exitcond145 == 1'd0))) begin
		main_776_position106119i_reg <= main_776_position106119i;
		if (start == 1'b0 && ^(main_776_position106119i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_position106119i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %777 = sub i32 %indvar142, %769*/
		main_776_777 = (main_776_indvar142_reg - main__crit_edge117i_769_reg);
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %777 = sub i32 %indvar142, %769*/
	if ((cur_state == LEGUP_F_main_BB__776_1105)) begin
		main_776_777_reg <= main_776_777;
		if (start == 1'b0 && ^(main_776_777) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_777_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %scevgep146 = getelementptr [100 x i32]* @y, i32 1, i32 %777*/
		main_776_scevgep146 = (`TAG_g_y_a + ((400 * 32'd1) + (4 * main_776_777_reg)));
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %scevgep146 = getelementptr [100 x i32]* @y, i32 1, i32 %777*/
	if ((cur_state == LEGUP_F_main_BB__776_1106)) begin
		main_776_scevgep146_reg <= main_776_scevgep146;
		if (start == 1'b0 && ^(main_776_scevgep146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_scevgep146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %778 = getelementptr inbounds [100 x i32]* @y, i32 0, i32 %position.106119.i*/
		main_776_778 = (`TAG_g_y_a + (4 * main_776_position106119i_reg));
end
always @(*) begin
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
		main_776_779 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1107)) begin
		main_776_779_reg <= main_776_779;
		if (start == 1'b0 && ^(main_776_779) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_779_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
		main_776_780 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1108)) begin
		main_776_780_reg <= main_776_780;
		if (start == 1'b0 && ^(main_776_780) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_776_780_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %776*/
	/*   %781 = icmp sgt i32 %779, %780*/
		main_776_781 = ($signed(main_776_779_reg) > $signed(main_776_780));
end
always @(*) begin
	/* main: %782*/
	/*   %d10.1120.i = add i32 %773, %indvar142*/
		main_782_d101120i = (main_lrph122i_773_reg + main_776_indvar142_reg);
end
always @(posedge clk) begin
	/* main: %782*/
	/*   %d10.1120.i = add i32 %773, %indvar142*/
	if ((cur_state == LEGUP_F_main_BB__782_1109)) begin
		main_782_d101120i_reg <= main_782_d101120i;
		if (start == 1'b0 && ^(main_782_d101120i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_d101120i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
		main_782_783 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		main_782_783_reg <= main_782_783;
		if (start == 1'b0 && ^(main_782_783) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_783_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %784*/
	/*   %position.107.i = phi i32 [ %d10.1120.i, %782 ], [ %position.106119.i, %776 ]*/
	if ((((cur_state == LEGUP_F_main_BB__776_1108) & (memory_controller_waitrequest == 1'd0)) & (main_776_781 == 1'd0))) begin
		main_784_position107i = main_776_position106119i_reg;
	end
	/* main: %784*/
	/*   %position.107.i = phi i32 [ %d10.1120.i, %782 ], [ %position.106119.i, %776 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__782_1113) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_784_position107i = main_782_d101120i_reg;
	end
end
always @(posedge clk) begin
	/* main: %784*/
	/*   %position.107.i = phi i32 [ %d10.1120.i, %782 ], [ %position.106119.i, %776 ]*/
	if ((((cur_state == LEGUP_F_main_BB__776_1108) & (memory_controller_waitrequest == 1'd0)) & (main_776_781 == 1'd0))) begin
		main_784_position107i_reg <= main_784_position107i;
		if (start == 1'b0 && ^(main_784_position107i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_784_position107i_reg"); $finish; end
	end
	/* main: %784*/
	/*   %position.107.i = phi i32 [ %d10.1120.i, %782 ], [ %position.106119.i, %776 ]*/
	if (((cur_state == LEGUP_F_main_BB__782_1113) & (memory_controller_waitrequest == 1'd0))) begin
		main_784_position107i_reg <= main_784_position107i;
		if (start == 1'b0 && ^(main_784_position107i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_784_position107i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %784*/
	/*   %indvar.next143 = add i32 %indvar142, 1*/
		main_784_indvarnext143 = (main_776_indvar142_reg + 32'd1);
end
always @(*) begin
	/* main: %784*/
	/*   %exitcond145 = icmp eq i32 %indvar.next143, %775*/
		main_784_exitcond145 = (main_784_indvarnext143 == main_lrph122i_775_reg);
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %787, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_sortexitpreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_sortexit_i02 = 32'd0;
	end
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %787, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_sortexit_1117) & (memory_controller_waitrequest == 1'd0)) & (main_sortexit_exitcond_reg == 1'd0))) */ begin
		main_sortexit_i02 = main_sortexit_787_reg;
	end
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %787, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_sortexitpreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_sortexit_i02_reg <= main_sortexit_i02;
		if (start == 1'b0 && ^(main_sortexit_i02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_i02_reg"); $finish; end
	end
	/* main: %sort.exit*/
	/*   %i.02 = phi i32 [ %787, %sort.exit ], [ 0, %sort.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_sortexit_1117) & (memory_controller_waitrequest == 1'd0)) & (main_sortexit_exitcond_reg == 1'd0))) begin
		main_sortexit_i02_reg <= main_sortexit_i02;
		if (start == 1'b0 && ^(main_sortexit_i02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_i02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @y, i32 0, i32 %i.02*/
		main_sortexit_scevgep3 = (`TAG_g_y_a + (4 * main_sortexit_i02_reg));
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %785 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_sortexit_785 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %787 = add nsw i32 %i.02, 1*/
		main_sortexit_787 = (main_sortexit_i02_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %787 = add nsw i32 %i.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		main_sortexit_787_reg <= main_sortexit_787;
		if (start == 1'b0 && ^(main_sortexit_787) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_787_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sort.exit*/
	/*   %exitcond = icmp eq i32 %787, 100*/
		main_sortexit_exitcond = (main_sortexit_787 == 32'd100);
end
always @(posedge clk) begin
	/* main: %sort.exit*/
	/*   %exitcond = icmp eq i32 %787, 100*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		main_sortexit_exitcond_reg <= main_sortexit_exitcond;
		if (start == 1'b0 && ^(main_sortexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sortexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %790*/
	/*   %i.11 = phi i32 [ 0, %788 ], [ %793, %790 ]*/
	if (((cur_state == LEGUP_F_main_BB__788_1118) & (memory_controller_waitrequest == 1'd0))) begin
		main_790_i11 = 32'd0;
	end
	/* main: %790*/
	/*   %i.11 = phi i32 [ 0, %788 ], [ %793, %790 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__790_1121) & (memory_controller_waitrequest == 1'd0)) & (main_790_exitcond2_reg == 1'd0))) */ begin
		main_790_i11 = main_790_793_reg;
	end
end
always @(posedge clk) begin
	/* main: %790*/
	/*   %i.11 = phi i32 [ 0, %788 ], [ %793, %790 ]*/
	if (((cur_state == LEGUP_F_main_BB__788_1118) & (memory_controller_waitrequest == 1'd0))) begin
		main_790_i11_reg <= main_790_i11;
		if (start == 1'b0 && ^(main_790_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_790_i11_reg"); $finish; end
	end
	/* main: %790*/
	/*   %i.11 = phi i32 [ 0, %788 ], [ %793, %790 ]*/
	if ((((cur_state == LEGUP_F_main_BB__790_1121) & (memory_controller_waitrequest == 1'd0)) & (main_790_exitcond2_reg == 1'd0))) begin
		main_790_i11_reg <= main_790_i11;
		if (start == 1'b0 && ^(main_790_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_790_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %790*/
	/*   %scevgep = getelementptr [100 x i32]* @correctOutput, i32 0, i32 %i.11*/
		main_790_scevgep = (`TAG_g_correctOutput_a + (4 * main_790_i11_reg));
end
always @(*) begin
	/* main: %790*/
	/*   %791 = load i32* %scevgep, align 4, !tbaa !1*/
		main_790_791 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %790*/
	/*   %793 = add nsw i32 %i.11, 1*/
		main_790_793 = (main_790_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %790*/
	/*   %793 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		main_790_793_reg <= main_790_793;
		if (start == 1'b0 && ^(main_790_793) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_790_793_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %790*/
	/*   %exitcond2 = icmp eq i32 %793, 100*/
		main_790_exitcond2 = (main_790_793 == 32'd100);
end
always @(posedge clk) begin
	/* main: %790*/
	/*   %exitcond2 = icmp eq i32 %793, 100*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		main_790_exitcond2_reg <= main_790_exitcond2;
		if (start == 1'b0 && ^(main_790_exitcond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_790_exitcond2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge28.i*/
	/*   %98 = srem i32 %30, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge28i_87)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_30_reg;
	end
	/* main: %._crit_edge40.i*/
	/*   %181 = srem i32 %29, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge40i_210)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_29_reg;
	end
	/* main: %._crit_edge51.i*/
	/*   %265 = srem i32 %28, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge51i_333)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_28_reg;
	end
	/* main: %._crit_edge62.i*/
	/*   %349 = srem i32 %27, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge62i_456)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_27_reg;
	end
	/* main: %._crit_edge73.i*/
	/*   %433 = srem i32 %26, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge73i_579)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_26_reg;
	end
	/* main: %._crit_edge84.i*/
	/*   %517 = srem i32 %25, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge84i_702)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_25_reg;
	end
	/* main: %._crit_edge95.i*/
	/*   %601 = srem i32 %24, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge95i_825)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_24_reg;
	end
	/* main: %._crit_edge106.i*/
	/*   %685 = srem i32 %23, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge106i_948)) begin
		main_signed_modulus_32_0_op0 = main_lrph27i_23_reg;
	end
	/* main: %._crit_edge117.i*/
	/*   %769 = srem i32 %22, 9*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edge117i_1071)) */ begin
		main_signed_modulus_32_0_op0 = main_lrph27i_22_reg;
	end
end
always @(*) begin
	/* main: %._crit_edge28.i*/
	/*   %98 = srem i32 %30, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge28i_87)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge40.i*/
	/*   %181 = srem i32 %29, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge40i_210)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge51.i*/
	/*   %265 = srem i32 %28, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge51i_333)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge62.i*/
	/*   %349 = srem i32 %27, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge62i_456)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge73.i*/
	/*   %433 = srem i32 %26, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge73i_579)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge84.i*/
	/*   %517 = srem i32 %25, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge84i_702)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge95.i*/
	/*   %601 = srem i32 %24, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge95i_825)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge106.i*/
	/*   %685 = srem i32 %23, 9*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge106i_948)) begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
	/* main: %._crit_edge117.i*/
	/*   %769 = srem i32 %22, 9*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edge117i_1071)) */ begin
		main_signed_modulus_32_0_op1 = 32'd9;
	end
end
always @(*) begin
	lpm_divide_main__crit_edge28i_98_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main__crit_edge28i_98_out = lpm_divide_main__crit_edge28i_98_temp_out;
end
always @(*) begin
	main_signed_modulus_32_0 = lpm_divide_main__crit_edge28i_98_out;
end
always @(*) begin
	lpm_mult_main_lrph27i_i10123i_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %i1.0123.i = mul i32 %indvar4, 9*/
	if ((lpm_mult_main_lrph27i_i10123i_en == 1'd1)) begin
		main_lrph27i_i10123i_stage0_reg <= (main_lrph27i_indvar4_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_lrph27i_21_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %21 = mul i32 %indvar4, -9*/
	if ((lpm_mult_main_lrph27i_21_en == 1'd1)) begin
		main_lrph27i_21_stage0_reg <= (main_lrph27i_indvar4_reg * -32'd9);
	end
end
always @(*) begin
	lpm_mult_main_31_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = mul i32 %indvar, 9*/
	if ((lpm_mult_main_31_32_en == 1'd1)) begin
		main_31_32_stage0_reg <= (main_31_indvar_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_114_115_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %115 = mul i32 %indvar19, 9*/
	if ((lpm_mult_main_114_115_en == 1'd1)) begin
		main_114_115_stage0_reg <= (main_114_indvar19_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_198_199_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %199 = mul i32 %indvar35, 9*/
	if ((lpm_mult_main_198_199_en == 1'd1)) begin
		main_198_199_stage0_reg <= (main_198_indvar35_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_282_283_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %282*/
	/*   %283 = mul i32 %indvar51, 9*/
	if ((lpm_mult_main_282_283_en == 1'd1)) begin
		main_282_283_stage0_reg <= (main_282_indvar51_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_366_367_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %367 = mul i32 %indvar67, 9*/
	if ((lpm_mult_main_366_367_en == 1'd1)) begin
		main_366_367_stage0_reg <= (main_366_indvar67_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_450_451_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %450*/
	/*   %451 = mul i32 %indvar83, 9*/
	if ((lpm_mult_main_450_451_en == 1'd1)) begin
		main_450_451_stage0_reg <= (main_450_indvar83_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_534_535_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %535 = mul i32 %indvar99, 9*/
	if ((lpm_mult_main_534_535_en == 1'd1)) begin
		main_534_535_stage0_reg <= (main_534_indvar99_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_618_619_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %618*/
	/*   %619 = mul i32 %indvar115, 9*/
	if ((lpm_mult_main_618_619_en == 1'd1)) begin
		main_618_619_stage0_reg <= (main_618_indvar115_reg * 32'd9);
	end
end
always @(*) begin
	lpm_mult_main_702_703_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %702*/
	/*   %703 = mul i32 %indvar131, 9*/
	if ((lpm_mult_main_702_703_en == 1'd1)) begin
		main_702_703_stage0_reg <= (main_702_indvar131_reg * 32'd9);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %794*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__794_1122)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   %1 = load i32* %scevgep240, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph128.i*/
	/*   store i32 %1, i32* %scevgep239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %46*/
	/*   store i32 %44, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %46*/
	/*   store i32 %47, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__48_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %52*/
	/*   store i32 %50, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %52*/
	/*   store i32 %53, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__54_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   store i32 %56, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   store i32 %59, i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__60_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %64*/
	/*   store i32 %62, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %64*/
	/*   store i32 %65, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %70*/
	/*   store i32 %68, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %70*/
	/*   store i32 %71, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__72_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %76*/
	/*   store i32 %74, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %76*/
	/*   store i32 %77, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %82*/
	/*   store i32 %80, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %82*/
	/*   store i32 %83, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %88*/
	/*   store i32 %86, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %88*/
	/*   store i32 %89, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %94*/
	/*   store i32 %92, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %94*/
	/*   store i32 %95, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_121)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_125)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i32 %108, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i32 %111, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_128)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_134)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_139)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %129*/
	/*   store i32 %127, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %129*/
	/*   store i32 %130, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__131_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   store i32 %133, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   store i32 %136, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__137_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_155)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %141*/
	/*   store i32 %139, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %141*/
	/*   store i32 %142, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_158)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_160)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_163)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %147*/
	/*   store i32 %145, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %147*/
	/*   store i32 %148, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_166)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__149_168)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_171)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %153*/
	/*   store i32 %151, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %153*/
	/*   store i32 %154, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_174)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__155_176)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_179)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %159*/
	/*   store i32 %157, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %159*/
	/*   store i32 %160, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_182)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__161_184)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_187)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %165*/
	/*   store i32 %163, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %165*/
	/*   store i32 %166, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_190)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__167_192)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_195)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %171*/
	/*   store i32 %169, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %171*/
	/*   store i32 %172, i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__173_200)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_203)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %177*/
	/*   store i32 %175, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %177*/
	/*   store i32 %178, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_206)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_244)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_245)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_248)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %194*/
	/*   store i32 %192, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %194*/
	/*   store i32 %195, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_251)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_257)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_262)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %213*/
	/*   store i32 %211, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %213*/
	/*   store i32 %214, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_265)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_267)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_270)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %219*/
	/*   store i32 %217, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %219*/
	/*   store i32 %220, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_273)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__221_275)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_278)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   store i32 %223, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_281)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__227_283)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_286)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   store i32 %229, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   store i32 %232, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_289)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_291)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_294)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %237*/
	/*   store i32 %235, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %237*/
	/*   store i32 %238, i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_297)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_299)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_302)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %243*/
	/*   store i32 %241, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %243*/
	/*   store i32 %244, i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_305)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__245_307)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_310)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %249*/
	/*   store i32 %247, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %249*/
	/*   store i32 %250, i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_313)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_315)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_318)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %255*/
	/*   store i32 %253, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %255*/
	/*   store i32 %256, i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_321)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__257_323)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_326)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %261*/
	/*   store i32 %259, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %261*/
	/*   store i32 %262, i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_329)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_367)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_368)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_371)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %278*/
	/*   store i32 %276, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %278*/
	/*   store i32 %279, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_374)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_380)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_385)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %297*/
	/*   store i32 %295, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %297*/
	/*   store i32 %298, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_388)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__299_390)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_393)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %303*/
	/*   store i32 %301, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %303*/
	/*   store i32 %304, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_396)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__305_398)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_401)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %309*/
	/*   store i32 %307, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %309*/
	/*   store i32 %310, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_404)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__311_406)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_409)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %315*/
	/*   store i32 %313, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %315*/
	/*   store i32 %316, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_412)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__317_414)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_417)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %321*/
	/*   store i32 %319, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %321*/
	/*   store i32 %322, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_420)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__323_422)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_425)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %327*/
	/*   store i32 %325, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %327*/
	/*   store i32 %328, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_428)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__329_430)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_433)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %333*/
	/*   store i32 %331, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %333*/
	/*   store i32 %334, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_436)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__335_438)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_441)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %339*/
	/*   store i32 %337, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %339*/
	/*   store i32 %340, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_444)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__341_446)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_449)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %345*/
	/*   store i32 %343, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %345*/
	/*   store i32 %346, i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_452)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_490)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_491)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_494)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %362*/
	/*   store i32 %360, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %362*/
	/*   store i32 %363, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_497)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_503)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_508)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %381*/
	/*   store i32 %379, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %381*/
	/*   store i32 %382, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_511)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__383_513)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_516)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %387*/
	/*   store i32 %385, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %387*/
	/*   store i32 %388, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_519)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__389_521)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_524)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %393*/
	/*   store i32 %391, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %393*/
	/*   store i32 %394, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_527)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__395_529)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_532)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %399*/
	/*   store i32 %397, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %399*/
	/*   store i32 %400, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_535)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__401_537)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_540)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %405*/
	/*   store i32 %403, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %405*/
	/*   store i32 %406, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_543)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_545)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_548)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %411*/
	/*   store i32 %409, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %411*/
	/*   store i32 %412, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_551)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__413_553)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_556)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %417*/
	/*   store i32 %415, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %417*/
	/*   store i32 %418, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_559)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__419_561)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_564)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %423*/
	/*   store i32 %421, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %423*/
	/*   store i32 %424, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_567)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__425_569)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_572)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %429*/
	/*   store i32 %427, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %429*/
	/*   store i32 %430, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_575)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_613)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_614)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_617)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   store i32 %444, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   store i32 %447, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_620)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_626)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_631)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   store i32 %463, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   store i32 %466, i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_634)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__467_636)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_639)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %471*/
	/*   store i32 %469, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %471*/
	/*   store i32 %472, i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_642)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__473_644)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_647)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %477*/
	/*   store i32 %475, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %477*/
	/*   store i32 %478, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_650)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__479_652)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_655)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %483*/
	/*   store i32 %481, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %483*/
	/*   store i32 %484, i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_658)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__485_660)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_663)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %489*/
	/*   store i32 %487, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %489*/
	/*   store i32 %490, i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_666)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__491_668)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_671)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %495*/
	/*   store i32 %493, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %495*/
	/*   store i32 %496, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_674)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__497_676)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_679)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %501*/
	/*   store i32 %499, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %501*/
	/*   store i32 %502, i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_682)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__503_684)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_687)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %507*/
	/*   store i32 %505, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %507*/
	/*   store i32 %508, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_690)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__509_692)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_695)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %513*/
	/*   store i32 %511, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %513*/
	/*   store i32 %514, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_698)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_736)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_737)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_740)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %530*/
	/*   store i32 %528, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %530*/
	/*   store i32 %531, i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_743)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_749)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_754)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %549*/
	/*   store i32 %547, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %549*/
	/*   store i32 %550, i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_757)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__551_759)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_762)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %555*/
	/*   store i32 %553, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %555*/
	/*   store i32 %556, i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_765)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__557_767)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_770)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %561*/
	/*   store i32 %559, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %561*/
	/*   store i32 %562, i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_773)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__563_775)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_778)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %567*/
	/*   store i32 %565, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %567*/
	/*   store i32 %568, i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_781)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__569_783)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_786)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %573*/
	/*   store i32 %571, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %573*/
	/*   store i32 %574, i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_789)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__575_791)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_794)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %579*/
	/*   store i32 %577, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %579*/
	/*   store i32 %580, i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_797)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_799)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_802)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %585*/
	/*   store i32 %583, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %585*/
	/*   store i32 %586, i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_805)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__587_807)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_810)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %591*/
	/*   store i32 %589, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %591*/
	/*   store i32 %592, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_813)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__593_815)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_818)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %597*/
	/*   store i32 %595, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %597*/
	/*   store i32 %598, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_821)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_859)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_860)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_863)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %614*/
	/*   store i32 %612, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %614*/
	/*   store i32 %615, i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_866)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_872)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_877)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %633*/
	/*   store i32 %631, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %633*/
	/*   store i32 %634, i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_880)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__635_882)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_885)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %639*/
	/*   store i32 %637, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %639*/
	/*   store i32 %640, i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_888)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__641_890)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_893)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %645*/
	/*   store i32 %643, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %645*/
	/*   store i32 %646, i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_896)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__647_898)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_901)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %651*/
	/*   store i32 %649, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %651*/
	/*   store i32 %652, i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_904)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__653_906)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_909)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %657*/
	/*   store i32 %655, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %657*/
	/*   store i32 %658, i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_912)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__659_914)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_917)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %663*/
	/*   store i32 %661, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %663*/
	/*   store i32 %664, i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_920)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__665_922)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_925)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %669*/
	/*   store i32 %667, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %669*/
	/*   store i32 %670, i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_928)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__671_930)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_933)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %675*/
	/*   store i32 %673, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %675*/
	/*   store i32 %676, i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_936)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__677_938)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_941)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %681*/
	/*   store i32 %679, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %681*/
	/*   store i32 %682, i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_944)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_982)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_983)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_986)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   store i32 %696, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   store i32 %699, i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_989)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_995)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1000)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %717*/
	/*   store i32 %715, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %717*/
	/*   store i32 %718, i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1003)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__719_1005)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1008)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %723*/
	/*   store i32 %721, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %723*/
	/*   store i32 %724, i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1011)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__725_1013)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1016)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %729*/
	/*   store i32 %727, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %729*/
	/*   store i32 %730, i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1019)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__731_1021)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1024)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %735*/
	/*   store i32 %733, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %735*/
	/*   store i32 %736, i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1027)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_1029)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1032)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   store i32 %739, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   store i32 %742, i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1035)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__743_1037)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1040)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %747*/
	/*   store i32 %745, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %747*/
	/*   store i32 %748, i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1043)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__749_1045)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1048)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %753*/
	/*   store i32 %751, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %753*/
	/*   store i32 %754, i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1051)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__755_1053)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1056)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %759*/
	/*   store i32 %757, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %759*/
	/*   store i32 %760, i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1059)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__761_1061)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1064)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %765*/
	/*   store i32 %763, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %765*/
	/*   store i32 %766, i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1067)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   store i32 %780, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   store i32 %783, i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sort.exit*/
	/*   %785 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %790*/
	/*   %791 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   %1 = load i32* %scevgep240, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		memory_controller_address_a = main_lrph128i_scevgep240;
	end
	/* main: %.lr.ph128.i*/
	/*   store i32 %1, i32* %scevgep239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_3)) begin
		memory_controller_address_a = main_lrph128i_scevgep239_reg;
	end
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_12)) begin
		memory_controller_address_a = main_31_42;
	end
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		memory_controller_address_a = main_31_scevgep14;
	end
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_17)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %46*/
	/*   store i32 %44, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %46*/
	/*   store i32 %47, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_20)) begin
		memory_controller_address_a = main_31_scevgep14_reg;
	end
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__48_22)) begin
		memory_controller_address_a = main_31_scevgep13_reg;
	end
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_25)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %52*/
	/*   store i32 %50, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %52*/
	/*   store i32 %53, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_28)) begin
		memory_controller_address_a = main_31_scevgep13_reg;
	end
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__54_30)) begin
		memory_controller_address_a = main_31_scevgep12_reg;
	end
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_33)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %58*/
	/*   store i32 %56, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %58*/
	/*   store i32 %59, i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_36)) begin
		memory_controller_address_a = main_31_scevgep12_reg;
	end
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__60_38)) begin
		memory_controller_address_a = main_31_scevgep11_reg;
	end
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_41)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %64*/
	/*   store i32 %62, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %64*/
	/*   store i32 %65, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_44)) begin
		memory_controller_address_a = main_31_scevgep11_reg;
	end
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_46)) begin
		memory_controller_address_a = main_31_scevgep10_reg;
	end
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_49)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %70*/
	/*   store i32 %68, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %70*/
	/*   store i32 %71, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_52)) begin
		memory_controller_address_a = main_31_scevgep10_reg;
	end
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__72_54)) begin
		memory_controller_address_a = main_31_scevgep9_reg;
	end
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_57)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %76*/
	/*   store i32 %74, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %76*/
	/*   store i32 %77, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_60)) begin
		memory_controller_address_a = main_31_scevgep9_reg;
	end
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_62)) begin
		memory_controller_address_a = main_31_scevgep8_reg;
	end
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_65)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %82*/
	/*   store i32 %80, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %82*/
	/*   store i32 %83, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		memory_controller_address_a = main_31_scevgep8_reg;
	end
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_70)) begin
		memory_controller_address_a = main_31_scevgep7_reg;
	end
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_73)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %88*/
	/*   store i32 %86, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %88*/
	/*   store i32 %89, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_76)) begin
		memory_controller_address_a = main_31_scevgep7_reg;
	end
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_78)) begin
		memory_controller_address_a = main_31_scevgep6_reg;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_81)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %94*/
	/*   store i32 %92, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %94*/
	/*   store i32 %95, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_84)) begin
		memory_controller_address_a = main_31_scevgep6_reg;
	end
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_121)) begin
		memory_controller_address_a = main_lrph34i_106;
	end
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_122)) begin
		memory_controller_address_a = main_lrph34i_scevgep18;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_125)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %110*/
	/*   store i32 %108, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		memory_controller_address_a = main_lrph27i_scevgep236_reg;
	end
	/* main: %110*/
	/*   store i32 %111, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_128)) begin
		memory_controller_address_a = main_lrph34i_scevgep18_reg;
	end
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_134)) begin
		memory_controller_address_a = main_114_125;
	end
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		memory_controller_address_a = main_114_scevgep29;
	end
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_139)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %129*/
	/*   store i32 %127, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %129*/
	/*   store i32 %130, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_142)) begin
		memory_controller_address_a = main_114_scevgep29_reg;
	end
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__131_144)) begin
		memory_controller_address_a = main_114_scevgep28_reg;
	end
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_147)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %135*/
	/*   store i32 %133, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %135*/
	/*   store i32 %136, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_150)) begin
		memory_controller_address_a = main_114_scevgep28_reg;
	end
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__137_152)) begin
		memory_controller_address_a = main_114_scevgep27_reg;
	end
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_155)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %141*/
	/*   store i32 %139, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %141*/
	/*   store i32 %142, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_158)) begin
		memory_controller_address_a = main_114_scevgep27_reg;
	end
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_160)) begin
		memory_controller_address_a = main_114_scevgep26_reg;
	end
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_163)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %147*/
	/*   store i32 %145, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %147*/
	/*   store i32 %148, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_166)) begin
		memory_controller_address_a = main_114_scevgep26_reg;
	end
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__149_168)) begin
		memory_controller_address_a = main_114_scevgep25_reg;
	end
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_171)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %153*/
	/*   store i32 %151, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %153*/
	/*   store i32 %154, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_174)) begin
		memory_controller_address_a = main_114_scevgep25_reg;
	end
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__155_176)) begin
		memory_controller_address_a = main_114_scevgep24_reg;
	end
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_179)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %159*/
	/*   store i32 %157, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %159*/
	/*   store i32 %160, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_182)) begin
		memory_controller_address_a = main_114_scevgep24_reg;
	end
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__161_184)) begin
		memory_controller_address_a = main_114_scevgep23_reg;
	end
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_187)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %165*/
	/*   store i32 %163, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %165*/
	/*   store i32 %166, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_190)) begin
		memory_controller_address_a = main_114_scevgep23_reg;
	end
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__167_192)) begin
		memory_controller_address_a = main_114_scevgep22_reg;
	end
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_195)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %171*/
	/*   store i32 %169, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %171*/
	/*   store i32 %172, i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_198)) begin
		memory_controller_address_a = main_114_scevgep22_reg;
	end
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__173_200)) begin
		memory_controller_address_a = main_114_scevgep21_reg;
	end
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_203)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %177*/
	/*   store i32 %175, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %177*/
	/*   store i32 %178, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_206)) begin
		memory_controller_address_a = main_114_scevgep21_reg;
	end
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_244)) begin
		memory_controller_address_a = main_188_190;
	end
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_245)) begin
		memory_controller_address_a = main_188_scevgep34;
	end
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_248)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %194*/
	/*   store i32 %192, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		memory_controller_address_a = main_lrph27i_scevgep237_reg;
	end
	/* main: %194*/
	/*   store i32 %195, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_251)) begin
		memory_controller_address_a = main_188_scevgep34_reg;
	end
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_257)) begin
		memory_controller_address_a = main_198_209;
	end
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		memory_controller_address_a = main_198_scevgep45;
	end
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_262)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %213*/
	/*   store i32 %211, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %213*/
	/*   store i32 %214, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_265)) begin
		memory_controller_address_a = main_198_scevgep45_reg;
	end
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_267)) begin
		memory_controller_address_a = main_198_scevgep44_reg;
	end
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_270)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %219*/
	/*   store i32 %217, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %219*/
	/*   store i32 %220, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_273)) begin
		memory_controller_address_a = main_198_scevgep44_reg;
	end
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__221_275)) begin
		memory_controller_address_a = main_198_scevgep43_reg;
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_278)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %225*/
	/*   store i32 %223, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %225*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_281)) begin
		memory_controller_address_a = main_198_scevgep43_reg;
	end
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__227_283)) begin
		memory_controller_address_a = main_198_scevgep42_reg;
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_286)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %231*/
	/*   store i32 %229, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %231*/
	/*   store i32 %232, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_289)) begin
		memory_controller_address_a = main_198_scevgep42_reg;
	end
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_291)) begin
		memory_controller_address_a = main_198_scevgep41_reg;
	end
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_294)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %237*/
	/*   store i32 %235, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %237*/
	/*   store i32 %238, i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_297)) begin
		memory_controller_address_a = main_198_scevgep41_reg;
	end
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_299)) begin
		memory_controller_address_a = main_198_scevgep40_reg;
	end
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_302)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %243*/
	/*   store i32 %241, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %243*/
	/*   store i32 %244, i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_305)) begin
		memory_controller_address_a = main_198_scevgep40_reg;
	end
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__245_307)) begin
		memory_controller_address_a = main_198_scevgep39_reg;
	end
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_310)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %249*/
	/*   store i32 %247, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %249*/
	/*   store i32 %250, i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_313)) begin
		memory_controller_address_a = main_198_scevgep39_reg;
	end
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_315)) begin
		memory_controller_address_a = main_198_scevgep38_reg;
	end
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_318)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %255*/
	/*   store i32 %253, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %255*/
	/*   store i32 %256, i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_321)) begin
		memory_controller_address_a = main_198_scevgep38_reg;
	end
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__257_323)) begin
		memory_controller_address_a = main_198_scevgep37_reg;
	end
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_326)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %261*/
	/*   store i32 %259, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %261*/
	/*   store i32 %262, i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_329)) begin
		memory_controller_address_a = main_198_scevgep37_reg;
	end
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_367)) begin
		memory_controller_address_a = main_272_274;
	end
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_368)) begin
		memory_controller_address_a = main_272_scevgep50;
	end
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_371)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %278*/
	/*   store i32 %276, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		memory_controller_address_a = main_lrph27i_scevgep235_reg;
	end
	/* main: %278*/
	/*   store i32 %279, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_374)) begin
		memory_controller_address_a = main_272_scevgep50_reg;
	end
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_380)) begin
		memory_controller_address_a = main_282_293;
	end
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		memory_controller_address_a = main_282_scevgep61;
	end
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_385)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %297*/
	/*   store i32 %295, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %297*/
	/*   store i32 %298, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_388)) begin
		memory_controller_address_a = main_282_scevgep61_reg;
	end
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__299_390)) begin
		memory_controller_address_a = main_282_scevgep60_reg;
	end
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_393)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %303*/
	/*   store i32 %301, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %303*/
	/*   store i32 %304, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_396)) begin
		memory_controller_address_a = main_282_scevgep60_reg;
	end
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__305_398)) begin
		memory_controller_address_a = main_282_scevgep59_reg;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_401)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %309*/
	/*   store i32 %307, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %309*/
	/*   store i32 %310, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_404)) begin
		memory_controller_address_a = main_282_scevgep59_reg;
	end
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__311_406)) begin
		memory_controller_address_a = main_282_scevgep58_reg;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_409)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %315*/
	/*   store i32 %313, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %315*/
	/*   store i32 %316, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_412)) begin
		memory_controller_address_a = main_282_scevgep58_reg;
	end
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__317_414)) begin
		memory_controller_address_a = main_282_scevgep57_reg;
	end
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_417)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %321*/
	/*   store i32 %319, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %321*/
	/*   store i32 %322, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_420)) begin
		memory_controller_address_a = main_282_scevgep57_reg;
	end
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__323_422)) begin
		memory_controller_address_a = main_282_scevgep56_reg;
	end
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_425)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %327*/
	/*   store i32 %325, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %327*/
	/*   store i32 %328, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_428)) begin
		memory_controller_address_a = main_282_scevgep56_reg;
	end
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__329_430)) begin
		memory_controller_address_a = main_282_scevgep55_reg;
	end
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_433)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %333*/
	/*   store i32 %331, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %333*/
	/*   store i32 %334, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_436)) begin
		memory_controller_address_a = main_282_scevgep55_reg;
	end
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__335_438)) begin
		memory_controller_address_a = main_282_scevgep54_reg;
	end
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_441)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %339*/
	/*   store i32 %337, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %339*/
	/*   store i32 %340, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_444)) begin
		memory_controller_address_a = main_282_scevgep54_reg;
	end
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__341_446)) begin
		memory_controller_address_a = main_282_scevgep53_reg;
	end
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_449)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %345*/
	/*   store i32 %343, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %345*/
	/*   store i32 %346, i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_452)) begin
		memory_controller_address_a = main_282_scevgep53_reg;
	end
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_490)) begin
		memory_controller_address_a = main_356_358;
	end
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_491)) begin
		memory_controller_address_a = main_356_scevgep66;
	end
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_494)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %362*/
	/*   store i32 %360, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		memory_controller_address_a = main_lrph27i_scevgep234_reg;
	end
	/* main: %362*/
	/*   store i32 %363, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_497)) begin
		memory_controller_address_a = main_356_scevgep66_reg;
	end
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_503)) begin
		memory_controller_address_a = main_366_377;
	end
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		memory_controller_address_a = main_366_scevgep77;
	end
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_508)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %381*/
	/*   store i32 %379, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %381*/
	/*   store i32 %382, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_511)) begin
		memory_controller_address_a = main_366_scevgep77_reg;
	end
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__383_513)) begin
		memory_controller_address_a = main_366_scevgep76_reg;
	end
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_516)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %387*/
	/*   store i32 %385, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %387*/
	/*   store i32 %388, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_519)) begin
		memory_controller_address_a = main_366_scevgep76_reg;
	end
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__389_521)) begin
		memory_controller_address_a = main_366_scevgep75_reg;
	end
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_524)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %393*/
	/*   store i32 %391, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %393*/
	/*   store i32 %394, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_527)) begin
		memory_controller_address_a = main_366_scevgep75_reg;
	end
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__395_529)) begin
		memory_controller_address_a = main_366_scevgep74_reg;
	end
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_532)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %399*/
	/*   store i32 %397, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %399*/
	/*   store i32 %400, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_535)) begin
		memory_controller_address_a = main_366_scevgep74_reg;
	end
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__401_537)) begin
		memory_controller_address_a = main_366_scevgep73_reg;
	end
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_540)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %405*/
	/*   store i32 %403, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %405*/
	/*   store i32 %406, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_543)) begin
		memory_controller_address_a = main_366_scevgep73_reg;
	end
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_545)) begin
		memory_controller_address_a = main_366_scevgep72_reg;
	end
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_548)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %411*/
	/*   store i32 %409, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %411*/
	/*   store i32 %412, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_551)) begin
		memory_controller_address_a = main_366_scevgep72_reg;
	end
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__413_553)) begin
		memory_controller_address_a = main_366_scevgep71_reg;
	end
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_556)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %417*/
	/*   store i32 %415, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %417*/
	/*   store i32 %418, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_559)) begin
		memory_controller_address_a = main_366_scevgep71_reg;
	end
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__419_561)) begin
		memory_controller_address_a = main_366_scevgep70_reg;
	end
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_564)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %423*/
	/*   store i32 %421, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %423*/
	/*   store i32 %424, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_567)) begin
		memory_controller_address_a = main_366_scevgep70_reg;
	end
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__425_569)) begin
		memory_controller_address_a = main_366_scevgep69_reg;
	end
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_572)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %429*/
	/*   store i32 %427, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %429*/
	/*   store i32 %430, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_575)) begin
		memory_controller_address_a = main_366_scevgep69_reg;
	end
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_613)) begin
		memory_controller_address_a = main_440_442;
	end
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_614)) begin
		memory_controller_address_a = main_440_scevgep82;
	end
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_617)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %446*/
	/*   store i32 %444, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		memory_controller_address_a = main_lrph27i_scevgep233_reg;
	end
	/* main: %446*/
	/*   store i32 %447, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_620)) begin
		memory_controller_address_a = main_440_scevgep82_reg;
	end
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_626)) begin
		memory_controller_address_a = main_450_461;
	end
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		memory_controller_address_a = main_450_scevgep93;
	end
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_631)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %465*/
	/*   store i32 %463, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %465*/
	/*   store i32 %466, i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_634)) begin
		memory_controller_address_a = main_450_scevgep93_reg;
	end
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__467_636)) begin
		memory_controller_address_a = main_450_scevgep92_reg;
	end
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_639)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %471*/
	/*   store i32 %469, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %471*/
	/*   store i32 %472, i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_642)) begin
		memory_controller_address_a = main_450_scevgep92_reg;
	end
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__473_644)) begin
		memory_controller_address_a = main_450_scevgep91_reg;
	end
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_647)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %477*/
	/*   store i32 %475, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %477*/
	/*   store i32 %478, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_650)) begin
		memory_controller_address_a = main_450_scevgep91_reg;
	end
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__479_652)) begin
		memory_controller_address_a = main_450_scevgep90_reg;
	end
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_655)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %483*/
	/*   store i32 %481, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %483*/
	/*   store i32 %484, i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_658)) begin
		memory_controller_address_a = main_450_scevgep90_reg;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__485_660)) begin
		memory_controller_address_a = main_450_scevgep89_reg;
	end
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_663)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %489*/
	/*   store i32 %487, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %489*/
	/*   store i32 %490, i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_666)) begin
		memory_controller_address_a = main_450_scevgep89_reg;
	end
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__491_668)) begin
		memory_controller_address_a = main_450_scevgep88_reg;
	end
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_671)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %495*/
	/*   store i32 %493, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %495*/
	/*   store i32 %496, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_674)) begin
		memory_controller_address_a = main_450_scevgep88_reg;
	end
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__497_676)) begin
		memory_controller_address_a = main_450_scevgep87_reg;
	end
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_679)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %501*/
	/*   store i32 %499, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %501*/
	/*   store i32 %502, i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_682)) begin
		memory_controller_address_a = main_450_scevgep87_reg;
	end
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__503_684)) begin
		memory_controller_address_a = main_450_scevgep86_reg;
	end
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_687)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %507*/
	/*   store i32 %505, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %507*/
	/*   store i32 %508, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_690)) begin
		memory_controller_address_a = main_450_scevgep86_reg;
	end
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__509_692)) begin
		memory_controller_address_a = main_450_scevgep85_reg;
	end
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_695)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %513*/
	/*   store i32 %511, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %513*/
	/*   store i32 %514, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_698)) begin
		memory_controller_address_a = main_450_scevgep85_reg;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_736)) begin
		memory_controller_address_a = main_524_526;
	end
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_737)) begin
		memory_controller_address_a = main_524_scevgep98;
	end
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_740)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %530*/
	/*   store i32 %528, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		memory_controller_address_a = main_lrph27i_scevgep232_reg;
	end
	/* main: %530*/
	/*   store i32 %531, i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_743)) begin
		memory_controller_address_a = main_524_scevgep98_reg;
	end
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_749)) begin
		memory_controller_address_a = main_534_545;
	end
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		memory_controller_address_a = main_534_scevgep109;
	end
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_754)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %549*/
	/*   store i32 %547, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %549*/
	/*   store i32 %550, i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_757)) begin
		memory_controller_address_a = main_534_scevgep109_reg;
	end
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__551_759)) begin
		memory_controller_address_a = main_534_scevgep108_reg;
	end
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_762)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %555*/
	/*   store i32 %553, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %555*/
	/*   store i32 %556, i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_765)) begin
		memory_controller_address_a = main_534_scevgep108_reg;
	end
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__557_767)) begin
		memory_controller_address_a = main_534_scevgep107_reg;
	end
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_770)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %561*/
	/*   store i32 %559, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %561*/
	/*   store i32 %562, i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_773)) begin
		memory_controller_address_a = main_534_scevgep107_reg;
	end
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__563_775)) begin
		memory_controller_address_a = main_534_scevgep106_reg;
	end
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_778)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %567*/
	/*   store i32 %565, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %567*/
	/*   store i32 %568, i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_781)) begin
		memory_controller_address_a = main_534_scevgep106_reg;
	end
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__569_783)) begin
		memory_controller_address_a = main_534_scevgep105_reg;
	end
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_786)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %573*/
	/*   store i32 %571, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %573*/
	/*   store i32 %574, i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_789)) begin
		memory_controller_address_a = main_534_scevgep105_reg;
	end
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__575_791)) begin
		memory_controller_address_a = main_534_scevgep104_reg;
	end
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_794)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %579*/
	/*   store i32 %577, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %579*/
	/*   store i32 %580, i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_797)) begin
		memory_controller_address_a = main_534_scevgep104_reg;
	end
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_799)) begin
		memory_controller_address_a = main_534_scevgep103_reg;
	end
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_802)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %585*/
	/*   store i32 %583, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %585*/
	/*   store i32 %586, i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_805)) begin
		memory_controller_address_a = main_534_scevgep103_reg;
	end
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__587_807)) begin
		memory_controller_address_a = main_534_scevgep102_reg;
	end
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_810)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %591*/
	/*   store i32 %589, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %591*/
	/*   store i32 %592, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_813)) begin
		memory_controller_address_a = main_534_scevgep102_reg;
	end
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__593_815)) begin
		memory_controller_address_a = main_534_scevgep101_reg;
	end
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_818)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %597*/
	/*   store i32 %595, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %597*/
	/*   store i32 %598, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_821)) begin
		memory_controller_address_a = main_534_scevgep101_reg;
	end
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_859)) begin
		memory_controller_address_a = main_608_610;
	end
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_860)) begin
		memory_controller_address_a = main_608_scevgep114;
	end
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_863)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %614*/
	/*   store i32 %612, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		memory_controller_address_a = main_lrph27i_scevgep231_reg;
	end
	/* main: %614*/
	/*   store i32 %615, i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_866)) begin
		memory_controller_address_a = main_608_scevgep114_reg;
	end
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_872)) begin
		memory_controller_address_a = main_618_629;
	end
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		memory_controller_address_a = main_618_scevgep125;
	end
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_877)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %633*/
	/*   store i32 %631, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %633*/
	/*   store i32 %634, i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_880)) begin
		memory_controller_address_a = main_618_scevgep125_reg;
	end
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__635_882)) begin
		memory_controller_address_a = main_618_scevgep124_reg;
	end
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_885)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %639*/
	/*   store i32 %637, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %639*/
	/*   store i32 %640, i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_888)) begin
		memory_controller_address_a = main_618_scevgep124_reg;
	end
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__641_890)) begin
		memory_controller_address_a = main_618_scevgep123_reg;
	end
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_893)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %645*/
	/*   store i32 %643, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %645*/
	/*   store i32 %646, i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_896)) begin
		memory_controller_address_a = main_618_scevgep123_reg;
	end
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__647_898)) begin
		memory_controller_address_a = main_618_scevgep122_reg;
	end
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_901)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %651*/
	/*   store i32 %649, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %651*/
	/*   store i32 %652, i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_904)) begin
		memory_controller_address_a = main_618_scevgep122_reg;
	end
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__653_906)) begin
		memory_controller_address_a = main_618_scevgep121_reg;
	end
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_909)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %657*/
	/*   store i32 %655, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %657*/
	/*   store i32 %658, i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_912)) begin
		memory_controller_address_a = main_618_scevgep121_reg;
	end
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__659_914)) begin
		memory_controller_address_a = main_618_scevgep120_reg;
	end
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_917)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %663*/
	/*   store i32 %661, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %663*/
	/*   store i32 %664, i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_920)) begin
		memory_controller_address_a = main_618_scevgep120_reg;
	end
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__665_922)) begin
		memory_controller_address_a = main_618_scevgep119_reg;
	end
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_925)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %669*/
	/*   store i32 %667, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %669*/
	/*   store i32 %670, i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_928)) begin
		memory_controller_address_a = main_618_scevgep119_reg;
	end
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__671_930)) begin
		memory_controller_address_a = main_618_scevgep118_reg;
	end
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_933)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %675*/
	/*   store i32 %673, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %675*/
	/*   store i32 %676, i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_936)) begin
		memory_controller_address_a = main_618_scevgep118_reg;
	end
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__677_938)) begin
		memory_controller_address_a = main_618_scevgep117_reg;
	end
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_941)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %681*/
	/*   store i32 %679, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %681*/
	/*   store i32 %682, i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_944)) begin
		memory_controller_address_a = main_618_scevgep117_reg;
	end
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_982)) begin
		memory_controller_address_a = main_692_694;
	end
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_983)) begin
		memory_controller_address_a = main_692_scevgep130;
	end
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_986)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %698*/
	/*   store i32 %696, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		memory_controller_address_a = main_lrph27i_scevgep230_reg;
	end
	/* main: %698*/
	/*   store i32 %699, i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_989)) begin
		memory_controller_address_a = main_692_scevgep130_reg;
	end
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_995)) begin
		memory_controller_address_a = main_702_713;
	end
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		memory_controller_address_a = main_702_scevgep141;
	end
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1000)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %717*/
	/*   store i32 %715, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %717*/
	/*   store i32 %718, i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1003)) begin
		memory_controller_address_a = main_702_scevgep141_reg;
	end
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__719_1005)) begin
		memory_controller_address_a = main_702_scevgep140_reg;
	end
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1008)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %723*/
	/*   store i32 %721, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %723*/
	/*   store i32 %724, i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1011)) begin
		memory_controller_address_a = main_702_scevgep140_reg;
	end
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__725_1013)) begin
		memory_controller_address_a = main_702_scevgep139_reg;
	end
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1016)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %729*/
	/*   store i32 %727, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %729*/
	/*   store i32 %730, i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1019)) begin
		memory_controller_address_a = main_702_scevgep139_reg;
	end
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__731_1021)) begin
		memory_controller_address_a = main_702_scevgep138_reg;
	end
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1024)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %735*/
	/*   store i32 %733, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %735*/
	/*   store i32 %736, i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1027)) begin
		memory_controller_address_a = main_702_scevgep138_reg;
	end
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_1029)) begin
		memory_controller_address_a = main_702_scevgep137_reg;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1032)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %741*/
	/*   store i32 %739, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %741*/
	/*   store i32 %742, i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1035)) begin
		memory_controller_address_a = main_702_scevgep137_reg;
	end
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__743_1037)) begin
		memory_controller_address_a = main_702_scevgep136_reg;
	end
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1040)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %747*/
	/*   store i32 %745, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %747*/
	/*   store i32 %748, i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1043)) begin
		memory_controller_address_a = main_702_scevgep136_reg;
	end
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__749_1045)) begin
		memory_controller_address_a = main_702_scevgep135_reg;
	end
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1048)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %753*/
	/*   store i32 %751, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %753*/
	/*   store i32 %754, i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1051)) begin
		memory_controller_address_a = main_702_scevgep135_reg;
	end
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__755_1053)) begin
		memory_controller_address_a = main_702_scevgep134_reg;
	end
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1056)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %759*/
	/*   store i32 %757, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %759*/
	/*   store i32 %760, i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1059)) begin
		memory_controller_address_a = main_702_scevgep134_reg;
	end
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__761_1061)) begin
		memory_controller_address_a = main_702_scevgep133_reg;
	end
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1064)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %765*/
	/*   store i32 %763, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %765*/
	/*   store i32 %766, i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1067)) begin
		memory_controller_address_a = main_702_scevgep133_reg;
	end
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1105)) begin
		memory_controller_address_a = main_776_778;
	end
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1106)) begin
		memory_controller_address_a = main_776_scevgep146;
	end
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1109)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %782*/
	/*   store i32 %780, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		memory_controller_address_a = main_lrph27i_scevgep229_reg;
	end
	/* main: %782*/
	/*   store i32 %783, i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1112)) begin
		memory_controller_address_a = main_776_scevgep146_reg;
	end
	/* main: %sort.exit*/
	/*   %785 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		memory_controller_address_a = main_sortexit_scevgep3;
	end
	/* main: %790*/
	/*   %791 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		memory_controller_address_a = main_790_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   %1 = load i32* %scevgep240, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   store i32 %1, i32* %scevgep239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %46*/
	/*   store i32 %44, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %46*/
	/*   store i32 %47, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__48_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %52*/
	/*   store i32 %50, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %52*/
	/*   store i32 %53, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__54_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   store i32 %56, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   store i32 %59, i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__60_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %64*/
	/*   store i32 %62, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %64*/
	/*   store i32 %65, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %70*/
	/*   store i32 %68, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %70*/
	/*   store i32 %71, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_52)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__72_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %76*/
	/*   store i32 %74, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %76*/
	/*   store i32 %77, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_62)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %82*/
	/*   store i32 %80, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %82*/
	/*   store i32 %83, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %88*/
	/*   store i32 %86, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %88*/
	/*   store i32 %89, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_78)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_81)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %94*/
	/*   store i32 %92, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %94*/
	/*   store i32 %95, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_84)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_121)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_122)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_125)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %110*/
	/*   store i32 %108, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %110*/
	/*   store i32 %111, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_128)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_134)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_139)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %129*/
	/*   store i32 %127, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %129*/
	/*   store i32 %130, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_142)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__131_144)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %135*/
	/*   store i32 %133, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   store i32 %136, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_150)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__137_152)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_155)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %141*/
	/*   store i32 %139, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %141*/
	/*   store i32 %142, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_158)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_160)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_163)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %147*/
	/*   store i32 %145, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %147*/
	/*   store i32 %148, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_166)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__149_168)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_171)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %153*/
	/*   store i32 %151, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %153*/
	/*   store i32 %154, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_174)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__155_176)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_179)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %159*/
	/*   store i32 %157, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %159*/
	/*   store i32 %160, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_182)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__161_184)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_187)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %165*/
	/*   store i32 %163, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %165*/
	/*   store i32 %166, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_190)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__167_192)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_195)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %171*/
	/*   store i32 %169, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %171*/
	/*   store i32 %172, i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_198)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__173_200)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_203)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %177*/
	/*   store i32 %175, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %177*/
	/*   store i32 %178, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_206)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_244)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_245)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_248)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %194*/
	/*   store i32 %192, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %194*/
	/*   store i32 %195, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_251)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_257)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_262)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %213*/
	/*   store i32 %211, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %213*/
	/*   store i32 %214, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_265)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_267)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_270)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %219*/
	/*   store i32 %217, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %219*/
	/*   store i32 %220, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_273)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__221_275)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_278)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   store i32 %223, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_281)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__227_283)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_286)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %231*/
	/*   store i32 %229, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   store i32 %232, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_289)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_291)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_294)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %237*/
	/*   store i32 %235, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %237*/
	/*   store i32 %238, i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_297)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_299)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_302)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %243*/
	/*   store i32 %241, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %243*/
	/*   store i32 %244, i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_305)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__245_307)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_310)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %249*/
	/*   store i32 %247, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %249*/
	/*   store i32 %250, i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_313)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_315)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_318)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %255*/
	/*   store i32 %253, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %255*/
	/*   store i32 %256, i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_321)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__257_323)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_326)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %261*/
	/*   store i32 %259, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %261*/
	/*   store i32 %262, i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_329)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_367)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_368)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_371)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %278*/
	/*   store i32 %276, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %278*/
	/*   store i32 %279, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_374)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_380)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_385)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %297*/
	/*   store i32 %295, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %297*/
	/*   store i32 %298, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_388)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__299_390)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_393)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %303*/
	/*   store i32 %301, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %303*/
	/*   store i32 %304, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_396)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__305_398)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_401)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %309*/
	/*   store i32 %307, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %309*/
	/*   store i32 %310, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_404)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__311_406)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_409)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %315*/
	/*   store i32 %313, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %315*/
	/*   store i32 %316, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_412)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__317_414)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_417)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %321*/
	/*   store i32 %319, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %321*/
	/*   store i32 %322, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_420)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__323_422)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_425)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %327*/
	/*   store i32 %325, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %327*/
	/*   store i32 %328, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_428)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__329_430)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_433)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %333*/
	/*   store i32 %331, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %333*/
	/*   store i32 %334, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_436)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__335_438)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_441)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %339*/
	/*   store i32 %337, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %339*/
	/*   store i32 %340, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_444)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__341_446)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_449)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %345*/
	/*   store i32 %343, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %345*/
	/*   store i32 %346, i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_452)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_490)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_491)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_494)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %362*/
	/*   store i32 %360, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %362*/
	/*   store i32 %363, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_497)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_503)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_508)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %381*/
	/*   store i32 %379, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %381*/
	/*   store i32 %382, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_511)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__383_513)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_516)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %387*/
	/*   store i32 %385, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %387*/
	/*   store i32 %388, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_519)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__389_521)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_524)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %393*/
	/*   store i32 %391, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %393*/
	/*   store i32 %394, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_527)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__395_529)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_532)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %399*/
	/*   store i32 %397, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %399*/
	/*   store i32 %400, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_535)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__401_537)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_540)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %405*/
	/*   store i32 %403, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %405*/
	/*   store i32 %406, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_543)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_545)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_548)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %411*/
	/*   store i32 %409, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %411*/
	/*   store i32 %412, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_551)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__413_553)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_556)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %417*/
	/*   store i32 %415, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %417*/
	/*   store i32 %418, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_559)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__419_561)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_564)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %423*/
	/*   store i32 %421, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %423*/
	/*   store i32 %424, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_567)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__425_569)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_572)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %429*/
	/*   store i32 %427, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %429*/
	/*   store i32 %430, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_575)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_613)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_614)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_617)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %446*/
	/*   store i32 %444, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   store i32 %447, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_620)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_626)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_631)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %465*/
	/*   store i32 %463, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   store i32 %466, i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_634)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__467_636)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_639)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %471*/
	/*   store i32 %469, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %471*/
	/*   store i32 %472, i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_642)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__473_644)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_647)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %477*/
	/*   store i32 %475, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %477*/
	/*   store i32 %478, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_650)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__479_652)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_655)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %483*/
	/*   store i32 %481, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %483*/
	/*   store i32 %484, i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_658)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__485_660)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_663)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %489*/
	/*   store i32 %487, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %489*/
	/*   store i32 %490, i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_666)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__491_668)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_671)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %495*/
	/*   store i32 %493, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %495*/
	/*   store i32 %496, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_674)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__497_676)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_679)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %501*/
	/*   store i32 %499, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %501*/
	/*   store i32 %502, i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_682)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__503_684)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_687)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %507*/
	/*   store i32 %505, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %507*/
	/*   store i32 %508, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_690)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__509_692)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_695)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %513*/
	/*   store i32 %511, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %513*/
	/*   store i32 %514, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_698)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_736)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_737)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_740)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %530*/
	/*   store i32 %528, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %530*/
	/*   store i32 %531, i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_743)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_749)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_754)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %549*/
	/*   store i32 %547, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %549*/
	/*   store i32 %550, i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_757)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__551_759)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_762)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %555*/
	/*   store i32 %553, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %555*/
	/*   store i32 %556, i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_765)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__557_767)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_770)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %561*/
	/*   store i32 %559, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %561*/
	/*   store i32 %562, i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_773)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__563_775)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_778)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %567*/
	/*   store i32 %565, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %567*/
	/*   store i32 %568, i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_781)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__569_783)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_786)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %573*/
	/*   store i32 %571, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %573*/
	/*   store i32 %574, i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_789)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__575_791)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_794)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %579*/
	/*   store i32 %577, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %579*/
	/*   store i32 %580, i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_797)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_799)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_802)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %585*/
	/*   store i32 %583, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %585*/
	/*   store i32 %586, i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_805)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__587_807)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_810)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %591*/
	/*   store i32 %589, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %591*/
	/*   store i32 %592, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_813)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__593_815)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_818)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %597*/
	/*   store i32 %595, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %597*/
	/*   store i32 %598, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_821)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_859)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_860)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_863)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %614*/
	/*   store i32 %612, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %614*/
	/*   store i32 %615, i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_866)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_872)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_877)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %633*/
	/*   store i32 %631, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %633*/
	/*   store i32 %634, i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_880)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__635_882)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_885)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %639*/
	/*   store i32 %637, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %639*/
	/*   store i32 %640, i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_888)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__641_890)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_893)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %645*/
	/*   store i32 %643, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %645*/
	/*   store i32 %646, i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_896)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__647_898)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_901)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %651*/
	/*   store i32 %649, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %651*/
	/*   store i32 %652, i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_904)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__653_906)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_909)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %657*/
	/*   store i32 %655, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %657*/
	/*   store i32 %658, i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_912)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__659_914)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_917)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %663*/
	/*   store i32 %661, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %663*/
	/*   store i32 %664, i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_920)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__665_922)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_925)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %669*/
	/*   store i32 %667, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %669*/
	/*   store i32 %670, i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_928)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__671_930)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_933)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %675*/
	/*   store i32 %673, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %675*/
	/*   store i32 %676, i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_936)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__677_938)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_941)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %681*/
	/*   store i32 %679, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %681*/
	/*   store i32 %682, i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_944)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_982)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_983)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_986)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %698*/
	/*   store i32 %696, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   store i32 %699, i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_989)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_995)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1000)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %717*/
	/*   store i32 %715, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %717*/
	/*   store i32 %718, i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1003)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__719_1005)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1008)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %723*/
	/*   store i32 %721, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %723*/
	/*   store i32 %724, i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1011)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__725_1013)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1016)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %729*/
	/*   store i32 %727, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %729*/
	/*   store i32 %730, i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1019)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__731_1021)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1024)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %735*/
	/*   store i32 %733, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %735*/
	/*   store i32 %736, i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1027)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_1029)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1032)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %741*/
	/*   store i32 %739, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   store i32 %742, i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1035)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__743_1037)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1040)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %747*/
	/*   store i32 %745, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %747*/
	/*   store i32 %748, i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1043)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__749_1045)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1048)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %753*/
	/*   store i32 %751, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %753*/
	/*   store i32 %754, i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1051)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__755_1053)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1056)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %759*/
	/*   store i32 %757, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %759*/
	/*   store i32 %760, i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1059)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__761_1061)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1064)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %765*/
	/*   store i32 %763, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %765*/
	/*   store i32 %766, i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1067)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1105)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1106)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %782*/
	/*   store i32 %780, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   store i32 %783, i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1112)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sort.exit*/
	/*   %785 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %790*/
	/*   %791 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   store i32 %1, i32* %scevgep239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_3)) begin
		memory_controller_in_a = main_lrph128i_1;
	end
	/* main: %46*/
	/*   store i32 %44, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		memory_controller_in_a = main_31_44_reg;
	end
	/* main: %46*/
	/*   store i32 %47, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_20)) begin
		memory_controller_in_a = main_46_47_reg;
	end
	/* main: %52*/
	/*   store i32 %50, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		memory_controller_in_a = main_48_50_reg;
	end
	/* main: %52*/
	/*   store i32 %53, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_28)) begin
		memory_controller_in_a = main_52_53_reg;
	end
	/* main: %58*/
	/*   store i32 %56, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		memory_controller_in_a = main_54_56_reg;
	end
	/* main: %58*/
	/*   store i32 %59, i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_36)) begin
		memory_controller_in_a = main_58_59_reg;
	end
	/* main: %64*/
	/*   store i32 %62, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		memory_controller_in_a = main_60_62_reg;
	end
	/* main: %64*/
	/*   store i32 %65, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_44)) begin
		memory_controller_in_a = main_64_65_reg;
	end
	/* main: %70*/
	/*   store i32 %68, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		memory_controller_in_a = main_66_68_reg;
	end
	/* main: %70*/
	/*   store i32 %71, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_52)) begin
		memory_controller_in_a = main_70_71_reg;
	end
	/* main: %76*/
	/*   store i32 %74, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		memory_controller_in_a = main_72_74_reg;
	end
	/* main: %76*/
	/*   store i32 %77, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_60)) begin
		memory_controller_in_a = main_76_77_reg;
	end
	/* main: %82*/
	/*   store i32 %80, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		memory_controller_in_a = main_78_80_reg;
	end
	/* main: %82*/
	/*   store i32 %83, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		memory_controller_in_a = main_82_83_reg;
	end
	/* main: %88*/
	/*   store i32 %86, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		memory_controller_in_a = main_84_86_reg;
	end
	/* main: %88*/
	/*   store i32 %89, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_76)) begin
		memory_controller_in_a = main_88_89_reg;
	end
	/* main: %94*/
	/*   store i32 %92, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		memory_controller_in_a = main_90_92_reg;
	end
	/* main: %94*/
	/*   store i32 %95, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_84)) begin
		memory_controller_in_a = main_94_95_reg;
	end
	/* main: %110*/
	/*   store i32 %108, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		memory_controller_in_a = main_lrph34i_108_reg;
	end
	/* main: %110*/
	/*   store i32 %111, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_128)) begin
		memory_controller_in_a = main_110_111_reg;
	end
	/* main: %129*/
	/*   store i32 %127, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		memory_controller_in_a = main_114_127_reg;
	end
	/* main: %129*/
	/*   store i32 %130, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_142)) begin
		memory_controller_in_a = main_129_130_reg;
	end
	/* main: %135*/
	/*   store i32 %133, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		memory_controller_in_a = main_131_133_reg;
	end
	/* main: %135*/
	/*   store i32 %136, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_150)) begin
		memory_controller_in_a = main_135_136_reg;
	end
	/* main: %141*/
	/*   store i32 %139, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		memory_controller_in_a = main_137_139_reg;
	end
	/* main: %141*/
	/*   store i32 %142, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_158)) begin
		memory_controller_in_a = main_141_142_reg;
	end
	/* main: %147*/
	/*   store i32 %145, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		memory_controller_in_a = main_143_145_reg;
	end
	/* main: %147*/
	/*   store i32 %148, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_166)) begin
		memory_controller_in_a = main_147_148_reg;
	end
	/* main: %153*/
	/*   store i32 %151, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		memory_controller_in_a = main_149_151_reg;
	end
	/* main: %153*/
	/*   store i32 %154, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_174)) begin
		memory_controller_in_a = main_153_154_reg;
	end
	/* main: %159*/
	/*   store i32 %157, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		memory_controller_in_a = main_155_157_reg;
	end
	/* main: %159*/
	/*   store i32 %160, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_182)) begin
		memory_controller_in_a = main_159_160_reg;
	end
	/* main: %165*/
	/*   store i32 %163, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		memory_controller_in_a = main_161_163_reg;
	end
	/* main: %165*/
	/*   store i32 %166, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_190)) begin
		memory_controller_in_a = main_165_166_reg;
	end
	/* main: %171*/
	/*   store i32 %169, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		memory_controller_in_a = main_167_169_reg;
	end
	/* main: %171*/
	/*   store i32 %172, i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_198)) begin
		memory_controller_in_a = main_171_172_reg;
	end
	/* main: %177*/
	/*   store i32 %175, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		memory_controller_in_a = main_173_175_reg;
	end
	/* main: %177*/
	/*   store i32 %178, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_206)) begin
		memory_controller_in_a = main_177_178_reg;
	end
	/* main: %194*/
	/*   store i32 %192, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		memory_controller_in_a = main_188_192_reg;
	end
	/* main: %194*/
	/*   store i32 %195, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_251)) begin
		memory_controller_in_a = main_194_195_reg;
	end
	/* main: %213*/
	/*   store i32 %211, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		memory_controller_in_a = main_198_211_reg;
	end
	/* main: %213*/
	/*   store i32 %214, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_265)) begin
		memory_controller_in_a = main_213_214_reg;
	end
	/* main: %219*/
	/*   store i32 %217, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		memory_controller_in_a = main_215_217_reg;
	end
	/* main: %219*/
	/*   store i32 %220, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_273)) begin
		memory_controller_in_a = main_219_220_reg;
	end
	/* main: %225*/
	/*   store i32 %223, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		memory_controller_in_a = main_221_223_reg;
	end
	/* main: %225*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_281)) begin
		memory_controller_in_a = main_225_226_reg;
	end
	/* main: %231*/
	/*   store i32 %229, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		memory_controller_in_a = main_227_229_reg;
	end
	/* main: %231*/
	/*   store i32 %232, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_289)) begin
		memory_controller_in_a = main_231_232_reg;
	end
	/* main: %237*/
	/*   store i32 %235, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		memory_controller_in_a = main_233_235_reg;
	end
	/* main: %237*/
	/*   store i32 %238, i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_297)) begin
		memory_controller_in_a = main_237_238_reg;
	end
	/* main: %243*/
	/*   store i32 %241, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		memory_controller_in_a = main_239_241_reg;
	end
	/* main: %243*/
	/*   store i32 %244, i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_305)) begin
		memory_controller_in_a = main_243_244_reg;
	end
	/* main: %249*/
	/*   store i32 %247, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		memory_controller_in_a = main_245_247_reg;
	end
	/* main: %249*/
	/*   store i32 %250, i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_313)) begin
		memory_controller_in_a = main_249_250_reg;
	end
	/* main: %255*/
	/*   store i32 %253, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		memory_controller_in_a = main_251_253_reg;
	end
	/* main: %255*/
	/*   store i32 %256, i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_321)) begin
		memory_controller_in_a = main_255_256_reg;
	end
	/* main: %261*/
	/*   store i32 %259, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		memory_controller_in_a = main_257_259_reg;
	end
	/* main: %261*/
	/*   store i32 %262, i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_329)) begin
		memory_controller_in_a = main_261_262_reg;
	end
	/* main: %278*/
	/*   store i32 %276, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		memory_controller_in_a = main_272_276_reg;
	end
	/* main: %278*/
	/*   store i32 %279, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_374)) begin
		memory_controller_in_a = main_278_279_reg;
	end
	/* main: %297*/
	/*   store i32 %295, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		memory_controller_in_a = main_282_295_reg;
	end
	/* main: %297*/
	/*   store i32 %298, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_388)) begin
		memory_controller_in_a = main_297_298_reg;
	end
	/* main: %303*/
	/*   store i32 %301, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		memory_controller_in_a = main_299_301_reg;
	end
	/* main: %303*/
	/*   store i32 %304, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_396)) begin
		memory_controller_in_a = main_303_304_reg;
	end
	/* main: %309*/
	/*   store i32 %307, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		memory_controller_in_a = main_305_307_reg;
	end
	/* main: %309*/
	/*   store i32 %310, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_404)) begin
		memory_controller_in_a = main_309_310_reg;
	end
	/* main: %315*/
	/*   store i32 %313, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		memory_controller_in_a = main_311_313_reg;
	end
	/* main: %315*/
	/*   store i32 %316, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_412)) begin
		memory_controller_in_a = main_315_316_reg;
	end
	/* main: %321*/
	/*   store i32 %319, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		memory_controller_in_a = main_317_319_reg;
	end
	/* main: %321*/
	/*   store i32 %322, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_420)) begin
		memory_controller_in_a = main_321_322_reg;
	end
	/* main: %327*/
	/*   store i32 %325, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		memory_controller_in_a = main_323_325_reg;
	end
	/* main: %327*/
	/*   store i32 %328, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_428)) begin
		memory_controller_in_a = main_327_328_reg;
	end
	/* main: %333*/
	/*   store i32 %331, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		memory_controller_in_a = main_329_331_reg;
	end
	/* main: %333*/
	/*   store i32 %334, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_436)) begin
		memory_controller_in_a = main_333_334_reg;
	end
	/* main: %339*/
	/*   store i32 %337, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		memory_controller_in_a = main_335_337_reg;
	end
	/* main: %339*/
	/*   store i32 %340, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_444)) begin
		memory_controller_in_a = main_339_340_reg;
	end
	/* main: %345*/
	/*   store i32 %343, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		memory_controller_in_a = main_341_343_reg;
	end
	/* main: %345*/
	/*   store i32 %346, i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_452)) begin
		memory_controller_in_a = main_345_346_reg;
	end
	/* main: %362*/
	/*   store i32 %360, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		memory_controller_in_a = main_356_360_reg;
	end
	/* main: %362*/
	/*   store i32 %363, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_497)) begin
		memory_controller_in_a = main_362_363_reg;
	end
	/* main: %381*/
	/*   store i32 %379, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		memory_controller_in_a = main_366_379_reg;
	end
	/* main: %381*/
	/*   store i32 %382, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_511)) begin
		memory_controller_in_a = main_381_382_reg;
	end
	/* main: %387*/
	/*   store i32 %385, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		memory_controller_in_a = main_383_385_reg;
	end
	/* main: %387*/
	/*   store i32 %388, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_519)) begin
		memory_controller_in_a = main_387_388_reg;
	end
	/* main: %393*/
	/*   store i32 %391, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		memory_controller_in_a = main_389_391_reg;
	end
	/* main: %393*/
	/*   store i32 %394, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_527)) begin
		memory_controller_in_a = main_393_394_reg;
	end
	/* main: %399*/
	/*   store i32 %397, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		memory_controller_in_a = main_395_397_reg;
	end
	/* main: %399*/
	/*   store i32 %400, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_535)) begin
		memory_controller_in_a = main_399_400_reg;
	end
	/* main: %405*/
	/*   store i32 %403, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		memory_controller_in_a = main_401_403_reg;
	end
	/* main: %405*/
	/*   store i32 %406, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_543)) begin
		memory_controller_in_a = main_405_406_reg;
	end
	/* main: %411*/
	/*   store i32 %409, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		memory_controller_in_a = main_407_409_reg;
	end
	/* main: %411*/
	/*   store i32 %412, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_551)) begin
		memory_controller_in_a = main_411_412_reg;
	end
	/* main: %417*/
	/*   store i32 %415, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		memory_controller_in_a = main_413_415_reg;
	end
	/* main: %417*/
	/*   store i32 %418, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_559)) begin
		memory_controller_in_a = main_417_418_reg;
	end
	/* main: %423*/
	/*   store i32 %421, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		memory_controller_in_a = main_419_421_reg;
	end
	/* main: %423*/
	/*   store i32 %424, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_567)) begin
		memory_controller_in_a = main_423_424_reg;
	end
	/* main: %429*/
	/*   store i32 %427, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		memory_controller_in_a = main_425_427_reg;
	end
	/* main: %429*/
	/*   store i32 %430, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_575)) begin
		memory_controller_in_a = main_429_430_reg;
	end
	/* main: %446*/
	/*   store i32 %444, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		memory_controller_in_a = main_440_444_reg;
	end
	/* main: %446*/
	/*   store i32 %447, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_620)) begin
		memory_controller_in_a = main_446_447_reg;
	end
	/* main: %465*/
	/*   store i32 %463, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		memory_controller_in_a = main_450_463_reg;
	end
	/* main: %465*/
	/*   store i32 %466, i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_634)) begin
		memory_controller_in_a = main_465_466_reg;
	end
	/* main: %471*/
	/*   store i32 %469, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		memory_controller_in_a = main_467_469_reg;
	end
	/* main: %471*/
	/*   store i32 %472, i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_642)) begin
		memory_controller_in_a = main_471_472_reg;
	end
	/* main: %477*/
	/*   store i32 %475, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		memory_controller_in_a = main_473_475_reg;
	end
	/* main: %477*/
	/*   store i32 %478, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_650)) begin
		memory_controller_in_a = main_477_478_reg;
	end
	/* main: %483*/
	/*   store i32 %481, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		memory_controller_in_a = main_479_481_reg;
	end
	/* main: %483*/
	/*   store i32 %484, i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_658)) begin
		memory_controller_in_a = main_483_484_reg;
	end
	/* main: %489*/
	/*   store i32 %487, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		memory_controller_in_a = main_485_487_reg;
	end
	/* main: %489*/
	/*   store i32 %490, i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_666)) begin
		memory_controller_in_a = main_489_490_reg;
	end
	/* main: %495*/
	/*   store i32 %493, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		memory_controller_in_a = main_491_493_reg;
	end
	/* main: %495*/
	/*   store i32 %496, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_674)) begin
		memory_controller_in_a = main_495_496_reg;
	end
	/* main: %501*/
	/*   store i32 %499, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		memory_controller_in_a = main_497_499_reg;
	end
	/* main: %501*/
	/*   store i32 %502, i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_682)) begin
		memory_controller_in_a = main_501_502_reg;
	end
	/* main: %507*/
	/*   store i32 %505, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		memory_controller_in_a = main_503_505_reg;
	end
	/* main: %507*/
	/*   store i32 %508, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_690)) begin
		memory_controller_in_a = main_507_508_reg;
	end
	/* main: %513*/
	/*   store i32 %511, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		memory_controller_in_a = main_509_511_reg;
	end
	/* main: %513*/
	/*   store i32 %514, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_698)) begin
		memory_controller_in_a = main_513_514_reg;
	end
	/* main: %530*/
	/*   store i32 %528, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		memory_controller_in_a = main_524_528_reg;
	end
	/* main: %530*/
	/*   store i32 %531, i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_743)) begin
		memory_controller_in_a = main_530_531_reg;
	end
	/* main: %549*/
	/*   store i32 %547, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		memory_controller_in_a = main_534_547_reg;
	end
	/* main: %549*/
	/*   store i32 %550, i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_757)) begin
		memory_controller_in_a = main_549_550_reg;
	end
	/* main: %555*/
	/*   store i32 %553, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		memory_controller_in_a = main_551_553_reg;
	end
	/* main: %555*/
	/*   store i32 %556, i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_765)) begin
		memory_controller_in_a = main_555_556_reg;
	end
	/* main: %561*/
	/*   store i32 %559, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		memory_controller_in_a = main_557_559_reg;
	end
	/* main: %561*/
	/*   store i32 %562, i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_773)) begin
		memory_controller_in_a = main_561_562_reg;
	end
	/* main: %567*/
	/*   store i32 %565, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		memory_controller_in_a = main_563_565_reg;
	end
	/* main: %567*/
	/*   store i32 %568, i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_781)) begin
		memory_controller_in_a = main_567_568_reg;
	end
	/* main: %573*/
	/*   store i32 %571, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		memory_controller_in_a = main_569_571_reg;
	end
	/* main: %573*/
	/*   store i32 %574, i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_789)) begin
		memory_controller_in_a = main_573_574_reg;
	end
	/* main: %579*/
	/*   store i32 %577, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		memory_controller_in_a = main_575_577_reg;
	end
	/* main: %579*/
	/*   store i32 %580, i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_797)) begin
		memory_controller_in_a = main_579_580_reg;
	end
	/* main: %585*/
	/*   store i32 %583, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		memory_controller_in_a = main_581_583_reg;
	end
	/* main: %585*/
	/*   store i32 %586, i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_805)) begin
		memory_controller_in_a = main_585_586_reg;
	end
	/* main: %591*/
	/*   store i32 %589, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		memory_controller_in_a = main_587_589_reg;
	end
	/* main: %591*/
	/*   store i32 %592, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_813)) begin
		memory_controller_in_a = main_591_592_reg;
	end
	/* main: %597*/
	/*   store i32 %595, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		memory_controller_in_a = main_593_595_reg;
	end
	/* main: %597*/
	/*   store i32 %598, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_821)) begin
		memory_controller_in_a = main_597_598_reg;
	end
	/* main: %614*/
	/*   store i32 %612, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		memory_controller_in_a = main_608_612_reg;
	end
	/* main: %614*/
	/*   store i32 %615, i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_866)) begin
		memory_controller_in_a = main_614_615_reg;
	end
	/* main: %633*/
	/*   store i32 %631, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		memory_controller_in_a = main_618_631_reg;
	end
	/* main: %633*/
	/*   store i32 %634, i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_880)) begin
		memory_controller_in_a = main_633_634_reg;
	end
	/* main: %639*/
	/*   store i32 %637, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		memory_controller_in_a = main_635_637_reg;
	end
	/* main: %639*/
	/*   store i32 %640, i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_888)) begin
		memory_controller_in_a = main_639_640_reg;
	end
	/* main: %645*/
	/*   store i32 %643, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		memory_controller_in_a = main_641_643_reg;
	end
	/* main: %645*/
	/*   store i32 %646, i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_896)) begin
		memory_controller_in_a = main_645_646_reg;
	end
	/* main: %651*/
	/*   store i32 %649, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		memory_controller_in_a = main_647_649_reg;
	end
	/* main: %651*/
	/*   store i32 %652, i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_904)) begin
		memory_controller_in_a = main_651_652_reg;
	end
	/* main: %657*/
	/*   store i32 %655, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		memory_controller_in_a = main_653_655_reg;
	end
	/* main: %657*/
	/*   store i32 %658, i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_912)) begin
		memory_controller_in_a = main_657_658_reg;
	end
	/* main: %663*/
	/*   store i32 %661, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		memory_controller_in_a = main_659_661_reg;
	end
	/* main: %663*/
	/*   store i32 %664, i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_920)) begin
		memory_controller_in_a = main_663_664_reg;
	end
	/* main: %669*/
	/*   store i32 %667, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		memory_controller_in_a = main_665_667_reg;
	end
	/* main: %669*/
	/*   store i32 %670, i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_928)) begin
		memory_controller_in_a = main_669_670_reg;
	end
	/* main: %675*/
	/*   store i32 %673, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		memory_controller_in_a = main_671_673_reg;
	end
	/* main: %675*/
	/*   store i32 %676, i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_936)) begin
		memory_controller_in_a = main_675_676_reg;
	end
	/* main: %681*/
	/*   store i32 %679, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		memory_controller_in_a = main_677_679_reg;
	end
	/* main: %681*/
	/*   store i32 %682, i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_944)) begin
		memory_controller_in_a = main_681_682_reg;
	end
	/* main: %698*/
	/*   store i32 %696, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		memory_controller_in_a = main_692_696_reg;
	end
	/* main: %698*/
	/*   store i32 %699, i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_989)) begin
		memory_controller_in_a = main_698_699_reg;
	end
	/* main: %717*/
	/*   store i32 %715, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		memory_controller_in_a = main_702_715_reg;
	end
	/* main: %717*/
	/*   store i32 %718, i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1003)) begin
		memory_controller_in_a = main_717_718_reg;
	end
	/* main: %723*/
	/*   store i32 %721, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		memory_controller_in_a = main_719_721_reg;
	end
	/* main: %723*/
	/*   store i32 %724, i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1011)) begin
		memory_controller_in_a = main_723_724_reg;
	end
	/* main: %729*/
	/*   store i32 %727, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		memory_controller_in_a = main_725_727_reg;
	end
	/* main: %729*/
	/*   store i32 %730, i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1019)) begin
		memory_controller_in_a = main_729_730_reg;
	end
	/* main: %735*/
	/*   store i32 %733, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		memory_controller_in_a = main_731_733_reg;
	end
	/* main: %735*/
	/*   store i32 %736, i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1027)) begin
		memory_controller_in_a = main_735_736_reg;
	end
	/* main: %741*/
	/*   store i32 %739, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		memory_controller_in_a = main_737_739_reg;
	end
	/* main: %741*/
	/*   store i32 %742, i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1035)) begin
		memory_controller_in_a = main_741_742_reg;
	end
	/* main: %747*/
	/*   store i32 %745, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		memory_controller_in_a = main_743_745_reg;
	end
	/* main: %747*/
	/*   store i32 %748, i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1043)) begin
		memory_controller_in_a = main_747_748_reg;
	end
	/* main: %753*/
	/*   store i32 %751, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		memory_controller_in_a = main_749_751_reg;
	end
	/* main: %753*/
	/*   store i32 %754, i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1051)) begin
		memory_controller_in_a = main_753_754_reg;
	end
	/* main: %759*/
	/*   store i32 %757, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		memory_controller_in_a = main_755_757_reg;
	end
	/* main: %759*/
	/*   store i32 %760, i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1059)) begin
		memory_controller_in_a = main_759_760_reg;
	end
	/* main: %765*/
	/*   store i32 %763, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		memory_controller_in_a = main_761_763_reg;
	end
	/* main: %765*/
	/*   store i32 %766, i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1067)) begin
		memory_controller_in_a = main_765_766_reg;
	end
	/* main: %782*/
	/*   store i32 %780, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		memory_controller_in_a = main_776_780_reg;
	end
	/* main: %782*/
	/*   store i32 %783, i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1112)) begin
		memory_controller_in_a = main_782_783_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.lr.ph128.i*/
	/*   %1 = load i32* %scevgep240, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph128.i*/
	/*   store i32 %1, i32* %scevgep239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph128i_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %31*/
	/*   %43 = load i32* %42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %31*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__31_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %46*/
	/*   %47 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %46*/
	/*   store i32 %44, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %46*/
	/*   store i32 %47, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__46_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %48*/
	/*   %50 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__48_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %52*/
	/*   %53 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %52*/
	/*   store i32 %50, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %52*/
	/*   store i32 %53, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__52_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %54*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__54_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %59 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   store i32 %56, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   store i32 %59, i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %60*/
	/*   %62 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__60_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %64*/
	/*   %65 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %64*/
	/*   store i32 %62, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %64*/
	/*   store i32 %65, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__64_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %66*/
	/*   %68 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %70*/
	/*   %71 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %70*/
	/*   store i32 %68, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %70*/
	/*   store i32 %71, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__70_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %72*/
	/*   %74 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__72_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %76*/
	/*   %77 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %76*/
	/*   store i32 %74, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %76*/
	/*   store i32 %77, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__76_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %78*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %82*/
	/*   %83 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %82*/
	/*   store i32 %80, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %82*/
	/*   store i32 %83, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %84*/
	/*   %86 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %88*/
	/*   %89 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %88*/
	/*   store i32 %86, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %88*/
	/*   store i32 %89, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %90*/
	/*   %92 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %94*/
	/*   %95 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %94*/
	/*   store i32 %92, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %94*/
	/*   store i32 %95, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph34.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_121)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph34.i*/
	/*   %108 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph34i_122)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_125)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %110*/
	/*   store i32 %108, i32* %scevgep236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_127)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %110*/
	/*   store i32 %111, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__110_128)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %114*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_134)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %114*/
	/*   %127 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__114_136)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %129*/
	/*   %130 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_139)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %129*/
	/*   store i32 %127, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_141)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %129*/
	/*   store i32 %130, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__129_142)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %131*/
	/*   %133 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__131_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %135*/
	/*   %136 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %135*/
	/*   store i32 %133, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_149)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %135*/
	/*   store i32 %136, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %137*/
	/*   %139 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__137_152)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %141*/
	/*   %142 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_155)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %141*/
	/*   store i32 %139, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_157)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %141*/
	/*   store i32 %142, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__141_158)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %143*/
	/*   %145 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_160)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %147*/
	/*   %148 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_163)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %147*/
	/*   store i32 %145, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_165)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %147*/
	/*   store i32 %148, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__147_166)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %149*/
	/*   %151 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__149_168)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %153*/
	/*   %154 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_171)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %153*/
	/*   store i32 %151, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_173)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %153*/
	/*   store i32 %154, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_174)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %155*/
	/*   %157 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__155_176)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %159*/
	/*   %160 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_179)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %159*/
	/*   store i32 %157, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_181)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %159*/
	/*   store i32 %160, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__159_182)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %161*/
	/*   %163 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__161_184)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %165*/
	/*   %166 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_187)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %165*/
	/*   store i32 %163, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_189)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %165*/
	/*   store i32 %166, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__165_190)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %167*/
	/*   %169 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__167_192)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %171*/
	/*   %172 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_195)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %171*/
	/*   store i32 %169, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_197)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %171*/
	/*   store i32 %172, i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__171_198)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %173*/
	/*   %175 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__173_200)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %177*/
	/*   %178 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_203)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %177*/
	/*   store i32 %175, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_205)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %177*/
	/*   store i32 %178, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__177_206)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %188*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_244)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %188*/
	/*   %192 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__188_245)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %194*/
	/*   %195 = load i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_248)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %194*/
	/*   store i32 %192, i32* %scevgep237, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_250)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %194*/
	/*   store i32 %195, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__194_251)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %198*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_257)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %198*/
	/*   %211 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_259)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %213*/
	/*   %214 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_262)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %213*/
	/*   store i32 %211, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_264)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %213*/
	/*   store i32 %214, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__213_265)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %215*/
	/*   %217 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_267)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %219*/
	/*   %220 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_270)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %219*/
	/*   store i32 %217, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_272)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %219*/
	/*   store i32 %220, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__219_273)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %221*/
	/*   %223 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__221_275)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_278)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %225*/
	/*   store i32 %223, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_280)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %225*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_281)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %227*/
	/*   %229 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__227_283)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_286)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %231*/
	/*   store i32 %229, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_288)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %231*/
	/*   store i32 %232, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_289)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %233*/
	/*   %235 = load i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_291)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %237*/
	/*   %238 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_294)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %237*/
	/*   store i32 %235, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_296)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %237*/
	/*   store i32 %238, i32* %scevgep41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_297)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %239*/
	/*   %241 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_299)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %243*/
	/*   %244 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_302)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %243*/
	/*   store i32 %241, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_304)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %243*/
	/*   store i32 %244, i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__243_305)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %245*/
	/*   %247 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__245_307)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %249*/
	/*   %250 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_310)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %249*/
	/*   store i32 %247, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_312)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %249*/
	/*   store i32 %250, i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__249_313)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   %253 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_315)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %255*/
	/*   %256 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_318)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %255*/
	/*   store i32 %253, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_320)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %255*/
	/*   store i32 %256, i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__255_321)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %257*/
	/*   %259 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__257_323)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %261*/
	/*   %262 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_326)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %261*/
	/*   store i32 %259, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_328)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %261*/
	/*   store i32 %262, i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__261_329)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %272*/
	/*   %275 = load i32* %274, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_367)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %272*/
	/*   %276 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__272_368)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %278*/
	/*   %279 = load i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_371)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %278*/
	/*   store i32 %276, i32* %scevgep235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_373)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %278*/
	/*   store i32 %279, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__278_374)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %282*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_380)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %282*/
	/*   %295 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__282_382)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %297*/
	/*   %298 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_385)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %297*/
	/*   store i32 %295, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_387)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %297*/
	/*   store i32 %298, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__297_388)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %299*/
	/*   %301 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__299_390)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %303*/
	/*   %304 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_393)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %303*/
	/*   store i32 %301, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_395)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %303*/
	/*   store i32 %304, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__303_396)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %305*/
	/*   %307 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__305_398)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_401)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %309*/
	/*   store i32 %307, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_403)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %309*/
	/*   store i32 %310, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__309_404)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %311*/
	/*   %313 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__311_406)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_409)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %315*/
	/*   store i32 %313, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_411)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %315*/
	/*   store i32 %316, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__315_412)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %317*/
	/*   %319 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__317_414)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %321*/
	/*   %322 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_417)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %321*/
	/*   store i32 %319, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_419)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %321*/
	/*   store i32 %322, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__321_420)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %323*/
	/*   %325 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__323_422)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %327*/
	/*   %328 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_425)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %327*/
	/*   store i32 %325, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_427)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %327*/
	/*   store i32 %328, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__327_428)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %329*/
	/*   %331 = load i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__329_430)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %333*/
	/*   %334 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_433)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %333*/
	/*   store i32 %331, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_435)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %333*/
	/*   store i32 %334, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__333_436)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %335*/
	/*   %337 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__335_438)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %339*/
	/*   %340 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_441)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %339*/
	/*   store i32 %337, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_443)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %339*/
	/*   store i32 %340, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__339_444)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %341*/
	/*   %343 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__341_446)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %345*/
	/*   %346 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_449)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %345*/
	/*   store i32 %343, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_451)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %345*/
	/*   store i32 %346, i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__345_452)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %356*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_490)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %356*/
	/*   %360 = load i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__356_491)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %362*/
	/*   %363 = load i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_494)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %362*/
	/*   store i32 %360, i32* %scevgep234, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_496)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %362*/
	/*   store i32 %363, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__362_497)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %366*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_503)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %366*/
	/*   %379 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__366_505)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %381*/
	/*   %382 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_508)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %381*/
	/*   store i32 %379, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_510)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %381*/
	/*   store i32 %382, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__381_511)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %383*/
	/*   %385 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__383_513)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %387*/
	/*   %388 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_516)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %387*/
	/*   store i32 %385, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_518)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %387*/
	/*   store i32 %388, i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__387_519)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %389*/
	/*   %391 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__389_521)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %393*/
	/*   %394 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_524)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %393*/
	/*   store i32 %391, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_526)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %393*/
	/*   store i32 %394, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__393_527)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %395*/
	/*   %397 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__395_529)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %399*/
	/*   %400 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_532)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %399*/
	/*   store i32 %397, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_534)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %399*/
	/*   store i32 %400, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__399_535)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %401*/
	/*   %403 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__401_537)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %405*/
	/*   %406 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_540)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %405*/
	/*   store i32 %403, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_542)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %405*/
	/*   store i32 %406, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__405_543)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %407*/
	/*   %409 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_545)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %411*/
	/*   %412 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_548)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %411*/
	/*   store i32 %409, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_550)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %411*/
	/*   store i32 %412, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__411_551)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %413*/
	/*   %415 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__413_553)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %417*/
	/*   %418 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_556)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %417*/
	/*   store i32 %415, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_558)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %417*/
	/*   store i32 %418, i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__417_559)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %419*/
	/*   %421 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__419_561)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %423*/
	/*   %424 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_564)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %423*/
	/*   store i32 %421, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_566)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %423*/
	/*   store i32 %424, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__423_567)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %425*/
	/*   %427 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__425_569)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %429*/
	/*   %430 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_572)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %429*/
	/*   store i32 %427, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_574)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %429*/
	/*   store i32 %430, i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__429_575)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %440*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_613)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %440*/
	/*   %444 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__440_614)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   %447 = load i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_617)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   store i32 %444, i32* %scevgep233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_619)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   store i32 %447, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__446_620)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %450*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_626)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %450*/
	/*   %463 = load i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__450_628)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %465*/
	/*   %466 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_631)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %465*/
	/*   store i32 %463, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_633)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %465*/
	/*   store i32 %466, i32* %scevgep93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_634)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %467*/
	/*   %469 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__467_636)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %471*/
	/*   %472 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_639)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %471*/
	/*   store i32 %469, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_641)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %471*/
	/*   store i32 %472, i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__471_642)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %473*/
	/*   %475 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__473_644)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %477*/
	/*   %478 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_647)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %477*/
	/*   store i32 %475, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_649)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %477*/
	/*   store i32 %478, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__477_650)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %479*/
	/*   %481 = load i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__479_652)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %483*/
	/*   %484 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_655)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %483*/
	/*   store i32 %481, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_657)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %483*/
	/*   store i32 %484, i32* %scevgep90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__483_658)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__485_660)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %489*/
	/*   %490 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_663)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %489*/
	/*   store i32 %487, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_665)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %489*/
	/*   store i32 %490, i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__489_666)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %491*/
	/*   %493 = load i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__491_668)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %495*/
	/*   %496 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_671)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %495*/
	/*   store i32 %493, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_673)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %495*/
	/*   store i32 %496, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__495_674)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %497*/
	/*   %499 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__497_676)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %501*/
	/*   %502 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_679)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %501*/
	/*   store i32 %499, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_681)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %501*/
	/*   store i32 %502, i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__501_682)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %503*/
	/*   %505 = load i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__503_684)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %507*/
	/*   %508 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_687)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %507*/
	/*   store i32 %505, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_689)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %507*/
	/*   store i32 %508, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__507_690)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %509*/
	/*   %511 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__509_692)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %513*/
	/*   %514 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_695)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %513*/
	/*   store i32 %511, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_697)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %513*/
	/*   store i32 %514, i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__513_698)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_736)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %524*/
	/*   %528 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_737)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %530*/
	/*   %531 = load i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_740)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %530*/
	/*   store i32 %528, i32* %scevgep232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_742)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %530*/
	/*   store i32 %531, i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__530_743)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %534*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_749)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %534*/
	/*   %547 = load i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__534_751)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %549*/
	/*   %550 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_754)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %549*/
	/*   store i32 %547, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_756)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %549*/
	/*   store i32 %550, i32* %scevgep109, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_757)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %551*/
	/*   %553 = load i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__551_759)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %555*/
	/*   %556 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_762)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %555*/
	/*   store i32 %553, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_764)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %555*/
	/*   store i32 %556, i32* %scevgep108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__555_765)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %557*/
	/*   %559 = load i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__557_767)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %561*/
	/*   %562 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_770)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %561*/
	/*   store i32 %559, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_772)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %561*/
	/*   store i32 %562, i32* %scevgep107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__561_773)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %563*/
	/*   %565 = load i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__563_775)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %567*/
	/*   %568 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_778)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %567*/
	/*   store i32 %565, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_780)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %567*/
	/*   store i32 %568, i32* %scevgep106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__567_781)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %569*/
	/*   %571 = load i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__569_783)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %573*/
	/*   %574 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_786)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %573*/
	/*   store i32 %571, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_788)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %573*/
	/*   store i32 %574, i32* %scevgep105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__573_789)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %575*/
	/*   %577 = load i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__575_791)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %579*/
	/*   %580 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_794)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %579*/
	/*   store i32 %577, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_796)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %579*/
	/*   store i32 %580, i32* %scevgep104, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__579_797)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %581*/
	/*   %583 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_799)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %585*/
	/*   %586 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_802)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %585*/
	/*   store i32 %583, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_804)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %585*/
	/*   store i32 %586, i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__585_805)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %587*/
	/*   %589 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__587_807)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %591*/
	/*   %592 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_810)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %591*/
	/*   store i32 %589, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_812)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %591*/
	/*   store i32 %592, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__591_813)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %593*/
	/*   %595 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__593_815)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %597*/
	/*   %598 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_818)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %597*/
	/*   store i32 %595, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_820)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %597*/
	/*   store i32 %598, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__597_821)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %608*/
	/*   %611 = load i32* %610, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_859)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %608*/
	/*   %612 = load i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__608_860)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %614*/
	/*   %615 = load i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_863)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %614*/
	/*   store i32 %612, i32* %scevgep231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_865)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %614*/
	/*   store i32 %615, i32* %scevgep114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__614_866)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %618*/
	/*   %630 = load i32* %629, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_872)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %618*/
	/*   %631 = load i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__618_874)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %633*/
	/*   %634 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_877)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %633*/
	/*   store i32 %631, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_879)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %633*/
	/*   store i32 %634, i32* %scevgep125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__633_880)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %635*/
	/*   %637 = load i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__635_882)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %639*/
	/*   %640 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_885)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %639*/
	/*   store i32 %637, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_887)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %639*/
	/*   store i32 %640, i32* %scevgep124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__639_888)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %641*/
	/*   %643 = load i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__641_890)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %645*/
	/*   %646 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_893)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %645*/
	/*   store i32 %643, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_895)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %645*/
	/*   store i32 %646, i32* %scevgep123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__645_896)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %647*/
	/*   %649 = load i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__647_898)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %651*/
	/*   %652 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_901)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %651*/
	/*   store i32 %649, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_903)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %651*/
	/*   store i32 %652, i32* %scevgep122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__651_904)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %653*/
	/*   %655 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__653_906)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %657*/
	/*   %658 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_909)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %657*/
	/*   store i32 %655, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_911)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %657*/
	/*   store i32 %658, i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__657_912)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %659*/
	/*   %661 = load i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__659_914)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %663*/
	/*   %664 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_917)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %663*/
	/*   store i32 %661, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_919)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %663*/
	/*   store i32 %664, i32* %scevgep120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__663_920)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %665*/
	/*   %667 = load i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__665_922)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %669*/
	/*   %670 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_925)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %669*/
	/*   store i32 %667, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_927)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %669*/
	/*   store i32 %670, i32* %scevgep119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__669_928)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %671*/
	/*   %673 = load i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__671_930)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %675*/
	/*   %676 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_933)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %675*/
	/*   store i32 %673, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_935)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %675*/
	/*   store i32 %676, i32* %scevgep118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__675_936)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %677*/
	/*   %679 = load i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__677_938)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %681*/
	/*   %682 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_941)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %681*/
	/*   store i32 %679, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_943)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %681*/
	/*   store i32 %682, i32* %scevgep117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__681_944)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %692*/
	/*   %695 = load i32* %694, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_982)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %692*/
	/*   %696 = load i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_983)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %698*/
	/*   %699 = load i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_986)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %698*/
	/*   store i32 %696, i32* %scevgep230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_988)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %698*/
	/*   store i32 %699, i32* %scevgep130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_989)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %702*/
	/*   %714 = load i32* %713, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_995)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %702*/
	/*   %715 = load i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__702_997)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %717*/
	/*   %718 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1000)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %717*/
	/*   store i32 %715, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1002)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %717*/
	/*   store i32 %718, i32* %scevgep141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__717_1003)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %719*/
	/*   %721 = load i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__719_1005)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %723*/
	/*   %724 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1008)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %723*/
	/*   store i32 %721, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1010)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %723*/
	/*   store i32 %724, i32* %scevgep140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__723_1011)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %725*/
	/*   %727 = load i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__725_1013)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %729*/
	/*   %730 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1016)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %729*/
	/*   store i32 %727, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1018)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %729*/
	/*   store i32 %730, i32* %scevgep139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__729_1019)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %731*/
	/*   %733 = load i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__731_1021)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %735*/
	/*   %736 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1024)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %735*/
	/*   store i32 %733, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1026)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %735*/
	/*   store i32 %736, i32* %scevgep138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__735_1027)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %737*/
	/*   %739 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_1029)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1032)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %741*/
	/*   store i32 %739, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1034)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %741*/
	/*   store i32 %742, i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_1035)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %743*/
	/*   %745 = load i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__743_1037)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %747*/
	/*   %748 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1040)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %747*/
	/*   store i32 %745, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1042)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %747*/
	/*   store i32 %748, i32* %scevgep136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__747_1043)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %749*/
	/*   %751 = load i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__749_1045)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %753*/
	/*   %754 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1048)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %753*/
	/*   store i32 %751, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1050)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %753*/
	/*   store i32 %754, i32* %scevgep135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__753_1051)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %755*/
	/*   %757 = load i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__755_1053)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %759*/
	/*   %760 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1056)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %759*/
	/*   store i32 %757, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1058)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %759*/
	/*   store i32 %760, i32* %scevgep134, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__759_1059)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %761*/
	/*   %763 = load i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__761_1061)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %765*/
	/*   %766 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1064)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %765*/
	/*   store i32 %763, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1066)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %765*/
	/*   store i32 %766, i32* %scevgep133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__765_1067)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %776*/
	/*   %779 = load i32* %778, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %776*/
	/*   %780 = load i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__776_1106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %782*/
	/*   %783 = load i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %782*/
	/*   store i32 %780, i32* %scevgep229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %782*/
	/*   store i32 %783, i32* %scevgep146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_1112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sort.exit*/
	/*   %785 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sortexit_1115)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %790*/
	/*   %791 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__790_1119)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %794*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__794_1122)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
