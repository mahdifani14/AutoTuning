//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Dec  8 15:28:12 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @A1 = internal global [20 x [20 x i32]] [[20 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 1...
`define TAG_g_A1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_A1_a {`TAG_g_A1, 23'd0}
// @B1 = internal global [20 x [20 x i32]] [[20 x i32] [i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32...
`define TAG_g_B1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_B1_a {`TAG_g_B1, 23'd0}
// @resultAB1 = internal global [20 x [20 x i32]] zeroinitializer, align 4
`define TAG_g_resultAB1 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_resultAB1_a {`TAG_g_resultAB1, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [8:0] A1_address_a;
reg [8:0] A1_address_b;
reg A1_write_enable_a;
reg A1_write_enable_b;
reg [31:0] A1_in_a;
reg [31:0] A1_in_b;
wire [31:0] A1_out_a;
wire [31:0] A1_out_b;

// @A1 = internal global [20 x [20 x i32]] [[20 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 1...
ram_dual_port A1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( A1_address_a ),
	.address_b( A1_address_b ),
	.wren_a( A1_write_enable_a ),
	.wren_b( A1_write_enable_b ),
	.data_a( A1_in_a ),
	.data_b( A1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( A1_out_a ),
	.q_b( A1_out_b)
);
defparam A1.width_a = 32;
defparam A1.width_b = 32;
defparam A1.widthad_a = 9;
defparam A1.widthad_b = 9;
defparam A1.width_be_a = 1;
defparam A1.width_be_b = 1;
defparam A1.numwords_a = 400;
defparam A1.numwords_b = 400;
defparam A1.latency = ram_latency;
defparam A1.init_file = "A1.mif";

reg [8:0] B1_address_a;
reg [8:0] B1_address_b;
reg B1_write_enable_a;
reg B1_write_enable_b;
reg [31:0] B1_in_a;
reg [31:0] B1_in_b;
wire [31:0] B1_out_a;
wire [31:0] B1_out_b;

// @B1 = internal global [20 x [20 x i32]] [[20 x i32] [i32 400, i32 401, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 411, i32 412, i32 413, i32 414, i32 415, i32...
ram_dual_port B1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( B1_address_a ),
	.address_b( B1_address_b ),
	.wren_a( B1_write_enable_a ),
	.wren_b( B1_write_enable_b ),
	.data_a( B1_in_a ),
	.data_b( B1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( B1_out_a ),
	.q_b( B1_out_b)
);
defparam B1.width_a = 32;
defparam B1.width_b = 32;
defparam B1.widthad_a = 9;
defparam B1.widthad_b = 9;
defparam B1.width_be_a = 1;
defparam B1.width_be_b = 1;
defparam B1.numwords_a = 400;
defparam B1.numwords_b = 400;
defparam B1.latency = ram_latency;
defparam B1.init_file = "B1.mif";

reg [8:0] resultAB1_address_a;
reg [8:0] resultAB1_address_b;
reg resultAB1_write_enable_a;
reg resultAB1_write_enable_b;
reg [31:0] resultAB1_in_a;
reg [31:0] resultAB1_in_b;
wire [31:0] resultAB1_out_a;
wire [31:0] resultAB1_out_b;

// @resultAB1 = internal global [20 x [20 x i32]] zeroinitializer, align 4
ram_dual_port resultAB1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( resultAB1_address_a ),
	.address_b( resultAB1_address_b ),
	.wren_a( resultAB1_write_enable_a ),
	.wren_b( resultAB1_write_enable_b ),
	.data_a( resultAB1_in_a ),
	.data_b( resultAB1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( resultAB1_out_a ),
	.q_b( resultAB1_out_b)
);
defparam resultAB1.width_a = 32;
defparam resultAB1.width_b = 32;
defparam resultAB1.widthad_a = 9;
defparam resultAB1.widthad_b = 9;
defparam resultAB1.width_be_a = 1;
defparam resultAB1.width_be_b = 1;
defparam resultAB1.numwords_a = 400;
defparam resultAB1.numwords_b = 400;
defparam resultAB1.latency = ram_latency;
defparam resultAB1.init_file = "resultAB1.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_A1_a;
assign select_A1_a = (tag_a == `TAG_g_A1);
reg [ram_latency:0] select_A1_reg_a;
wire [31:0] memory_controller_A1_out_a;
assign memory_controller_A1_out_a = {32{ select_A1_reg_a[ram_latency]}} & A1_out_a;

wire select_B1_a;
assign select_B1_a = (tag_a == `TAG_g_B1);
reg [ram_latency:0] select_B1_reg_a;
wire [31:0] memory_controller_B1_out_a;
assign memory_controller_B1_out_a = {32{ select_B1_reg_a[ram_latency]}} & B1_out_a;

wire select_resultAB1_a;
assign select_resultAB1_a = (tag_a == `TAG_g_resultAB1);
reg [ram_latency:0] select_resultAB1_reg_a;
wire [31:0] memory_controller_resultAB1_out_a;
assign memory_controller_resultAB1_out_a = {32{ select_resultAB1_reg_a[ram_latency]}} & resultAB1_out_a;

always @(*)
begin
	A1_address_a = memory_controller_address_a [9-1+2:2] & {9{select_A1_a}};
	A1_write_enable_a = memory_controller_write_enable_a & select_A1_a;
	A1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	B1_address_a = memory_controller_address_a [9-1+2:2] & {9{select_B1_a}};
	B1_write_enable_a = memory_controller_write_enable_a & select_B1_a;
	B1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	resultAB1_address_a = memory_controller_address_a [9-1+2:2] & {9{select_resultAB1_a}};
	resultAB1_write_enable_a = memory_controller_write_enable_a & select_resultAB1_a;
	resultAB1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_A1_reg_a[ram_latency]}} | {2{select_B1_reg_a[ram_latency]}} | {2{select_resultAB1_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_A1_out_a | memory_controller_B1_out_a | memory_controller_resultAB1_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_A1_reg_a[j+1] <= select_A1_reg_a[j];
select_B1_reg_a[j+1] <= select_B1_reg_a[j];
select_resultAB1_reg_a[j+1] <= select_resultAB1_reg_a[j];
end
always @(*)
begin
select_A1_reg_a[0] <= select_A1_a;
select_B1_reg_a[0] <= select_B1_a;
select_resultAB1_reg_a[0] <= select_resultAB1_a;
end

reg [2:0] select_not_struct_b;

wire select_A1_b;
assign select_A1_b = (tag_b == `TAG_g_A1);
reg [ram_latency:0] select_A1_reg_b;
wire [31:0] memory_controller_A1_out_b;
assign memory_controller_A1_out_b = {32{ select_A1_reg_b[ram_latency]}} & A1_out_b;

wire select_B1_b;
assign select_B1_b = (tag_b == `TAG_g_B1);
reg [ram_latency:0] select_B1_reg_b;
wire [31:0] memory_controller_B1_out_b;
assign memory_controller_B1_out_b = {32{ select_B1_reg_b[ram_latency]}} & B1_out_b;

wire select_resultAB1_b;
assign select_resultAB1_b = (tag_b == `TAG_g_resultAB1);
reg [ram_latency:0] select_resultAB1_reg_b;
wire [31:0] memory_controller_resultAB1_out_b;
assign memory_controller_resultAB1_out_b = {32{ select_resultAB1_reg_b[ram_latency]}} & resultAB1_out_b;

always @(*)
begin
	A1_address_b = memory_controller_address_b [9-1+2:2] & {9{select_A1_b}};
	A1_write_enable_b = memory_controller_write_enable_b & select_A1_b;
	A1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	B1_address_b = memory_controller_address_b [9-1+2:2] & {9{select_B1_b}};
	B1_write_enable_b = memory_controller_write_enable_b & select_B1_b;
	B1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	resultAB1_address_b = memory_controller_address_b [9-1+2:2] & {9{select_resultAB1_b}};
	resultAB1_write_enable_b = memory_controller_write_enable_b & select_resultAB1_b;
	resultAB1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_A1_reg_b[ram_latency]}} | {2{select_B1_reg_b[ram_latency]}} | {2{select_resultAB1_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_A1_out_b | memory_controller_B1_out_b | memory_controller_resultAB1_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_A1_reg_b[j+1] <= select_A1_reg_b[j];
select_B1_reg_b[j+1] <= select_B1_reg_b[j];
select_resultAB1_reg_b[j+1] <= select_resultAB1_reg_b[j];
end
always @(*)
begin
select_A1_reg_b[0] <= select_A1_b;
select_B1_reg_b[0] <= select_B1_b;
select_resultAB1_reg_b[0] <= select_resultAB1_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB_preheader1_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_preheader_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB__1_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB__1_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB__1_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB__1_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB_multiplyexit_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB_multiplyexit_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB__10_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB__12_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB__15_11 = 4'd11;
parameter [3:0] LEGUP_F_main_BB__17_12 = 4'd12;
parameter [3:0] LEGUP_F_main_BB__19_13 = 4'd13;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [63:0] main_preheader1_count05;
reg [63:0] main_preheader1_count05_reg;
reg [31:0] main_preheader1_i04;
reg [31:0] main_preheader1_i04_reg;
reg [63:0] main_preheader_count13;
reg [63:0] main_preheader_count13_reg;
reg [31:0] main_preheader_j02;
reg [31:0] main_preheader_j02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep5_reg;
reg [31:0] main_1_sum02i;
reg [31:0] main_1_sum02i_reg;
reg [31:0] main_1_k01i;
reg [31:0] main_1_k01i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [31:0] main_1_2;
reg [31:0] main_1_3;
reg [31:0] main_1_4;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg  main_1_exitcond1;
reg  main_1_exitcond1_reg;
reg [63:0] main_multiplyexit_7;
reg [63:0] main_multiplyexit_8;
reg [63:0] main_multiplyexit_8_reg;
reg [31:0] main_multiplyexit_9;
reg [31:0] main_multiplyexit_9_reg;
reg  main_multiplyexit_exitcond3;
reg  main_multiplyexit_exitcond3_reg;
reg [31:0] main_10_11;
reg  main_10_exitcond;
reg  main_12_14;
reg [31:0] main_19_20;
reg  lpm_mult_main_1_4_en;
reg [31:0] main_1_4_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %12*/
	/*   %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i64 %8) #1*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		$write("Result: %d\n", $signed(main_multiplyexit_8_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_multiplyexit_8_reg) === 1'bX) finish <= 0;
	end
	/* main: %15*/
	/*   %16 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__15_11)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %17*/
	/*   %18 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__17_12)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1_1;
LEGUP_F_main_BB__10_9:
	if ((main_10_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__12_10;
	else if ((main_10_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1_1;
LEGUP_F_main_BB__12_10:
	if ((main_12_14 == 1'd1))
		next_state = LEGUP_F_main_BB__15_11;
	else if ((main_12_14 == 1'd0))
		next_state = LEGUP_F_main_BB__17_12;
LEGUP_F_main_BB__15_11:
		next_state = LEGUP_F_main_BB__19_13;
LEGUP_F_main_BB__17_12:
		next_state = LEGUP_F_main_BB__19_13;
LEGUP_F_main_BB__19_13:
		next_state = LEGUP_0;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_5:
		next_state = LEGUP_F_main_BB__1_6;
LEGUP_F_main_BB__1_6:
	if ((main_1_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_multiplyexit_7;
	else if ((main_1_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB_multiplyexit_7:
		next_state = LEGUP_F_main_BB_multiplyexit_8;
LEGUP_F_main_BB_multiplyexit_8:
	if ((main_multiplyexit_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB__10_9;
	else if ((main_multiplyexit_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_2;
LEGUP_F_main_BB_preheader1_1:
		next_state = LEGUP_F_main_BB_preheader_2;
LEGUP_F_main_BB_preheader_2:
		next_state = LEGUP_F_main_BB__1_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader1*/
	/*   %count.05 = phi i64 [ 0, %0 ], [ %8, %10 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader1_count05 = 64'd0;
	end
	/* main: %.preheader1*/
	/*   %count.05 = phi i64 [ 0, %0 ], [ %8, %10 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__10_9) & (memory_controller_waitrequest == 1'd0)) & (main_10_exitcond == 1'd0))) */ begin
		main_preheader1_count05 = main_multiplyexit_8_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %count.05 = phi i64 [ 0, %0 ], [ %8, %10 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader1_count05_reg <= main_preheader1_count05;
		if (start == 1'b0 && ^(main_preheader1_count05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_count05_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %count.05 = phi i64 [ 0, %0 ], [ %8, %10 ]*/
	if ((((cur_state == LEGUP_F_main_BB__10_9) & (memory_controller_waitrequest == 1'd0)) & (main_10_exitcond == 1'd0))) begin
		main_preheader1_count05_reg <= main_preheader1_count05;
		if (start == 1'b0 && ^(main_preheader1_count05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_count05_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %i.04 = phi i32 [ 0, %0 ], [ %11, %10 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader1_i04 = 32'd0;
	end
	/* main: %.preheader1*/
	/*   %i.04 = phi i32 [ 0, %0 ], [ %11, %10 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__10_9) & (memory_controller_waitrequest == 1'd0)) & (main_10_exitcond == 1'd0))) */ begin
		main_preheader1_i04 = main_10_11;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %i.04 = phi i32 [ 0, %0 ], [ %11, %10 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheader1_i04_reg <= main_preheader1_i04;
		if (start == 1'b0 && ^(main_preheader1_i04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_i04_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %i.04 = phi i32 [ 0, %0 ], [ %11, %10 ]*/
	if ((((cur_state == LEGUP_F_main_BB__10_9) & (memory_controller_waitrequest == 1'd0)) & (main_10_exitcond == 1'd0))) begin
		main_preheader1_i04_reg <= main_preheader1_i04;
		if (start == 1'b0 && ^(main_preheader1_i04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_i04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %count.13 = phi i64 [ %count.05, %.preheader1 ], [ %8, %multiply.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_count13 = main_preheader1_count05_reg;
	end
	/* main: %.preheader*/
	/*   %count.13 = phi i64 [ %count.05, %.preheader1 ], [ %8, %multiply.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_multiplyexit_8) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyexit_exitcond3_reg == 1'd0))) */ begin
		main_preheader_count13 = main_multiplyexit_8_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %count.13 = phi i64 [ %count.05, %.preheader1 ], [ %8, %multiply.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_count13_reg <= main_preheader_count13;
		if (start == 1'b0 && ^(main_preheader_count13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_count13_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %count.13 = phi i64 [ %count.05, %.preheader1 ], [ %8, %multiply.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_multiplyexit_8) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyexit_exitcond3_reg == 1'd0))) begin
		main_preheader_count13_reg <= main_preheader_count13;
		if (start == 1'b0 && ^(main_preheader_count13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_count13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %j.02 = phi i32 [ 0, %.preheader1 ], [ %9, %multiply.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_j02 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %j.02 = phi i32 [ 0, %.preheader1 ], [ %9, %multiply.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_multiplyexit_8) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyexit_exitcond3_reg == 1'd0))) */ begin
		main_preheader_j02 = main_multiplyexit_9_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %j.02 = phi i32 [ 0, %.preheader1 ], [ %9, %multiply.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_j02_reg <= main_preheader_j02;
		if (start == 1'b0 && ^(main_preheader_j02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_j02_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %j.02 = phi i32 [ 0, %.preheader1 ], [ %9, %multiply.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_multiplyexit_8) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyexit_exitcond3_reg == 1'd0))) begin
		main_preheader_j02_reg <= main_preheader_j02;
		if (start == 1'b0 && ^(main_preheader_j02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_j02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep5 = getelementptr [20 x [20 x i32]]* @resultAB1, i32 0, i32 %i.04, i32 %j.02*/
		main_preheader_scevgep5 = (`TAG_g_resultAB1_a + ((80 * main_preheader1_i04_reg) + (4 * main_preheader_j02_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep5 = getelementptr [20 x [20 x i32]]* @resultAB1, i32 0, i32 %i.04, i32 %j.02*/
	if ((cur_state == LEGUP_F_main_BB_preheader_2)) begin
		main_preheader_scevgep5_reg <= main_preheader_scevgep5;
		if (start == 1'b0 && ^(main_preheader_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %sum.02.i = phi i32 [ %5, %1 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_sum02i = 32'd0;
	end
	/* main: %1*/
	/*   %sum.02.i = phi i32 [ %5, %1 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_6) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) */ begin
		main_1_sum02i = main_1_5;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %sum.02.i = phi i32 [ %5, %1 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_sum02i_reg <= main_1_sum02i;
		if (start == 1'b0 && ^(main_1_sum02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_sum02i_reg"); $finish; end
	end
	/* main: %1*/
	/*   %sum.02.i = phi i32 [ %5, %1 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_6) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) begin
		main_1_sum02i_reg <= main_1_sum02i;
		if (start == 1'b0 && ^(main_1_sum02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_sum02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %k.01.i = phi i32 [ %6, %1 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_k01i = 32'd0;
	end
	/* main: %1*/
	/*   %k.01.i = phi i32 [ %6, %1 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_6) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) */ begin
		main_1_k01i = main_1_6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %k.01.i = phi i32 [ %6, %1 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_k01i_reg <= main_1_k01i;
		if (start == 1'b0 && ^(main_1_k01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_k01i_reg"); $finish; end
	end
	/* main: %1*/
	/*   %k.01.i = phi i32 [ %6, %1 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_6) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond1_reg == 1'd0))) begin
		main_1_k01i_reg <= main_1_k01i;
		if (start == 1'b0 && ^(main_1_k01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_k01i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [20 x [20 x i32]]* @A1, i32 0, i32 %i.04, i32 %k.01.i*/
		main_1_scevgep2 = (`TAG_g_A1_a + ((80 * main_preheader1_i04_reg) + (4 * main_1_k01i_reg)));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [20 x [20 x i32]]* @B1, i32 0, i32 %k.01.i, i32 %j.02*/
		main_1_scevgep = (`TAG_g_B1_a + ((80 * main_1_k01i_reg) + (4 * main_preheader_j02_reg)));
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
		main_1_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep, align 4, !tbaa !1*/
		main_1_3 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_4 = main_1_4_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %4, %sum.02.i*/
		main_1_5 = (main_1_4 + main_1_sum02i_reg);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %4, %sum.02.i*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = add nsw i32 %k.01.i, 1*/
		main_1_6 = (main_1_k01i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = add nsw i32 %k.01.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %6, 20*/
		main_1_exitcond1 = (main_1_6 == 32'd20);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %6, 20*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_exitcond1_reg <= main_1_exitcond1;
		if (start == 1'b0 && ^(main_1_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.exit*/
	/*   %7 = sext i32 %5 to i64*/
		main_multiplyexit_7 = $signed(main_1_5_reg);
end
always @(*) begin
	/* main: %multiply.exit*/
	/*   %8 = add i64 %7, %count.13*/
		main_multiplyexit_8 = (main_multiplyexit_7 + main_preheader_count13_reg);
end
always @(posedge clk) begin
	/* main: %multiply.exit*/
	/*   %8 = add i64 %7, %count.13*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		main_multiplyexit_8_reg <= main_multiplyexit_8;
		if (start == 1'b0 && ^(main_multiplyexit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyexit_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.exit*/
	/*   %9 = add nsw i32 %j.02, 1*/
		main_multiplyexit_9 = (main_preheader_j02_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %multiply.exit*/
	/*   %9 = add nsw i32 %j.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		main_multiplyexit_9_reg <= main_multiplyexit_9;
		if (start == 1'b0 && ^(main_multiplyexit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyexit_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.exit*/
	/*   %exitcond3 = icmp eq i32 %9, 20*/
		main_multiplyexit_exitcond3 = (main_multiplyexit_9 == 32'd20);
end
always @(posedge clk) begin
	/* main: %multiply.exit*/
	/*   %exitcond3 = icmp eq i32 %9, 20*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		main_multiplyexit_exitcond3_reg <= main_multiplyexit_exitcond3;
		if (start == 1'b0 && ^(main_multiplyexit_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyexit_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %11 = add nsw i32 %i.04, 1*/
		main_10_11 = (main_preheader1_i04_reg + 32'd1);
end
always @(*) begin
	/* main: %10*/
	/*   %exitcond = icmp eq i32 %11, 20*/
		main_10_exitcond = (main_10_11 == 32'd20);
end
always @(*) begin
	/* main: %12*/
	/*   %14 = icmp eq i64 %8, 962122000*/
		main_12_14 = (main_multiplyexit_8_reg == 64'd962122000);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = trunc i64 %8 to i32*/
		main_19_20 = main_multiplyexit_8_reg[31:0];
end
always @(*) begin
	lpm_mult_main_1_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = mul nsw i32 %3, %2*/
	if ((lpm_mult_main_1_4_en == 1'd1)) begin
		main_1_4_stage0_reg <= (main_1_3 * main_1_2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %19*/
	/*   ret i32 %20*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.exit*/
	/*   store volatile i32 %5, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_address_a = main_1_scevgep2;
	end
	/* main: %multiply.exit*/
	/*   store volatile i32 %5, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		memory_controller_address_a = main_preheader_scevgep5_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.exit*/
	/*   store volatile i32 %5, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %multiply.exit*/
	/*   store volatile i32 %5, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		memory_controller_in_a = main_1_5_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load volatile i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.exit*/
	/*   store volatile i32 %5, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyexit_7)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_address_b = main_1_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %3 = load volatile i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %19*/
	/*   ret i32 %20*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		return_val <= main_19_20;
		if (start == 1'b0 && ^(main_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
