/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    7025U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    7018U,	// BUNDLE
    7303U,	// LIFETIME_START
    7005U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    10163U,	// ADD4
    10163U,	// ADD4TLS
    8602U,	// ADD4o
    10163U,	// ADD8
    10163U,	// ADD8TLS
    10163U,	// ADD8TLS_
    8602U,	// ADD8o
    10033U,	// ADDC
    10033U,	// ADDC8
    8542U,	// ADDC8o
    8542U,	// ADDCo
    10305U,	// ADDE
    10305U,	// ADDE8
    8692U,	// ADDE8o
    8692U,	// ADDEo
    536881587U,	// ADDI
    536881587U,	// ADDI8
    536880989U,	// ADDIC
    536880989U,	// ADDIC8
    536879484U,	// ADDICo
    536883794U,	// ADDIS
    536883794U,	// ADDIS8
    6951U,	// ADDISdtprelHA
    6934U,	// ADDISgotTprelHA
    6906U,	// ADDIStlsgdHA
    6920U,	// ADDIStlsldHA
    6894U,	// ADDIStocHA
    7130U,	// ADDIdtprelL
    7093U,	// ADDItlsgdL
    7105U,	// ADDItlsldL
    7083U,	// ADDItocL
    67119205U,	// ADDME
    67119205U,	// ADDME8
    67117571U,	// ADDME8o
    67117571U,	// ADDMEo
    67119242U,	// ADDZE
    67119242U,	// ADDZE8
    67117604U,	// ADDZE8o
    67117604U,	// ADDZEo
    148954U,	// ADJCALLSTACKDOWN
    4474349U,	// ADJCALLSTACKUP
    10237U,	// AND
    10237U,	// AND8
    8664U,	// AND8o
    10042U,	// ANDC
    10042U,	// ANDC8
    8549U,	// ANDC8o
    8549U,	// ANDCo
    1073751129U,	// ANDISo
    1073751129U,	// ANDISo8
    1073750664U,	// ANDIo
    1073750664U,	// ANDIo8
    7251U,	// ANDIo_1_EQ_BIT
    6844U,	// ANDIo_1_EQ_BIT8
    7267U,	// ANDIo_1_GT_BIT
    6861U,	// ANDIo_1_GT_BIT8
    8664U,	// ANDo
    142878091U,	// ATOMIC_CMP_SWAP_I16
    142878069U,	// ATOMIC_CMP_SWAP_I32
    6290U,	// ATOMIC_CMP_SWAP_I64
    6762U,	// ATOMIC_CMP_SWAP_I8
    6509U,	// ATOMIC_LOAD_ADD_I16
    6035U,	// ATOMIC_LOAD_ADD_I32
    6230U,	// ATOMIC_LOAD_ADD_I64
    6701U,	// ATOMIC_LOAD_ADD_I8
    6552U,	// ATOMIC_LOAD_AND_I16
    6078U,	// ATOMIC_LOAD_AND_I32
    6389U,	// ATOMIC_LOAD_AND_I64
    6742U,	// ATOMIC_LOAD_AND_I8
    6530U,	// ATOMIC_LOAD_NAND_I16
    6056U,	// ATOMIC_LOAD_NAND_I32
    6251U,	// ATOMIC_LOAD_NAND_I64
    6721U,	// ATOMIC_LOAD_NAND_I8
    6611U,	// ATOMIC_LOAD_OR_I16
    6137U,	// ATOMIC_LOAD_OR_I32
    6332U,	// ATOMIC_LOAD_OR_I64
    6801U,	// ATOMIC_LOAD_OR_I8
    6488U,	// ATOMIC_LOAD_SUB_I16
    6014U,	// ATOMIC_LOAD_SUB_I32
    6209U,	// ATOMIC_LOAD_SUB_I64
    6667U,	// ATOMIC_LOAD_SUB_I8
    6590U,	// ATOMIC_LOAD_XOR_I16
    6116U,	// ATOMIC_LOAD_XOR_I32
    6311U,	// ATOMIC_LOAD_XOR_I64
    6782U,	// ATOMIC_LOAD_XOR_I8
    6573U,	// ATOMIC_SWAP_I16
    6099U,	// ATOMIC_SWAP_I32
    6273U,	// ATOMIC_SWAP_I64
    6878U,	// ATOMIC_SWAP_I8
    157259U,	// B
    165389U,	// BA
    12591201U,	// BC
    441500U,	// BCC
    572572U,	// BCCA
    703644U,	// BCCCTR
    703644U,	// BCCCTR8
    834716U,	// BCCCTRL
    834716U,	// BCCCTRL8
    965788U,	// BCCL
    1096860U,	// BCCLA
    1227932U,	// BCCLR
    1359004U,	// BCCLRL
    1450131U,	// BCCTR
    1450131U,	// BCCTR8
    1450187U,	// BCCTR8n
    1450109U,	// BCCTRL
    1450109U,	// BCCTRL8
    1450167U,	// BCCTRL8n
    1450167U,	// BCCTRLn
    1450187U,	// BCCTRn
    12591209U,	// BCL
    1450121U,	// BCLR
    1450098U,	// BCLRL
    1450157U,	// BCLRLn
    1450178U,	// BCLRn
    155725U,	// BCLalways
    12591269U,	// BCLn
    7426U,	// BCTR
    7426U,	// BCTR8
    7388U,	// BCTRL
    7388U,	// BCTRL8
    12591262U,	// BCn
    161537U,	// BDNZ
    161537U,	// BDNZ8
    165440U,	// BDNZA
    164089U,	// BDNZAm
    163881U,	// BDNZAp
    158482U,	// BDNZL
    165421U,	// BDNZLA
    164073U,	// BDNZLAm
    163865U,	// BDNZLAp
    7419U,	// BDNZLR
    7419U,	// BDNZLR8
    7380U,	// BDNZLRL
    5966U,	// BDNZLRLm
    5934U,	// BDNZLRLp
    5982U,	// BDNZLRm
    5950U,	// BDNZLRp
    155912U,	// BDNZLm
    155704U,	// BDNZLp
    155926U,	// BDNZm
    155718U,	// BDNZp
    161479U,	// BDZ
    161479U,	// BDZ8
    165434U,	// BDZA
    164082U,	// BDZAm
    163874U,	// BDZAp
    158476U,	// BDZL
    165414U,	// BDZLA
    164065U,	// BDZLAm
    163857U,	// BDZLAp
    7413U,	// BDZLR
    7413U,	// BDZLR8
    7373U,	// BDZLRL
    5958U,	// BDZLRLm
    5926U,	// BDZLRLp
    5975U,	// BDZLRm
    5943U,	// BDZLRp
    155905U,	// BDZLm
    155697U,	// BDZLp
    155920U,	// BDZm
    155712U,	// BDZp
    158372U,	// BL
    158372U,	// BL8
    1600164U,	// BL8_NOP
    1624740U,	// BL8_NOP_TLS
    182948U,	// BL8_TLS
    182948U,	// BL8_TLS_
    165403U,	// BLA
    165403U,	// BLA8
    1607195U,	// BLA8_NOP
    7409U,	// BLR
    7368U,	// BLRL
    1610623425U,	// CLRLSLDI
    1610621556U,	// CLRLSLDIo
    2147494494U,	// CLRLSLWI
    2147492557U,	// CLRLSLWIo
    1610623460U,	// CLRRDI
    1610621583U,	// CLRRDIo
    2147494527U,	// CLRRWI
    2147492586U,	// CLRRWIo
    10263U,	// CMPD
    536881629U,	// CMPDI
    10222U,	// CMPLD
    1073752505U,	// CMPLDI
    13393U,	// CMPLW
    1073752662U,	// CMPLWI
    13423U,	// CMPW
    536881784U,	// CMPWI
    67119161U,	// CNTLZD
    67117547U,	// CNTLZDo
    67122449U,	// CNTLZW
    67118367U,	// CNTLZWo
    6474U,	// CR6SET
    6460U,	// CR6UNSET
    10250U,	// CRAND
    10048U,	// CRANDC
    13324U,	// CREQV
    10242U,	// CRNAND
    12456U,	// CRNOR
    12469U,	// CROR
    10132U,	// CRORC
    16790540U,	// CRSET
    16789704U,	// CRUNSET
    12488U,	// CRXOR
    58891U,	// DCBA
    59545U,	// DCBF
    59802U,	// DCBI
    62305U,	// DCBST
    62286U,	// DCBT
    62317U,	// DCBTST
    63164U,	// DCBZ
    60165U,	// DCBZL
    10291U,	// DIVD
    13246U,	// DIVDU
    9374U,	// DIVDUo
    8676U,	// DIVDo
    13579U,	// DIVW
    13293U,	// DIVWU
    9391U,	// DIVWUo
    9496U,	// DIVWo
    70252U,	// DSS
    7361U,	// DSSALL
    78696U,	// DST
    78696U,	// DST64
    78709U,	// DSTST
    78709U,	// DSTST64
    78722U,	// DSTSTT
    78722U,	// DSTSTT64
    78716U,	// DSTT
    78716U,	// DSTT64
    6966U,	// DYNALLOC
    6631U,	// DYNALLOC8
    6172U,	// EH_SjLj_LongJmp32
    6352U,	// EH_SjLj_LongJmp64
    6191U,	// EH_SjLj_SetJmp32
    6371U,	// EH_SjLj_SetJmp64
    155649U,	// EH_SjLj_Setup
    7394U,	// EIEIO
    13326U,	// EQV
    13326U,	// EQV8
    9406U,	// EQV8o
    9406U,	// EQVo
    1610623435U,	// EXTLDI
    1610621567U,	// EXTLDIo
    2147494512U,	// EXTLWI
    2147492577U,	// EXTLWIo
    1610623484U,	// EXTRDI
    1610621610U,	// EXTRDIo
    2147494551U,	// EXTRWI
    2147492613U,	// EXTRWIo
    67118776U,	// EXTSB
    67118776U,	// EXTSB8
    67118776U,	// EXTSB8_32_64
    67117352U,	// EXTSB8o
    67117352U,	// EXTSBo
    67119424U,	// EXTSH
    67119424U,	// EXTSH8
    67119424U,	// EXTSH8_32_64
    67117646U,	// EXTSH8o
    67117646U,	// EXTSHo
    67122335U,	// EXTSW
    67122335U,	// EXTSW_32_64
    67118330U,	// EXTSW_32_64o
    67118330U,	// EXTSWo
    67121420U,	// FABSD
    67118073U,	// FABSDo
    67121420U,	// FABSS
    67118073U,	// FABSSo
    10162U,	// FADD
    12649U,	// FADDS
    9251U,	// FADDSo
    8601U,	// FADDo
    0U,	// FADDrtz
    67119065U,	// FCFID
    67121537U,	// FCFIDS
    67118142U,	// FCFIDSo
    67122091U,	// FCFIDU
    67121803U,	// FCFIDUS
    67118194U,	// FCFIDUSo
    67118229U,	// FCFIDUo
    67117497U,	// FCFIDo
    13259U,	// FCMPUD
    13259U,	// FCMPUS
    11218U,	// FCPSGND
    9029U,	// FCPSGNDo
    11218U,	// FCPSGNS
    9029U,	// FCPSGNSo
    67119072U,	// FCTID
    67122951U,	// FCTIDUZ
    67118408U,	// FCTIDUZo
    67122892U,	// FCTIDZ
    67118392U,	// FCTIDZo
    67117505U,	// FCTIDo
    67122226U,	// FCTIW
    67122960U,	// FCTIWUZ
    67118418U,	// FCTIWUZo
    67122969U,	// FCTIWZ
    67118428U,	// FCTIWZo
    67118291U,	// FCTIWo
    13318U,	// FDIV
    12984U,	// FDIVS
    9340U,	// FDIVSo
    9399U,	// FDIVo
    10168U,	// FMADD
    12656U,	// FMADDS
    9259U,	// FMADDSo
    8608U,	// FMADDo
    67121300U,	// FMR
    67118055U,	// FMRo
    9996U,	// FMSUB
    12632U,	// FMSUBS
    9232U,	// FMSUBSo
    8514U,	// FMSUBo
    10994U,	// FMUL
    12901U,	// FMULS
    9313U,	// FMULSo
    8998U,	// FMULo
    67121426U,	// FNABSD
    67118080U,	// FNABSDo
    67121426U,	// FNABSS
    67118080U,	// FNABSSo
    67119305U,	// FNEGD
    67117628U,	// FNEGDo
    67119305U,	// FNEGS
    67117628U,	// FNEGSo
    10175U,	// FNMADD
    12664U,	// FNMADDS
    9268U,	// FNMADDSo
    8616U,	// FNMADDo
    10003U,	// FNMSUB
    12640U,	// FNMSUBS
    9241U,	// FNMSUBSo
    8522U,	// FNMSUBo
    67119220U,	// FRE
    67121617U,	// FRES
    67118151U,	// FRESo
    67117588U,	// FREo
    67120018U,	// FRIMD
    67117869U,	// FRIMDo
    67120018U,	// FRIMS
    67117869U,	// FRIMSo
    67120097U,	// FRIND
    67117902U,	// FRINDo
    67120097U,	// FRINS
    67117902U,	// FRINSo
    67120887U,	// FRIPD
    67117988U,	// FRIPDo
    67120887U,	// FRIPS
    67117988U,	// FRIPSo
    67122939U,	// FRIZD
    67118401U,	// FRIZDo
    67122939U,	// FRIZS
    67118401U,	// FRIZSo
    67121125U,	// FRSP
    67118019U,	// FRSPo
    67119233U,	// FRSQRTE
    67121623U,	// FRSQRTES
    67118158U,	// FRSQRTESo
    67117594U,	// FRSQRTEo
    10948U,	// FSELD
    8991U,	// FSELDo
    10948U,	// FSELS
    8991U,	// FSELSo
    67122010U,	// FSQRT
    67121795U,	// FSQRTS
    67118185U,	// FSQRTSo
    67118212U,	// FSQRTo
    9990U,	// FSUB
    12625U,	// FSUBS
    9224U,	// FSUBSo
    8507U,	// FSUBo
    7199U,	// GETtlsADDR
    7185U,	// GETtlsldADDR
    7143U,	// GetGBRO
    59808U,	// ICBI
    2147494504U,	// INSLWI
    2147492568U,	// INSLWIo
    1610623468U,	// INSRDI
    1610621592U,	// INSRDIo
    2147494535U,	// INSRWI
    2147492595U,	// INSRWIo
    10954U,	// ISEL
    10954U,	// ISEL8
    7334U,	// ISYNC
    20981276U,	// LA
    25175580U,	// LAx
    25179842U,	// LBZ
    25179842U,	// LBZ8
    29373428U,	// LBZU
    29373428U,	// LBZU8
    33568357U,	// LBZUX
    33568357U,	// LBZUX8
    75511458U,	// LBZX
    75511458U,	// LBZX8
    25176042U,	// LD
    75511225U,	// LDARX
    75511239U,	// LDBRX
    29373363U,	// LDU
    33568308U,	// LDUX
    75511153U,	// LDX
    7117U,	// LDgotTprelL
    6157U,	// LDgotTprelL32
    82010U,	// LDinto_toc
    7346U,	// LDtoc
    7293U,	// LDtocCPT
    7065U,	// LDtocJTI
    7075U,	// LDtocL
    25176007U,	// LFD
    29373334U,	// LFDU
    33568293U,	// LFDUX
    75511140U,	// LFDX
    75511105U,	// LFIWAX
    75511470U,	// LFIWZX
    25178599U,	// LFS
    29373394U,	// LFSU
    33568335U,	// LFSUX
    75511299U,	// LFSX
    25175574U,	// LHA
    25175574U,	// LHA8
    29373322U,	// LHAU
    29373322U,	// LHAU8
    33568272U,	// LHAUX
    33568272U,	// LHAUX8
    75511099U,	// LHAX
    75511099U,	// LHAX8
    75511254U,	// LHBRX
    25179860U,	// LHZ
    25179860U,	// LHZ8
    29373434U,	// LHZU
    29373434U,	// LHZU8
    33568364U,	// LHZUX
    33568364U,	// LHZUX8
    75511464U,	// LHZX
    75511464U,	// LHZX8
    37759500U,	// LI
    37759500U,	// LI8
    37761625U,	// LIS
    37761625U,	// LIS8
    25179236U,	// LMW
    75511119U,	// LVEBX
    75511179U,	// LVEHX
    75511429U,	// LVEWX
    75508460U,	// LVSL
    75510001U,	// LVSR
    75511418U,	// LVX
    75508472U,	// LVXL
    25175605U,	// LWA
    75511232U,	// LWARX
    33568279U,	// LWAUX
    75511113U,	// LWAX
    75511113U,	// LWAX_32
    25175605U,	// LWA_32
    75511269U,	// LWBRX
    25179937U,	// LWZ
    25179937U,	// LWZ8
    29373440U,	// LWZU
    29373440U,	// LWZU8
    33568371U,	// LWZUX
    33568371U,	// LWZUX8
    75511478U,	// LWZX
    75511478U,	// LWZX8
    7353U,	// LWZtoc
    75511158U,	// LXSDX
    75511065U,	// LXVD2X
    75511284U,	// LXVDSX
    75511082U,	// LXVW4X
    67119269U,	// MCRF
    143460U,	// MFCR
    143460U,	// MFCR8
    143614U,	// MFCTR
    143614U,	// MFCTR8
    143841U,	// MFFS
    143496U,	// MFLR
    143496U,	// MFLR8
    143587U,	// MFMSR
    41953451U,	// MFOCRF
    41953451U,	// MFOCRF8
    67121365U,	// MFSPR
    67118791U,	// MFTB
    1716437U,	// MFTB8
    1847509U,	// MFVRSAVE
    1847509U,	// MFVRSAVEv
    143474U,	// MFVSCR
    7340U,	// MSYNC
    67119291U,	// MTCRF
    67119291U,	// MTCRF8
    143621U,	// MTCTR
    143621U,	// MTCTR8
    143621U,	// MTCTR8loop
    143621U,	// MTCTRloop
    222565U,	// MTFSB0
    222573U,	// MTFSB1
    67119298U,	// MTFSF
    143502U,	// MTLR
    143502U,	// MTLR8
    67121386U,	// MTMSR
    67119133U,	// MTMSRD
    100531U,	// MTOCRF
    100531U,	// MTOCRF8
    67121372U,	// MTSPR
    139477U,	// MTVRSAVE
    237781U,	// MTVRSAVEv
    143482U,	// MTVSCR
    10194U,	// MULHD
    13219U,	// MULHDU
    9356U,	// MULHDUo
    8625U,	// MULHDo
    13355U,	// MULHW
    13279U,	// MULHWU
    9382U,	// MULHWUo
    9419U,	// MULHWo
    10215U,	// MULLD
    8649U,	// MULLDo
    536881673U,	// MULLI
    536881673U,	// MULLI8
    13386U,	// MULLW
    9435U,	// MULLWo
    7211U,	// MovePCtoLR
    6831U,	// MovePCtoLR8
    10244U,	// NAND
    10244U,	// NAND8
    8663U,	// NAND8o
    8663U,	// NANDo
    67119306U,	// NEG
    67119306U,	// NEG8
    67117629U,	// NEG8o
    67117629U,	// NEGo
    7405U,	// NOP
    5990U,	// NOP_GT_PWR6
    6002U,	// NOP_GT_PWR7
    12451U,	// NOR
    12451U,	// NOR8
    9197U,	// NOR8o
    9197U,	// NORo
    12444U,	// OR
    12444U,	// OR8
    9198U,	// OR8o
    10134U,	// ORC
    10134U,	// ORC8
    8588U,	// ORC8o
    8588U,	// ORCo
    1073752641U,	// ORI
    1073752641U,	// ORI8
    1073754719U,	// ORIS
    1073754719U,	// ORIS8
    9198U,	// ORo
    67119141U,	// POPCNTD
    67122367U,	// POPCNTW
    7283U,	// PPC32GOT
    7163U,	// RESTORE_CR
    7223U,	// RESTORE_CRBIT
    7035U,	// RESTORE_VRSAVE
    10925U,	// RLDCL
    8974U,	// RLDCLo
    12381U,	// RLDCR
    9174U,	// RLDCRo
    1610622820U,	// RLDIC
    1610623668U,	// RLDICL
    1610623668U,	// RLDICL_32_64
    1610621718U,	// RLDICLo
    1610625130U,	// RLDICR
    1610621918U,	// RLDICRo
    1610621316U,	// RLDICo
    247474704U,	// RLDIMI
    247472819U,	// RLDIMIo
    314583576U,	// RLWIMI
    314583576U,	// RLWIMI8
    314581692U,	// RLWIMI8o
    314581692U,	// RLWIMIo
    2147494808U,	// RLWINM
    2147494808U,	// RLWINM8
    2147492660U,	// RLWINM8o
    2147492660U,	// RLWINMo
    11168U,	// RLWNM
    9021U,	// RLWNMo
    1610623476U,	// ROTRDI
    1610621601U,	// ROTRDIo
    2147494543U,	// ROTRWI
    2147492604U,	// ROTRWIo
    141211U,	// SC
    6410U,	// SELECT_CC_F4
    6642U,	// SELECT_CC_F8
    6435U,	// SELECT_CC_I4
    6687U,	// SELECT_CC_I8
    6976U,	// SELECT_CC_VRRC
    6424U,	// SELECT_F4
    6656U,	// SELECT_F8
    6449U,	// SELECT_I4
    6820U,	// SELECT_I8
    6992U,	// SELECT_VRRC
    7318U,	// SLBIA
    141399U,	// SLBIE
    67119175U,	// SLBMFEE
    67119225U,	// SLBMTE
    10229U,	// SLD
    1610623429U,	// SLDI
    1610621560U,	// SLDIo
    8657U,	// SLDo
    13407U,	// SLW
    2147494498U,	// SLWI
    2147492561U,	// SLWIo
    9443U,	// SLWo
    7175U,	// SPILL_CR
    7238U,	// SPILL_CRBIT
    7051U,	// SPILL_VRSAVE
    10156U,	// SRAD
    1610623404U,	// SRADI
    1610621548U,	// SRADIo
    8594U,	// SRADo
    13332U,	// SRAW
    2147494470U,	// SRAWI
    2147492549U,	// SRAWIo
    9412U,	// SRAWo
    10272U,	// SRD
    1610623470U,	// SRDI
    1610621594U,	// SRDIo
    8670U,	// SRDo
    13430U,	// SRW
    2147494537U,	// SRWI
    2147492597U,	// SRWIo
    9449U,	// SRWo
    25175765U,	// STB
    25175765U,	// STB8
    29471632U,	// STBU
    29471632U,	// STBU8
    33666590U,	// STBUX
    33666590U,	// STBUX8
    75511134U,	// STBX
    75511134U,	// STBX8
    25176110U,	// STD
    75511246U,	// STDBRX
    75506984U,	// STDCX
    29471672U,	// STDU
    33666618U,	// STDUX
    75511173U,	// STDX
    25176012U,	// STFD
    29471644U,	// STFDU
    33666604U,	// STFDUX
    75511146U,	// STFDX
    75511444U,	// STFIWX
    25178604U,	// STFS
    29471704U,	// STFSU
    33666646U,	// STFSUX
    75511305U,	// STFSX
    25176407U,	// STH
    25176407U,	// STH8
    75511261U,	// STHBRX
    29471685U,	// STHU
    29471685U,	// STHU8
    33666632U,	// STHUX
    33666632U,	// STHUX8
    75511194U,	// STHX
    75511194U,	// STHX8
    25179241U,	// STMW
    75511126U,	// STVEBX
    75511186U,	// STVEHX
    75511436U,	// STVEWX
    75511423U,	// STVX
    75508478U,	// STVXL
    25179336U,	// STW
    25179336U,	// STW8
    75511276U,	// STWBRX
    75506992U,	// STWCX
    29471719U,	// STWU
    29471719U,	// STWU8
    33666654U,	// STWUX
    33666654U,	// STWUX8
    75511452U,	// STWX
    75511452U,	// STWX8
    75511165U,	// STXSDX
    75511073U,	// STXVD2X
    75511090U,	// STXVW4X
    10399U,	// SUBF
    10399U,	// SUBF8
    8757U,	// SUBF8o
    10063U,	// SUBFC
    10063U,	// SUBFC8
    8556U,	// SUBFC8o
    8556U,	// SUBFCo
    10320U,	// SUBFE
    10320U,	// SUBFE8
    8699U,	// SUBFE8o
    8699U,	// SUBFEo
    536881003U,	// SUBFIC
    536881003U,	// SUBFIC8
    67119212U,	// SUBFME
    67119212U,	// SUBFME8
    67117579U,	// SUBFME8o
    67117579U,	// SUBFMEo
    67119249U,	// SUBFZE
    67119249U,	// SUBFZE8
    67117612U,	// SUBFZE8o
    67117612U,	// SUBFZEo
    8757U,	// SUBFo
    536881574U,	// SUBI
    536880982U,	// SUBIC
    536879476U,	// SUBICo
    536883787U,	// SUBIS
    141198U,	// SYNC
    157259U,	// TAILB
    157259U,	// TAILB8
    165389U,	// TAILBA
    165389U,	// TAILBA8
    7426U,	// TAILBCTR
    7426U,	// TAILBCTR8
    67405310U,	// TCRETURNai
    67405217U,	// TCRETURNai8
    67397535U,	// TCRETURNdi
    67397039U,	// TCRETURNdi8
    67383376U,	// TCRETURNri
    67380669U,	// TCRETURNri8
    92202U,	// TD
    536963588U,	// TDI
    2074718U,	// TLBIE
    142012U,	// TLBIEL
    7326U,	// TLBSYNC
    7400U,	// TRAP
    95410U,	// TW
    536963743U,	// TWI
    67118539U,	// UPDATE_VRSAVE
    7152U,	// UpdateGBR
    13526U,	// VADDCUW
    11898U,	// VADDFP
    12588U,	// VADDSBS
    12828U,	// VADDSHS
    13010U,	// VADDSWS
    11052U,	// VADDUBM
    12616U,	// VADDUBS
    11101U,	// VADDUHM
    12856U,	// VADDUHS
    11209U,	// VADDUWM
    13037U,	// VADDUWS
    10257U,	// VAND
    10056U,	// VANDC
    9849U,	// VAVGSB
    10497U,	// VAVGSH
    13435U,	// VAVGSW
    9955U,	// VAVGUB
    10597U,	// VAVGUH
    13535U,	// VAVGUW
    381695484U,	// VCFSX
    402667004U,	// VCFSX_0
    381695553U,	// VCFUX
    402667073U,	// VCFUX_0
    11862U,	// VCMPBFP
    9081U,	// VCMPBFPo
    11961U,	// VCMPEQFP
    9102U,	// VCMPEQFPo
    9980U,	// VCMPEQUB
    8496U,	// VCMPEQUBo
    10622U,	// VCMPEQUH
    8790U,	// VCMPEQUHo
    13551U,	// VCMPEQUW
    9474U,	// VCMPEQUWo
    11915U,	// VCMPGEFP
    9091U,	// VCMPGEFPo
    11971U,	// VCMPGTFP
    9113U,	// VCMPGTFPo
    9902U,	// VCMPGTSB
    8477U,	// VCMPGTSBo
    10550U,	// VCMPGTSH
    8771U,	// VCMPGTSHo
    13461U,	// VCMPGTSW
    9455U,	// VCMPGTSWo
    10011U,	// VCMPGTUB
    8531U,	// VCMPGTUBo
    10632U,	// VCMPGTUH
    8801U,	// VCMPGTUHo
    13561U,	// VCMPGTUW
    9485U,	// VCMPGTUWo
    381694782U,	// VCTSXS
    402666302U,	// VCTSXS_0
    381694790U,	// VCTUXS
    402666310U,	// VCTUXS_0
    67120796U,	// VEXPTEFP
    67120770U,	// VLOGEFP
    11889U,	// VMADDFP
    11981U,	// VMAXFP
    9919U,	// VMAXSB
    10567U,	// VMAXSH
    13478U,	// VMAXSW
    10021U,	// VMAXUB
    10642U,	// VMAXUH
    13571U,	// VMAXUW
    12805U,	// VMHADDSHS
    12816U,	// VMHRADDSHS
    11953U,	// VMINFP
    9885U,	// VMINSB
    10533U,	// VMINSH
    13453U,	// VMINSW
    9963U,	// VMINUB
    10605U,	// VMINUH
    13543U,	// VMINUW
    11090U,	// VMLADDUHM
    9806U,	// VMRGHB
    10454U,	// VMRGHH
    13338U,	// VMRGHW
    9814U,	// VMRGLB
    10462U,	// VMRGLH
    13369U,	// VMRGLW
    11033U,	// VMSUMMBM
    11071U,	// VMSUMSHM
    12837U,	// VMSUMSHS
    11061U,	// VMSUMUBM
    11110U,	// VMSUMUHM
    12865U,	// VMSUMUHS
    9840U,	// VMULESB
    10488U,	// VMULESH
    9946U,	// VMULEUB
    10588U,	// VMULEUH
    9893U,	// VMULOSB
    10541U,	// VMULOSH
    9971U,	// VMULOUB
    10613U,	// VMULOUH
    11871U,	// VNMSUBFP
    12463U,	// VNOR
    12475U,	// VOR
    11175U,	// VPERM
    13737U,	// VPKPX
    12913U,	// VPKSHSS
    12948U,	// VPKSHUS
    12922U,	// VPKSWSS
    12966U,	// VPKSWUS
    11182U,	// VPKUHUM
    12957U,	// VPKUHUS
    11191U,	// VPKUWUM
    12975U,	// VPKUWUS
    67120789U,	// VREFP
    67119984U,	// VRFIM
    67120090U,	// VRFIN
    67120853U,	// VRFIP
    67122905U,	// VRFIZ
    9822U,	// VRLB
    10470U,	// VRLH
    13400U,	// VRLW
    67120806U,	// VRSQRTEFP
    10960U,	// VSEL
    10989U,	// VSL
    9828U,	// VSLB
    10784U,	// VSLDOI
    10476U,	// VSLH
    11239U,	// VSLO
    13406U,	// VSLW
    381691597U,	// VSPLTB
    381692239U,	// VSPLTH
    50341514U,	// VSPLTISB
    50342162U,	// VSPLTISH
    50345091U,	// VSPLTISW
    381695150U,	// VSPLTW
    12530U,	// VSR
    9799U,	// VSRAB
    10447U,	// VSRAH
    13331U,	// VSRAW
    9834U,	// VSRB
    10482U,	// VSRH
    11245U,	// VSRO
    13429U,	// VSRW
    13517U,	// VSUBCUW
    11881U,	// VSUBFP
    12579U,	// VSUBSBS
    12796U,	// VSUBSHS
    13001U,	// VSUBSWS
    11043U,	// VSUBUBM
    12607U,	// VSUBUBS
    11081U,	// VSUBUHM
    12847U,	// VSUBUHS
    11200U,	// VSUBUWM
    13028U,	// VSUBUWS
    12991U,	// VSUM2SWS
    12569U,	// VSUM4SBS
    12786U,	// VSUM4SHS
    12597U,	// VSUM4UBS
    13019U,	// VSUMSWS
    67122592U,	// VUPKHPX
    67118721U,	// VUPKHSB
    67119369U,	// VUPKHSH
    67122608U,	// VUPKLPX
    67118740U,	// VUPKLSB
    67119388U,	// VUPKLSH
    12495U,	// VXOR
    16789711U,	// V_SET0
    16789711U,	// V_SET0B
    16789711U,	// V_SET0H
    2110595U,	// V_SETALLONES
    2110595U,	// V_SETALLONESB
    2110595U,	// V_SETALLONESH
    144212U,	// WAIT
    12483U,	// XOR
    12483U,	// XOR8
    9203U,	// XOR8o
    1073752640U,	// XORI
    1073752640U,	// XORI8
    1073754718U,	// XORIS
    1073754718U,	// XORIS8
    9203U,	// XORo
    67120567U,	// XSABSDP
    11361U,	// XSADDDP
    11642U,	// XSCMPODP
    11774U,	// XSCMPUDP
    11602U,	// XSCPSGNDP
    67121094U,	// XSCVDPSP
    67121545U,	// XSCVDPSXDS
    67121910U,	// XSCVDPSXWS
    67121581U,	// XSCVDPUXDS
    67121946U,	// XSCVDPUXWS
    67120516U,	// XSCVSPDP
    67120243U,	// XSCVSXDDP
    67120265U,	// XSCVUXDDP
    11784U,	// XSDIVDP
    515910713U,	// XSMADDADP
    515910972U,	// XSMADDMDP
    11844U,	// XSMAXDP
    11624U,	// XSMINDP
    515910667U,	// XSMSUBADP
    515910926U,	// XSMSUBMDP
    11492U,	// XSMULDP
    67120547U,	// XSNABSDP
    67120338U,	// XSNEGDP
    515910689U,	// XSNMADDADP
    515910948U,	// XSNMADDMDP
    515910643U,	// XSNMSUBADP
    515910902U,	// XSNMSUBMDP
    67119656U,	// XSRDPI
    67118963U,	// XSRDPIC
    67119991U,	// XSRDPIM
    67120860U,	// XSRDPIP
    67122912U,	// XSRDPIZ
    67120298U,	// XSREDP
    67120314U,	// XSRSQRTEDP
    67120596U,	// XSSQRTDP
    11343U,	// XSSUBDP
    11793U,	// XSTDIVDP
    67120606U,	// XSTSQRTDP
    67120576U,	// XVABSDP
    67121141U,	// XVABSSP
    11370U,	// XVADDDP
    12084U,	// XVADDSP
    11672U,	// XVCMPEQDP
    9057U,	// XVCMPEQDPo
    12250U,	// XVCMPEQSP
    9143U,	// XVCMPEQSPo
    11423U,	// XVCMPGEDP
    9045U,	// XVCMPGEDPo
    12115U,	// XVCMPGESP
    9131U,	// XVCMPGESPo
    11721U,	// XVCMPGTDP
    9069U,	// XVCMPGTDPo
    12286U,	// XVCMPGTSP
    9162U,	// XVCMPGTSPo
    11613U,	// XVCPSGNDP
    12210U,	// XVCPSGNSP
    67121104U,	// XVCVDPSP
    67121557U,	// XVCVDPSXDS
    67121922U,	// XVCVDPSXWS
    67121593U,	// XVCVDPUXDS
    67121958U,	// XVCVDPUXWS
    67120526U,	// XVCVSPDP
    67121569U,	// XVCVSPSXDS
    67121934U,	// XVCVSPSXWS
    67121605U,	// XVCVSPUXDS
    67121970U,	// XVCVSPUXWS
    67120254U,	// XVCVSXDDP
    67120957U,	// XVCVSXDSP
    67120686U,	// XVCVSXWDP
    67121201U,	// XVCVSXWSP
    67120276U,	// XVCVUXDDP
    67120968U,	// XVCVUXDSP
    67120697U,	// XVCVUXWDP
    67121212U,	// XVCVUXWSP
    11813U,	// XVDIVDP
    12328U,	// XVDIVSP
    515910724U,	// XVMADDADP
    515911456U,	// XVMADDASP
    515910983U,	// XVMADDMDP
    515911591U,	// XVMADDMSP
    11853U,	// XVMAXDP
    12359U,	// XVMAXSP
    11633U,	// XVMINDP
    12221U,	// XVMINSP
    515910678U,	// XVMSUBADP
    515911433U,	// XVMSUBASP
    515910937U,	// XVMSUBMDP
    515911568U,	// XVMSUBMSP
    11501U,	// XVMULDP
    12155U,	// XVMULSP
    67120557U,	// XVNABSDP
    67121131U,	// XVNABSSP
    67120347U,	// XVNEGDP
    67121010U,	// XVNEGSP
    515910701U,	// XVNMADDADP
    515911444U,	// XVNMADDASP
    515910960U,	// XVNMADDMDP
    515911579U,	// XVNMADDMSP
    515910655U,	// XVNMSUBADP
    515911421U,	// XVNMSUBASP
    515910914U,	// XVNMSUBMDP
    515911556U,	// XVNMSUBMSP
    67119664U,	// XVRDPI
    67118972U,	// XVRDPIC
    67120000U,	// XVRDPIM
    67120869U,	// XVRDPIP
    67122921U,	// XVRDPIZ
    67120306U,	// XVREDP
    67120990U,	// XVRESP
    67119672U,	// XVRSPI
    67118981U,	// XVRSPIC
    67120009U,	// XVRSPIM
    67120878U,	// XVRSPIP
    67122930U,	// XVRSPIZ
    67120326U,	// XVRSQRTEDP
    67120998U,	// XVRSQRTESP
    67120628U,	// XVSQRTDP
    67121172U,	// XVSQRTSP
    11352U,	// XVSUBDP
    12075U,	// XVSUBSP
    11803U,	// XVTDIVDP
    12318U,	// XVTDIVSP
    67120617U,	// XVTSQRTDP
    67121161U,	// XVTSQRTSP
    10234U,	// XXLAND
    10039U,	// XXLANDC
    12448U,	// XXLNOR
    12441U,	// XXLOR
    12441U,	// XXLORf
    12480U,	// XXLXOR
    13346U,	// XXMRGHW
    13377U,	// XXMRGLW
    10707U,	// XXPERMDI
    10966U,	// XXSEL
    10829U,	// XXSLDWI
    2684368054U,	// XXSPLTW
    3221317421U,	// gBC
    3758188049U,	// gBCA
    94455U,	// gBCCTR
    92900U,	// gBCCTRL
    3221318312U,	// gBCL
    3758188064U,	// gBCLA
    94338U,	// gBCLR
    92893U,	// gBCLRL
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDICo
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDItlsgdL
    0U,	// ADDItlsldL
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    0U,	// ANDISo
    0U,	// ANDISo8
    0U,	// ANDIo
    0U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLRL
    1U,	// CLRLSLDI
    1U,	// CLRLSLDIo
    3U,	// CLRLSLWI
    3U,	// CLRLSLWIo
    0U,	// CLRRDI
    0U,	// CLRRDIo
    0U,	// CLRRWI
    0U,	// CLRRWIo
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZWo
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTST
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DIVD
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EIEIO
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    1U,	// EXTLDI
    1U,	// EXTLDIo
    3U,	// EXTLWI
    3U,	// EXTLWIo
    1U,	// EXTRDI
    1U,	// EXTRDIo
    3U,	// EXTRWI
    3U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    5U,	// FMADD
    5U,	// FMADDS
    5U,	// FMADDSo
    5U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    5U,	// FMSUB
    5U,	// FMSUBS
    5U,	// FMSUBSo
    5U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    5U,	// FNMADD
    5U,	// FNMADDS
    5U,	// FNMADDSo
    5U,	// FNMADDo
    5U,	// FNMSUB
    5U,	// FNMSUBS
    5U,	// FNMSUBSo
    5U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    5U,	// FSELD
    5U,	// FSELDo
    5U,	// FSELS
    5U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsldADDR
    0U,	// GetGBRO
    0U,	// ICBI
    3U,	// INSLWI
    3U,	// INSLWIo
    1U,	// INSRDI
    1U,	// INSRDIo
    3U,	// INSRWI
    3U,	// INSRWIo
    5U,	// ISEL
    5U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDBRX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDinto_toc
    0U,	// LDtoc
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSDX
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVW4X
    0U,	// MCRF
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFFS
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    0U,	// MULLI
    0U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    1U,	// RLDCL
    1U,	// RLDCLo
    1U,	// RLDCR
    1U,	// RLDCRo
    1U,	// RLDIC
    1U,	// RLDICL
    1U,	// RLDICL_32_64
    1U,	// RLDICLo
    1U,	// RLDICR
    1U,	// RLDICRo
    1U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    0U,	// RLWIMIo
    11U,	// RLWINM
    11U,	// RLWINM8
    11U,	// RLWINM8o
    11U,	// RLWINMo
    11U,	// RLWNM
    11U,	// RLWNMo
    0U,	// ROTRDI
    0U,	// ROTRDIo
    0U,	// ROTRWI
    0U,	// ROTRWIo
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_VRRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBMFEE
    0U,	// SLBMTE
    0U,	// SLD
    0U,	// SLDI
    0U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLWI
    0U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    0U,	// SRDI
    0U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRWI
    0U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDBRX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSDX
    0U,	// STXVD2X
    0U,	// STXVW4X
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    0U,	// SUBI
    0U,	// SUBIC
    0U,	// SUBICo
    0U,	// SUBIS
    0U,	// SYNC
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    0U,	// TDI
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBSYNC
    0U,	// TRAP
    0U,	// TW
    0U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VADDCUW
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VEXPTEFP
    0U,	// VLOGEFP
    5U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUH
    0U,	// VMAXUW
    5U,	// VMHADDSHS
    5U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUH
    0U,	// VMINUW
    5U,	// VMLADDUHM
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    5U,	// VMSUMMBM
    5U,	// VMSUMSHM
    5U,	// VMSUMSHS
    5U,	// VMSUMUBM
    5U,	// VMSUMUHM
    5U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOUB
    0U,	// VMULOUH
    5U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    5U,	// VPERM
    0U,	// VPKPX
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    5U,	// VSEL
    0U,	// VSL
    0U,	// VSLB
    3U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUW
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SET0B
    0U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSADDDP
    0U,	// XSCMPODP
    0U,	// XSCMPUDP
    0U,	// XSCPSGNDP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXWS
    0U,	// XSCVSPDP
    0U,	// XSCVSXDDP
    0U,	// XSCVUXDDP
    0U,	// XSDIVDP
    0U,	// XSMADDADP
    0U,	// XSMADDMDP
    0U,	// XSMAXDP
    0U,	// XSMINDP
    0U,	// XSMSUBADP
    0U,	// XSMSUBMDP
    0U,	// XSMULDP
    0U,	// XSNABSDP
    0U,	// XSNEGDP
    0U,	// XSNMADDADP
    0U,	// XSNMADDMDP
    0U,	// XSNMSUBADP
    0U,	// XSNMSUBMDP
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRSQRTEDP
    0U,	// XSSQRTDP
    0U,	// XSSUBDP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVSPDP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVMADDADP
    0U,	// XVMADDASP
    0U,	// XVMADDMDP
    0U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    0U,	// XVMSUBADP
    0U,	// XVMSUBASP
    0U,	// XVMSUBMDP
    0U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    0U,	// XVNMADDADP
    0U,	// XVNMADDASP
    0U,	// XVNMADDMDP
    0U,	// XVNMADDMSP
    0U,	// XVNMSUBADP
    0U,	// XVNMSUBASP
    0U,	// XVNMSUBMDP
    0U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORf
    0U,	// XXLXOR
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    7U,	// XXPERMDI
    5U,	// XXSEL
    7U,	// XXSLDWI
    0U,	// XXSPLTW
    0U,	// gBC
    0U,	// gBCA
    0U,	// gBCCTR
    0U,	// gBCCTRL
    0U,	// gBCL
    0U,	// gBCLA
    0U,	// gBCLR
    0U,	// gBCLRL
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'l', 'd', 32, '2', ',', 32, 0,
  /* 96 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 104 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 113 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 124 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 136 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 146 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 157 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 164 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 172 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 182 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 193 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 202 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 212 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 224 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 232 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 241 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 256 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 263 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 271 */ 'b', 'd', 'z', '-', 32, 0,
  /* 277 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 284 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 295 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 303 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 314 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 321 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 329 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 338 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 349 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 356 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 363 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 371 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 379 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 387 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 395 */ 'o', 'r', 'c', '.', 32, 0,
  /* 401 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 408 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 415 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 423 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 432 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 440 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 448 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 456 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 464 */ 's', 'l', 'd', '.', 32, 0,
  /* 470 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 477 */ 's', 'r', 'd', '.', 32, 0,
  /* 483 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 490 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 499 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 506 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 514 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 522 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 531 */ 'f', 'r', 'e', '.', 32, 0,
  /* 537 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 547 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 555 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 564 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 571 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 578 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 589 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 597 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 608 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 619 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 627 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 638 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 647 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 654 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 663 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 672 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 681 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 690 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 699 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 708 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 716 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 727 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 736 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 745 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 754 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 763 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 772 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 781 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 789 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 798 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 805 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 812 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 819 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 828 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 836 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 845 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 852 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 864 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 876 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 888 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 898 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 909 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 920 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 931 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 938 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 950 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 962 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 969 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 981 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 989 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 998 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1004 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1010 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1016 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1023 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1031 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1039 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1048 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1058 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1066 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1075 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1085 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1094 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1101 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1112 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1120 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1128 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1137 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1147 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1155 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1163 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1172 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1181 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1189 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1198 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1206 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1213 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1219 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1226 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1234 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1242 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1250 */ 's', 'l', 'w', '.', 32, 0,
  /* 1256 */ 's', 'r', 'w', '.', 32, 0,
  /* 1262 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1273 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1281 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1292 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1303 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1310 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1319 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1327 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1335 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1344 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1351 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1361 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1371 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1380 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1388 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1396 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1418 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1440 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1454 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1468 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1482 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1497 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1516 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1533 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 1546 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 1552 */ 'b', 'c', 'a', 32, 0,
  /* 1557 */ 'l', 'h', 'a', 32, 0,
  /* 1562 */ 'b', 'l', 'a', 32, 0,
  /* 1567 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 1573 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 1580 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 1588 */ 'l', 'w', 'a', 32, 0,
  /* 1593 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 1599 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 1606 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 1613 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 1621 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 1629 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 1635 */ 'v', 's', 'l', 'b', 32, 0,
  /* 1641 */ 'v', 's', 'r', 'b', 32, 0,
  /* 1647 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 1656 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 1664 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 1673 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 1683 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 1692 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 1700 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 1709 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 1719 */ 'e', 'x', 't', 's', 'b', 32, 0,
  /* 1726 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 1734 */ 'm', 'f', 't', 'b', 32, 0,
  /* 1740 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 1748 */ 's', 't', 'b', 32, 0,
  /* 1753 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 1762 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 1770 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 1778 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 1787 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 1797 */ 'f', 's', 'u', 'b', 32, 0,
  /* 1803 */ 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 1810 */ 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 1818 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 1828 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 1836 */ 'b', 'c', 32, 0,
  /* 1840 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 1846 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 1855 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 1863 */ 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 1870 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 1877 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 1884 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 1891 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 1898 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 1906 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 1915 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 1924 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 1933 */ 's', 'y', 'n', 'c', 32, 0,
  /* 1939 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 1946 */ 's', 'c', 32, 0,
  /* 1950 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 1963 */ 's', 'r', 'a', 'd', 32, 0,
  /* 1969 */ 'f', 'a', 'd', 'd', 32, 0,
  /* 1975 */ 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 1982 */ 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 1990 */ 'l', 'f', 'd', 32, 0,
  /* 1995 */ 's', 't', 'f', 'd', 32, 0,
  /* 2001 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 2008 */ 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 2015 */ 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 2022 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 2029 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 2036 */ 's', 'l', 'd', 32, 0,
  /* 2041 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 2049 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 2057 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 2064 */ 'v', 'a', 'n', 'd', 32, 0,
  /* 2070 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 2076 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 2084 */ 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 2093 */ 's', 't', 'd', 32, 0,
  /* 2098 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 2104 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 2112 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 2118 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 2127 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 2134 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 2141 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 2148 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 2155 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 2163 */ 'f', 'r', 'e', 32, 0,
  /* 2168 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 2176 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 2185 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 2192 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 2200 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 2206 */ 's', 'u', 'b', 'f', 32, 0,
  /* 2212 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 2218 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 2226 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 2234 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 2241 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 2248 */ 'f', 'n', 'e', 'g', 32, 0,
  /* 2254 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 2261 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 2269 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 2277 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 2283 */ 'v', 's', 'l', 'h', 32, 0,
  /* 2289 */ 'v', 's', 'r', 'h', 32, 0,
  /* 2295 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 2304 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 2312 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 2321 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 2331 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 2340 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 2348 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 2357 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 2367 */ 'e', 'x', 't', 's', 'h', 32, 0,
  /* 2374 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 2382 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 2390 */ 's', 't', 'h', 32, 0,
  /* 2395 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 2404 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 2412 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 2420 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 2429 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 2439 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 2449 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 2457 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 2463 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 2469 */ 's', 'u', 'b', 'i', 32, 0,
  /* 2475 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 2482 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 2488 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 2496 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 2506 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 2514 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 2524 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 2531 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 2539 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 2547 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 2555 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 2563 */ 't', 'd', 'i', 32, 0,
  /* 2568 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 2575 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 2583 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 2591 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 2599 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 2607 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 2615 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 2623 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 2629 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 2636 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 2645 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 2653 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 2663 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 2671 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 2679 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 2686 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 2694 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 2702 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 2710 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 2718 */ 't', 'w', 'i', 32, 0,
  /* 2723 */ 'b', 'l', 32, 0,
  /* 2727 */ 'b', 'c', 'l', 32, 0,
  /* 2732 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 2739 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 2747 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 2755 */ 'f', 's', 'e', 'l', 32, 0,
  /* 2761 */ 'i', 's', 'e', 'l', 32, 0,
  /* 2767 */ 'v', 's', 'e', 'l', 32, 0,
  /* 2773 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 2780 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 2787 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 2795 */ 'l', 'v', 's', 'l', 32, 0,
  /* 2801 */ 'f', 'm', 'u', 'l', 32, 0,
  /* 2807 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 2813 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 2820 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 2827 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 2833 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 2840 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 2850 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 2859 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 2868 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 2878 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 2888 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 2897 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2908 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2917 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 2927 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 2934 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 2943 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 2952 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 2961 */ 'f', 'r', 'i', 'm', 32, 0,
  /* 2967 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 2975 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 2982 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 2989 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 2998 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 3007 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 3016 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 3025 */ 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 3033 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 3040 */ 'f', 'r', 'i', 'n', 32, 0,
  /* 3046 */ 'v', 's', 'l', 'o', 32, 0,
  /* 3052 */ 'v', 's', 'r', 'o', 32, 0,
  /* 3058 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 3070 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 3082 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 3093 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 3104 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 3116 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 3128 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 3139 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 3150 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 3159 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 3168 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 3177 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 3186 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 3197 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 3208 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 3219 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 3230 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 3241 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 3249 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 3257 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 3269 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 3281 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 3290 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 3299 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 3308 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 3317 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 3329 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 3341 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 3352 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 3363 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 3375 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 3387 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 3398 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 3409 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 3420 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 3431 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 3440 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 3449 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 3459 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 3469 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 3479 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 3490 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 3500 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 3510 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 3519 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 3528 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 3539 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 3549 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 3560 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 3571 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 3581 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 3591 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 3600 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 3610 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 3620 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 3629 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 3640 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 3651 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 3660 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 3669 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 3678 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 3688 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 3696 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 3705 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 3713 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 3722 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 3732 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 3739 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 3749 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 3760 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 3768 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 3778 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 3788 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 3796 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 3803 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 3812 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 3821 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 3830 */ 'f', 'r', 'i', 'p', 32, 0,
  /* 3836 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 3848 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 3859 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 3871 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 3882 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 3891 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 3900 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 3911 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 3922 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 3933 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 3941 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 3953 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 3962 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 3971 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 3983 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 3994 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 4006 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 4017 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 4028 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 4037 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 4047 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 4057 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 4068 */ 'f', 'r', 's', 'p', 32, 0,
  /* 4074 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 4084 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 4093 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 4104 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 4115 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 4125 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 4135 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 4144 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 4155 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 4166 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 4175 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 4188 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 4195 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 4201 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 4209 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 4217 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 4225 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 4231 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 4237 */ 'm', 't', 'l', 'r', 32, 0,
  /* 4243 */ 'f', 'm', 'r', 32, 0,
  /* 4248 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 4255 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 4263 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 4270 */ 'v', 'n', 'o', 'r', 32, 0,
  /* 4276 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 4282 */ 'v', 'o', 'r', 32, 0,
  /* 4287 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 4295 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 4302 */ 'v', 'x', 'o', 'r', 32, 0,
  /* 4308 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 4315 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 4322 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 4329 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 4336 */ 'l', 'v', 's', 'r', 32, 0,
  /* 4342 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 4349 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 4356 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 4363 */ 'f', 'a', 'b', 's', 32, 0,
  /* 4369 */ 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 4376 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 4386 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 4395 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 4404 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 4414 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 4423 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 4432 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 4439 */ 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 4447 */ 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 4456 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 4463 */ 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 4471 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 4480 */ 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 4488 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 4500 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 4512 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 4524 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 4536 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 4548 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 4560 */ 'f', 'r', 'e', 's', 32, 0,
  /* 4566 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 4576 */ 'm', 'f', 'f', 's', 32, 0,
  /* 4582 */ 'l', 'f', 's', 32, 0,
  /* 4587 */ 's', 't', 'f', 's', 32, 0,
  /* 4593 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 4603 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 4612 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 4623 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 4635 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 4644 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 4654 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 4663 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 4672 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 4682 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 4689 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 4696 */ 'l', 'i', 's', 32, 0,
  /* 4701 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 4708 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 4715 */ 'd', 's', 's', 32, 0,
  /* 4720 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 4729 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 4738 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 4746 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 4755 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 4764 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 4773 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 4782 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 4791 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 4798 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 4808 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 4817 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 4826 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 4835 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 4844 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 4853 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 4865 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 4877 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 4889 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 4901 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 4913 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 4925 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 4933 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 4941 */ 'd', 'c', 'b', 't', 32, 0,
  /* 4947 */ 'w', 'a', 'i', 't', 32, 0,
  /* 4953 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 4960 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 4967 */ 'd', 's', 't', 32, 0,
  /* 4972 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 4980 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 4987 */ 'd', 's', 't', 't', 32, 0,
  /* 4993 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 5001 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 5007 */ 's', 't', 'b', 'u', 32, 0,
  /* 5013 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 5019 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 5026 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 5034 */ 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 5042 */ 'l', 'd', 'u', 32, 0,
  /* 5047 */ 's', 't', 'd', 'u', 32, 0,
  /* 5053 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 5060 */ 's', 't', 'h', 'u', 32, 0,
  /* 5066 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 5073 */ 'l', 'f', 's', 'u', 32, 0,
  /* 5079 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 5086 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 5094 */ 's', 't', 'w', 'u', 32, 0,
  /* 5100 */ 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 5107 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 5113 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 5119 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 5125 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 5131 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 5138 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 5145 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 5153 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 5162 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 5169 */ 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 5176 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 5184 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 5193 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 5200 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 5207 */ 'v', 'r', 'l', 'w', 32, 0,
  /* 5213 */ 'v', 's', 'l', 'w', 32, 0,
  /* 5219 */ 'l', 'm', 'w', 32, 0,
  /* 5224 */ 's', 't', 'm', 'w', 32, 0,
  /* 5230 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 5236 */ 'v', 's', 'r', 'w', 32, 0,
  /* 5242 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 5250 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 5260 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 5268 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 5278 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 5285 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 5293 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 5301 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 5310 */ 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 5319 */ 's', 't', 'w', 32, 0,
  /* 5324 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 5333 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 5342 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 5350 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 5358 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 5368 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 5378 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 5386 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 5392 */ 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 5400 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 5408 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 5417 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 5425 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 5434 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 5440 */ 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 5448 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 5454 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 5461 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 5469 */ 's', 't', 'b', 'x', 32, 0,
  /* 5475 */ 'l', 'f', 'd', 'x', 32, 0,
  /* 5481 */ 's', 't', 'f', 'd', 'x', 32, 0,
  /* 5488 */ 'l', 'd', 'x', 32, 0,
  /* 5493 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 5500 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 5508 */ 's', 't', 'd', 'x', 32, 0,
  /* 5514 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 5521 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 5529 */ 's', 't', 'h', 'x', 32, 0,
  /* 5535 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 5544 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 5551 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 5560 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 5567 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 5574 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 5581 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 5589 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 5596 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 5604 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 5611 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 5619 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 5627 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 5634 */ 'l', 'f', 's', 'x', 32, 0,
  /* 5640 */ 's', 't', 'f', 's', 'x', 32, 0,
  /* 5647 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 5654 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 5661 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 5668 */ 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 5675 */ 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 5683 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 5689 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 5696 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 5703 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 5710 */ 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 5717 */ 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 5725 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 5732 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 5739 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 5746 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 5753 */ 'l', 'v', 'x', 32, 0,
  /* 5758 */ 's', 't', 'v', 'x', 32, 0,
  /* 5764 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 5771 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 5779 */ 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 5787 */ 's', 't', 'w', 'x', 32, 0,
  /* 5793 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 5799 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 5805 */ 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 5813 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 5819 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 5825 */ 'l', 'b', 'z', 32, 0,
  /* 5830 */ 'b', 'd', 'z', 32, 0,
  /* 5835 */ 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 5843 */ 'l', 'h', 'z', 32, 0,
  /* 5848 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 5855 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 5864 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 5873 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 5882 */ 'f', 'r', 'i', 'z', 32, 0,
  /* 5888 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 5894 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 5903 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 5912 */ 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 5920 */ 'l', 'w', 'z', 32, 0,
  /* 5925 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 5933 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 5942 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 5949 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 5957 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 5965 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 5974 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 5981 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 5989 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 6001 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 6013 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 6034 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 6055 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 6077 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 6098 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 6115 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 6136 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 6156 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 6171 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 6190 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 6208 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 6229 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 6250 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 6272 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 6289 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 6310 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 6331 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 6351 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 6370 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 6388 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 6409 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 6423 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 6434 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 6448 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 6459 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 6473 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 6487 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 6508 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 6529 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 6551 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 6572 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 6589 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 6610 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 6630 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 6641 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 6655 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 6666 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 6686 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 6700 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 6720 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 6741 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 6761 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 6781 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 6800 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 6819 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 6830 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 6843 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 6860 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 6877 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 6893 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 6905 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 6919 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 6933 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 6950 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 6965 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 6975 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 6991 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 7004 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 7017 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 7024 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 7034 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 7050 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 7064 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 7074 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 7082 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 7092 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 7104 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 7116 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 7129 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 7142 */ '#', 'G', 'e', 't', 'G', 'B', 'R', 'O', 0,
  /* 7151 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 7162 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 7174 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 7184 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 7198 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 7210 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 7222 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 7237 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 7250 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 7266 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 7282 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 7292 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 7302 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 7317 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 7323 */ 'b', 0,
  /* 7325 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 7333 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 7339 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 7345 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 7352 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 7360 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 7367 */ 'b', 'l', 'r', 'l', 0,
  /* 7372 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 7379 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 7387 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 7393 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 7399 */ 't', 'r', 'a', 'p', 0,
  /* 7404 */ 'n', 'o', 'p', 0,
  /* 7408 */ 'b', 'l', 'r', 0,
  /* 7412 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 7418 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 7425 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 13) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISg...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O); 
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O); 
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O); 
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 6:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_
    printTLSCall(MI, 0, O); 
    break;
  case 7:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL, ICBI
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 8:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // LDinto_toc
    printMemRegImm(MI, 0, O); 
    return;
    break;
  case 11:
    // MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTRL, gBCL, gB...
    printU5ImmOperand(MI, 0, O); 
    break;
  case 12:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // MTVRSAVEv, STBU, STBU8, STBUX, STBUX8, STDU, STDUX, STFDU, STFDUX, STF...
    printOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 17) & 31) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' '; 
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // BCCA
    O << 'a'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 7:
    // BCCL
    O << 'l'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // BCCLA
    O << "la"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // BCCLR
    O << "lr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0"; 
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop"; 
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268"; 
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256"; 
    return;
    break;
  case 15:
    // TLBIE
    O << ','; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 16:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBZX, LBZX8, LDARX, LDBRX, L...
    printMemRegReg(MI, 1, O); 
    break;
  case 3:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // LA
    printS16ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // LAx, LBZ, LBZ8, LD, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LMW, LWA, LWA_32, ...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 7:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 8:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O); 
    return;
    break;
  case 9:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 11:
    // RLDIMI, RLDIMIo, RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo, VCFSX, VCFUX, VCT...
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 12:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, CNTLZD...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' '; 
    printOperand(MI, 3, O); 
    O << ' '; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 4:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 5:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0"; 
    return;
    break;
  case 7:
    // XSMADDADP, XSMADDMDP, XSMSUBADP, XSMSUBMDP, XSNMADDADP, XSNMADDMDP, XS...
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O); 
    break;
  case 4:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O); 
    break;
  case 5:
    // XXSPLTW
    printU2ImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // gBC, gBCL
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 32) & 1) {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", "; 
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 33) & 3) {
  default:   // unreachable.
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O); 
    break;
  case 2:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 35) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNMo
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 279 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'r', '1', '0', 0,
  /* 61 */ 'v', 's', '1', '0', 0,
  /* 66 */ 'v', '1', '0', 0,
  /* 70 */ 'f', '2', '0', 0,
  /* 74 */ 'r', '2', '0', 0,
  /* 78 */ 'v', 's', '2', '0', 0,
  /* 83 */ 'v', '2', '0', 0,
  /* 87 */ 'f', '3', '0', 0,
  /* 91 */ 'r', '3', '0', 0,
  /* 95 */ 'v', 's', '3', '0', 0,
  /* 100 */ 'v', '3', '0', 0,
  /* 104 */ 'v', 's', '4', '0', 0,
  /* 109 */ 'v', 's', '5', '0', 0,
  /* 114 */ 'v', 's', '6', '0', 0,
  /* 119 */ 'f', '0', 0,
  /* 122 */ 'c', 'r', '0', 0,
  /* 126 */ 'v', 's', '0', 0,
  /* 130 */ 'v', '0', 0,
  /* 133 */ 'f', '1', '1', 0,
  /* 137 */ 'r', '1', '1', 0,
  /* 141 */ 'v', 's', '1', '1', 0,
  /* 146 */ 'v', '1', '1', 0,
  /* 150 */ 'f', '2', '1', 0,
  /* 154 */ 'r', '2', '1', 0,
  /* 158 */ 'v', 's', '2', '1', 0,
  /* 163 */ 'v', '2', '1', 0,
  /* 167 */ 'f', '3', '1', 0,
  /* 171 */ 'r', '3', '1', 0,
  /* 175 */ 'v', 's', '3', '1', 0,
  /* 180 */ 'v', '3', '1', 0,
  /* 184 */ 'v', 's', '4', '1', 0,
  /* 189 */ 'v', 's', '5', '1', 0,
  /* 194 */ 'v', 's', '6', '1', 0,
  /* 199 */ 'f', '1', 0,
  /* 202 */ 'c', 'r', '1', 0,
  /* 206 */ 'v', 's', '1', 0,
  /* 210 */ 'v', '1', 0,
  /* 213 */ 'f', '1', '2', 0,
  /* 217 */ 'r', '1', '2', 0,
  /* 221 */ 'v', 's', '1', '2', 0,
  /* 226 */ 'v', '1', '2', 0,
  /* 230 */ 'f', '2', '2', 0,
  /* 234 */ 'r', '2', '2', 0,
  /* 238 */ 'v', 's', '2', '2', 0,
  /* 243 */ 'v', '2', '2', 0,
  /* 247 */ 'v', 's', '3', '2', 0,
  /* 252 */ 'v', 's', '4', '2', 0,
  /* 257 */ 'v', 's', '5', '2', 0,
  /* 262 */ 'v', 's', '6', '2', 0,
  /* 267 */ 'f', '2', 0,
  /* 270 */ 'c', 'r', '2', 0,
  /* 274 */ 'v', 's', '2', 0,
  /* 278 */ 'v', '2', 0,
  /* 281 */ 'f', '1', '3', 0,
  /* 285 */ 'r', '1', '3', 0,
  /* 289 */ 'v', 's', '1', '3', 0,
  /* 294 */ 'v', '1', '3', 0,
  /* 298 */ 'f', '2', '3', 0,
  /* 302 */ 'r', '2', '3', 0,
  /* 306 */ 'v', 's', '2', '3', 0,
  /* 311 */ 'v', '2', '3', 0,
  /* 315 */ 'v', 's', '3', '3', 0,
  /* 320 */ 'v', 's', '4', '3', 0,
  /* 325 */ 'v', 's', '5', '3', 0,
  /* 330 */ 'v', 's', '6', '3', 0,
  /* 335 */ 'f', '3', 0,
  /* 338 */ 'c', 'r', '3', 0,
  /* 342 */ 'v', 's', '3', 0,
  /* 346 */ 'v', '3', 0,
  /* 349 */ 'f', '1', '4', 0,
  /* 353 */ 'r', '1', '4', 0,
  /* 357 */ 'v', 's', '1', '4', 0,
  /* 362 */ 'v', '1', '4', 0,
  /* 366 */ 'f', '2', '4', 0,
  /* 370 */ 'r', '2', '4', 0,
  /* 374 */ 'v', 's', '2', '4', 0,
  /* 379 */ 'v', '2', '4', 0,
  /* 383 */ 'v', 's', '3', '4', 0,
  /* 388 */ 'v', 's', '4', '4', 0,
  /* 393 */ 'v', 's', '5', '4', 0,
  /* 398 */ 'f', '4', 0,
  /* 401 */ 'c', 'r', '4', 0,
  /* 405 */ 'v', 's', '4', 0,
  /* 409 */ 'v', '4', 0,
  /* 412 */ 'f', '1', '5', 0,
  /* 416 */ 'r', '1', '5', 0,
  /* 420 */ 'v', 's', '1', '5', 0,
  /* 425 */ 'v', '1', '5', 0,
  /* 429 */ 'f', '2', '5', 0,
  /* 433 */ 'r', '2', '5', 0,
  /* 437 */ 'v', 's', '2', '5', 0,
  /* 442 */ 'v', '2', '5', 0,
  /* 446 */ 'v', 's', '3', '5', 0,
  /* 451 */ 'v', 's', '4', '5', 0,
  /* 456 */ 'v', 's', '5', '5', 0,
  /* 461 */ 'f', '5', 0,
  /* 464 */ 'c', 'r', '5', 0,
  /* 468 */ 'v', 's', '5', 0,
  /* 472 */ 'v', '5', 0,
  /* 475 */ 'f', '1', '6', 0,
  /* 479 */ 'r', '1', '6', 0,
  /* 483 */ 'v', 's', '1', '6', 0,
  /* 488 */ 'v', '1', '6', 0,
  /* 492 */ 'f', '2', '6', 0,
  /* 496 */ 'r', '2', '6', 0,
  /* 500 */ 'v', 's', '2', '6', 0,
  /* 505 */ 'v', '2', '6', 0,
  /* 509 */ 'v', 's', '3', '6', 0,
  /* 514 */ 'v', 's', '4', '6', 0,
  /* 519 */ 'v', 's', '5', '6', 0,
  /* 524 */ 'f', '6', 0,
  /* 527 */ 'c', 'r', '6', 0,
  /* 531 */ 'v', 's', '6', 0,
  /* 535 */ 'v', '6', 0,
  /* 538 */ 'f', '1', '7', 0,
  /* 542 */ 'r', '1', '7', 0,
  /* 546 */ 'v', 's', '1', '7', 0,
  /* 551 */ 'v', '1', '7', 0,
  /* 555 */ 'f', '2', '7', 0,
  /* 559 */ 'r', '2', '7', 0,
  /* 563 */ 'v', 's', '2', '7', 0,
  /* 568 */ 'v', '2', '7', 0,
  /* 572 */ 'v', 's', '3', '7', 0,
  /* 577 */ 'v', 's', '4', '7', 0,
  /* 582 */ 'v', 's', '5', '7', 0,
  /* 587 */ 'f', '7', 0,
  /* 590 */ 'c', 'r', '7', 0,
  /* 594 */ 'v', 's', '7', 0,
  /* 598 */ 'v', '7', 0,
  /* 601 */ 'f', '1', '8', 0,
  /* 605 */ 'r', '1', '8', 0,
  /* 609 */ 'v', 's', '1', '8', 0,
  /* 614 */ 'v', '1', '8', 0,
  /* 618 */ 'f', '2', '8', 0,
  /* 622 */ 'r', '2', '8', 0,
  /* 626 */ 'v', 's', '2', '8', 0,
  /* 631 */ 'v', '2', '8', 0,
  /* 635 */ 'v', 's', '3', '8', 0,
  /* 640 */ 'v', 's', '4', '8', 0,
  /* 645 */ 'v', 's', '5', '8', 0,
  /* 650 */ 'f', '8', 0,
  /* 653 */ 'r', '8', 0,
  /* 656 */ 'v', 's', '8', 0,
  /* 660 */ 'v', '8', 0,
  /* 663 */ 'f', '1', '9', 0,
  /* 667 */ 'r', '1', '9', 0,
  /* 671 */ 'v', 's', '1', '9', 0,
  /* 676 */ 'v', '1', '9', 0,
  /* 680 */ 'f', '2', '9', 0,
  /* 684 */ 'r', '2', '9', 0,
  /* 688 */ 'v', 's', '2', '9', 0,
  /* 693 */ 'v', '2', '9', 0,
  /* 697 */ 'v', 's', '3', '9', 0,
  /* 702 */ 'v', 's', '4', '9', 0,
  /* 707 */ 'v', 's', '5', '9', 0,
  /* 712 */ 'f', '9', 0,
  /* 715 */ 'r', '9', 0,
  /* 718 */ 'v', 's', '9', 0,
  /* 722 */ 'v', '9', 0,
  /* 725 */ 'c', 'a', 0,
  /* 728 */ 'c', 'c', 0,
  /* 731 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 738 */ 'l', 'r', 0,
  /* 741 */ 'c', 't', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    36, 725, 728, 741, 18, 738, 0, 731, 55, 36, 122, 202, 270, 338, 
    401, 464, 527, 590, 741, 119, 199, 267, 335, 398, 461, 524, 587, 650, 
    712, 53, 133, 213, 281, 349, 412, 475, 538, 601, 663, 70, 150, 230, 
    298, 366, 429, 492, 555, 618, 680, 87, 167, 18, 738, 123, 203, 271, 
    339, 402, 465, 528, 591, 653, 715, 57, 137, 217, 285, 353, 416, 479, 
    542, 605, 667, 74, 154, 234, 302, 370, 433, 496, 559, 622, 684, 91, 
    171, 130, 210, 278, 346, 409, 472, 535, 598, 660, 722, 66, 146, 226, 
    294, 362, 425, 488, 551, 614, 676, 83, 163, 243, 311, 379, 442, 505, 
    568, 631, 693, 100, 180, 247, 315, 383, 446, 509, 572, 635, 697, 104, 
    184, 252, 320, 388, 451, 514, 577, 640, 702, 109, 189, 257, 325, 393, 
    456, 519, 582, 645, 707, 114, 194, 262, 330, 247, 315, 383, 446, 509, 
    572, 635, 697, 104, 184, 252, 320, 388, 451, 514, 577, 640, 702, 109, 
    189, 257, 325, 393, 456, 519, 582, 645, 707, 114, 194, 262, 330, 126, 
    206, 274, 342, 405, 468, 531, 594, 656, 718, 61, 141, 221, 289, 357, 
    420, 483, 546, 609, 671, 78, 158, 238, 306, 374, 437, 500, 563, 626, 
    688, 95, 175, 123, 203, 271, 339, 402, 465, 528, 591, 653, 715, 57, 
    137, 217, 285, 353, 416, 479, 542, 605, 667, 74, 154, 234, 302, 370, 
    433, 496, 559, 622, 684, 91, 171, 55, 215, 477, 54, 350, 602, 231, 
    493, 88, 135, 414, 665, 282, 539, 151, 430, 681, 55, 351, 603, 214, 
    476, 71, 367, 619, 283, 540, 134, 413, 664, 299, 556, 168, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 22) {
      // (MFSPR gprc:$RT, 22)
      AsmString = "mfdec $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 25) {
      // (MFSPR gprc:$RT, 25)
      AsmString = "mfsdr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 26) {
      // (MFSPR gprc:$RT, 26)
      AsmString = "mfsrr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 27) {
      // (MFSPR gprc:$RT, 27)
      AsmString = "mfsrr1 $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 268) {
      // (MFTB gprc:$Rx, 268)
      AsmString = "mftb $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 280 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 280, gprc:$RS)
      AsmString = "mtasr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 22 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 22, gprc:$RT)
      AsmString = "mtdec $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 25 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 25, gprc:$RT)
      AsmString = "mtsdr1 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 26 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 26, gprc:$RT)
      AsmString = "mtsrr0 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 27 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 27, gprc:$RT)
      AsmString = "mtsrr1 $\x02";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx, raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
