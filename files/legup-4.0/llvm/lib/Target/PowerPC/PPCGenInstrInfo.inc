/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    ADD4	= 19,
    ADD4TLS	= 20,
    ADD4o	= 21,
    ADD8	= 22,
    ADD8TLS	= 23,
    ADD8TLS_	= 24,
    ADD8o	= 25,
    ADDC	= 26,
    ADDC8	= 27,
    ADDC8o	= 28,
    ADDCo	= 29,
    ADDE	= 30,
    ADDE8	= 31,
    ADDE8o	= 32,
    ADDEo	= 33,
    ADDI	= 34,
    ADDI8	= 35,
    ADDIC	= 36,
    ADDIC8	= 37,
    ADDICo	= 38,
    ADDIS	= 39,
    ADDIS8	= 40,
    ADDISdtprelHA	= 41,
    ADDISgotTprelHA	= 42,
    ADDIStlsgdHA	= 43,
    ADDIStlsldHA	= 44,
    ADDIStocHA	= 45,
    ADDIdtprelL	= 46,
    ADDItlsgdL	= 47,
    ADDItlsldL	= 48,
    ADDItocL	= 49,
    ADDME	= 50,
    ADDME8	= 51,
    ADDME8o	= 52,
    ADDMEo	= 53,
    ADDZE	= 54,
    ADDZE8	= 55,
    ADDZE8o	= 56,
    ADDZEo	= 57,
    ADJCALLSTACKDOWN	= 58,
    ADJCALLSTACKUP	= 59,
    AND	= 60,
    AND8	= 61,
    AND8o	= 62,
    ANDC	= 63,
    ANDC8	= 64,
    ANDC8o	= 65,
    ANDCo	= 66,
    ANDISo	= 67,
    ANDISo8	= 68,
    ANDIo	= 69,
    ANDIo8	= 70,
    ANDIo_1_EQ_BIT	= 71,
    ANDIo_1_EQ_BIT8	= 72,
    ANDIo_1_GT_BIT	= 73,
    ANDIo_1_GT_BIT8	= 74,
    ANDo	= 75,
    ATOMIC_CMP_SWAP_I16	= 76,
    ATOMIC_CMP_SWAP_I32	= 77,
    ATOMIC_CMP_SWAP_I64	= 78,
    ATOMIC_CMP_SWAP_I8	= 79,
    ATOMIC_LOAD_ADD_I16	= 80,
    ATOMIC_LOAD_ADD_I32	= 81,
    ATOMIC_LOAD_ADD_I64	= 82,
    ATOMIC_LOAD_ADD_I8	= 83,
    ATOMIC_LOAD_AND_I16	= 84,
    ATOMIC_LOAD_AND_I32	= 85,
    ATOMIC_LOAD_AND_I64	= 86,
    ATOMIC_LOAD_AND_I8	= 87,
    ATOMIC_LOAD_NAND_I16	= 88,
    ATOMIC_LOAD_NAND_I32	= 89,
    ATOMIC_LOAD_NAND_I64	= 90,
    ATOMIC_LOAD_NAND_I8	= 91,
    ATOMIC_LOAD_OR_I16	= 92,
    ATOMIC_LOAD_OR_I32	= 93,
    ATOMIC_LOAD_OR_I64	= 94,
    ATOMIC_LOAD_OR_I8	= 95,
    ATOMIC_LOAD_SUB_I16	= 96,
    ATOMIC_LOAD_SUB_I32	= 97,
    ATOMIC_LOAD_SUB_I64	= 98,
    ATOMIC_LOAD_SUB_I8	= 99,
    ATOMIC_LOAD_XOR_I16	= 100,
    ATOMIC_LOAD_XOR_I32	= 101,
    ATOMIC_LOAD_XOR_I64	= 102,
    ATOMIC_LOAD_XOR_I8	= 103,
    ATOMIC_SWAP_I16	= 104,
    ATOMIC_SWAP_I32	= 105,
    ATOMIC_SWAP_I64	= 106,
    ATOMIC_SWAP_I8	= 107,
    B	= 108,
    BA	= 109,
    BC	= 110,
    BCC	= 111,
    BCCA	= 112,
    BCCCTR	= 113,
    BCCCTR8	= 114,
    BCCCTRL	= 115,
    BCCCTRL8	= 116,
    BCCL	= 117,
    BCCLA	= 118,
    BCCLR	= 119,
    BCCLRL	= 120,
    BCCTR	= 121,
    BCCTR8	= 122,
    BCCTR8n	= 123,
    BCCTRL	= 124,
    BCCTRL8	= 125,
    BCCTRL8n	= 126,
    BCCTRLn	= 127,
    BCCTRn	= 128,
    BCL	= 129,
    BCLR	= 130,
    BCLRL	= 131,
    BCLRLn	= 132,
    BCLRn	= 133,
    BCLalways	= 134,
    BCLn	= 135,
    BCTR	= 136,
    BCTR8	= 137,
    BCTRL	= 138,
    BCTRL8	= 139,
    BCn	= 140,
    BDNZ	= 141,
    BDNZ8	= 142,
    BDNZA	= 143,
    BDNZAm	= 144,
    BDNZAp	= 145,
    BDNZL	= 146,
    BDNZLA	= 147,
    BDNZLAm	= 148,
    BDNZLAp	= 149,
    BDNZLR	= 150,
    BDNZLR8	= 151,
    BDNZLRL	= 152,
    BDNZLRLm	= 153,
    BDNZLRLp	= 154,
    BDNZLRm	= 155,
    BDNZLRp	= 156,
    BDNZLm	= 157,
    BDNZLp	= 158,
    BDNZm	= 159,
    BDNZp	= 160,
    BDZ	= 161,
    BDZ8	= 162,
    BDZA	= 163,
    BDZAm	= 164,
    BDZAp	= 165,
    BDZL	= 166,
    BDZLA	= 167,
    BDZLAm	= 168,
    BDZLAp	= 169,
    BDZLR	= 170,
    BDZLR8	= 171,
    BDZLRL	= 172,
    BDZLRLm	= 173,
    BDZLRLp	= 174,
    BDZLRm	= 175,
    BDZLRp	= 176,
    BDZLm	= 177,
    BDZLp	= 178,
    BDZm	= 179,
    BDZp	= 180,
    BL	= 181,
    BL8	= 182,
    BL8_NOP	= 183,
    BL8_NOP_TLS	= 184,
    BL8_TLS	= 185,
    BL8_TLS_	= 186,
    BLA	= 187,
    BLA8	= 188,
    BLA8_NOP	= 189,
    BLR	= 190,
    BLRL	= 191,
    CLRLSLDI	= 192,
    CLRLSLDIo	= 193,
    CLRLSLWI	= 194,
    CLRLSLWIo	= 195,
    CLRRDI	= 196,
    CLRRDIo	= 197,
    CLRRWI	= 198,
    CLRRWIo	= 199,
    CMPD	= 200,
    CMPDI	= 201,
    CMPLD	= 202,
    CMPLDI	= 203,
    CMPLW	= 204,
    CMPLWI	= 205,
    CMPW	= 206,
    CMPWI	= 207,
    CNTLZD	= 208,
    CNTLZDo	= 209,
    CNTLZW	= 210,
    CNTLZWo	= 211,
    CR6SET	= 212,
    CR6UNSET	= 213,
    CRAND	= 214,
    CRANDC	= 215,
    CREQV	= 216,
    CRNAND	= 217,
    CRNOR	= 218,
    CROR	= 219,
    CRORC	= 220,
    CRSET	= 221,
    CRUNSET	= 222,
    CRXOR	= 223,
    DCBA	= 224,
    DCBF	= 225,
    DCBI	= 226,
    DCBST	= 227,
    DCBT	= 228,
    DCBTST	= 229,
    DCBZ	= 230,
    DCBZL	= 231,
    DIVD	= 232,
    DIVDU	= 233,
    DIVDUo	= 234,
    DIVDo	= 235,
    DIVW	= 236,
    DIVWU	= 237,
    DIVWUo	= 238,
    DIVWo	= 239,
    DSS	= 240,
    DSSALL	= 241,
    DST	= 242,
    DST64	= 243,
    DSTST	= 244,
    DSTST64	= 245,
    DSTSTT	= 246,
    DSTSTT64	= 247,
    DSTT	= 248,
    DSTT64	= 249,
    DYNALLOC	= 250,
    DYNALLOC8	= 251,
    EH_SjLj_LongJmp32	= 252,
    EH_SjLj_LongJmp64	= 253,
    EH_SjLj_SetJmp32	= 254,
    EH_SjLj_SetJmp64	= 255,
    EH_SjLj_Setup	= 256,
    EIEIO	= 257,
    EQV	= 258,
    EQV8	= 259,
    EQV8o	= 260,
    EQVo	= 261,
    EXTLDI	= 262,
    EXTLDIo	= 263,
    EXTLWI	= 264,
    EXTLWIo	= 265,
    EXTRDI	= 266,
    EXTRDIo	= 267,
    EXTRWI	= 268,
    EXTRWIo	= 269,
    EXTSB	= 270,
    EXTSB8	= 271,
    EXTSB8_32_64	= 272,
    EXTSB8o	= 273,
    EXTSBo	= 274,
    EXTSH	= 275,
    EXTSH8	= 276,
    EXTSH8_32_64	= 277,
    EXTSH8o	= 278,
    EXTSHo	= 279,
    EXTSW	= 280,
    EXTSW_32_64	= 281,
    EXTSW_32_64o	= 282,
    EXTSWo	= 283,
    FABSD	= 284,
    FABSDo	= 285,
    FABSS	= 286,
    FABSSo	= 287,
    FADD	= 288,
    FADDS	= 289,
    FADDSo	= 290,
    FADDo	= 291,
    FADDrtz	= 292,
    FCFID	= 293,
    FCFIDS	= 294,
    FCFIDSo	= 295,
    FCFIDU	= 296,
    FCFIDUS	= 297,
    FCFIDUSo	= 298,
    FCFIDUo	= 299,
    FCFIDo	= 300,
    FCMPUD	= 301,
    FCMPUS	= 302,
    FCPSGND	= 303,
    FCPSGNDo	= 304,
    FCPSGNS	= 305,
    FCPSGNSo	= 306,
    FCTID	= 307,
    FCTIDUZ	= 308,
    FCTIDUZo	= 309,
    FCTIDZ	= 310,
    FCTIDZo	= 311,
    FCTIDo	= 312,
    FCTIW	= 313,
    FCTIWUZ	= 314,
    FCTIWUZo	= 315,
    FCTIWZ	= 316,
    FCTIWZo	= 317,
    FCTIWo	= 318,
    FDIV	= 319,
    FDIVS	= 320,
    FDIVSo	= 321,
    FDIVo	= 322,
    FMADD	= 323,
    FMADDS	= 324,
    FMADDSo	= 325,
    FMADDo	= 326,
    FMR	= 327,
    FMRo	= 328,
    FMSUB	= 329,
    FMSUBS	= 330,
    FMSUBSo	= 331,
    FMSUBo	= 332,
    FMUL	= 333,
    FMULS	= 334,
    FMULSo	= 335,
    FMULo	= 336,
    FNABSD	= 337,
    FNABSDo	= 338,
    FNABSS	= 339,
    FNABSSo	= 340,
    FNEGD	= 341,
    FNEGDo	= 342,
    FNEGS	= 343,
    FNEGSo	= 344,
    FNMADD	= 345,
    FNMADDS	= 346,
    FNMADDSo	= 347,
    FNMADDo	= 348,
    FNMSUB	= 349,
    FNMSUBS	= 350,
    FNMSUBSo	= 351,
    FNMSUBo	= 352,
    FRE	= 353,
    FRES	= 354,
    FRESo	= 355,
    FREo	= 356,
    FRIMD	= 357,
    FRIMDo	= 358,
    FRIMS	= 359,
    FRIMSo	= 360,
    FRIND	= 361,
    FRINDo	= 362,
    FRINS	= 363,
    FRINSo	= 364,
    FRIPD	= 365,
    FRIPDo	= 366,
    FRIPS	= 367,
    FRIPSo	= 368,
    FRIZD	= 369,
    FRIZDo	= 370,
    FRIZS	= 371,
    FRIZSo	= 372,
    FRSP	= 373,
    FRSPo	= 374,
    FRSQRTE	= 375,
    FRSQRTES	= 376,
    FRSQRTESo	= 377,
    FRSQRTEo	= 378,
    FSELD	= 379,
    FSELDo	= 380,
    FSELS	= 381,
    FSELSo	= 382,
    FSQRT	= 383,
    FSQRTS	= 384,
    FSQRTSo	= 385,
    FSQRTo	= 386,
    FSUB	= 387,
    FSUBS	= 388,
    FSUBSo	= 389,
    FSUBo	= 390,
    GETtlsADDR	= 391,
    GETtlsldADDR	= 392,
    GetGBRO	= 393,
    ICBI	= 394,
    INSLWI	= 395,
    INSLWIo	= 396,
    INSRDI	= 397,
    INSRDIo	= 398,
    INSRWI	= 399,
    INSRWIo	= 400,
    ISEL	= 401,
    ISEL8	= 402,
    ISYNC	= 403,
    LA	= 404,
    LAx	= 405,
    LBZ	= 406,
    LBZ8	= 407,
    LBZU	= 408,
    LBZU8	= 409,
    LBZUX	= 410,
    LBZUX8	= 411,
    LBZX	= 412,
    LBZX8	= 413,
    LD	= 414,
    LDARX	= 415,
    LDBRX	= 416,
    LDU	= 417,
    LDUX	= 418,
    LDX	= 419,
    LDgotTprelL	= 420,
    LDgotTprelL32	= 421,
    LDinto_toc	= 422,
    LDtoc	= 423,
    LDtocCPT	= 424,
    LDtocJTI	= 425,
    LDtocL	= 426,
    LFD	= 427,
    LFDU	= 428,
    LFDUX	= 429,
    LFDX	= 430,
    LFIWAX	= 431,
    LFIWZX	= 432,
    LFS	= 433,
    LFSU	= 434,
    LFSUX	= 435,
    LFSX	= 436,
    LHA	= 437,
    LHA8	= 438,
    LHAU	= 439,
    LHAU8	= 440,
    LHAUX	= 441,
    LHAUX8	= 442,
    LHAX	= 443,
    LHAX8	= 444,
    LHBRX	= 445,
    LHZ	= 446,
    LHZ8	= 447,
    LHZU	= 448,
    LHZU8	= 449,
    LHZUX	= 450,
    LHZUX8	= 451,
    LHZX	= 452,
    LHZX8	= 453,
    LI	= 454,
    LI8	= 455,
    LIS	= 456,
    LIS8	= 457,
    LMW	= 458,
    LVEBX	= 459,
    LVEHX	= 460,
    LVEWX	= 461,
    LVSL	= 462,
    LVSR	= 463,
    LVX	= 464,
    LVXL	= 465,
    LWA	= 466,
    LWARX	= 467,
    LWAUX	= 468,
    LWAX	= 469,
    LWAX_32	= 470,
    LWA_32	= 471,
    LWBRX	= 472,
    LWZ	= 473,
    LWZ8	= 474,
    LWZU	= 475,
    LWZU8	= 476,
    LWZUX	= 477,
    LWZUX8	= 478,
    LWZX	= 479,
    LWZX8	= 480,
    LWZtoc	= 481,
    LXSDX	= 482,
    LXVD2X	= 483,
    LXVDSX	= 484,
    LXVW4X	= 485,
    MCRF	= 486,
    MFCR	= 487,
    MFCR8	= 488,
    MFCTR	= 489,
    MFCTR8	= 490,
    MFFS	= 491,
    MFLR	= 492,
    MFLR8	= 493,
    MFMSR	= 494,
    MFOCRF	= 495,
    MFOCRF8	= 496,
    MFSPR	= 497,
    MFTB	= 498,
    MFTB8	= 499,
    MFVRSAVE	= 500,
    MFVRSAVEv	= 501,
    MFVSCR	= 502,
    MSYNC	= 503,
    MTCRF	= 504,
    MTCRF8	= 505,
    MTCTR	= 506,
    MTCTR8	= 507,
    MTCTR8loop	= 508,
    MTCTRloop	= 509,
    MTFSB0	= 510,
    MTFSB1	= 511,
    MTFSF	= 512,
    MTLR	= 513,
    MTLR8	= 514,
    MTMSR	= 515,
    MTMSRD	= 516,
    MTOCRF	= 517,
    MTOCRF8	= 518,
    MTSPR	= 519,
    MTVRSAVE	= 520,
    MTVRSAVEv	= 521,
    MTVSCR	= 522,
    MULHD	= 523,
    MULHDU	= 524,
    MULHDUo	= 525,
    MULHDo	= 526,
    MULHW	= 527,
    MULHWU	= 528,
    MULHWUo	= 529,
    MULHWo	= 530,
    MULLD	= 531,
    MULLDo	= 532,
    MULLI	= 533,
    MULLI8	= 534,
    MULLW	= 535,
    MULLWo	= 536,
    MovePCtoLR	= 537,
    MovePCtoLR8	= 538,
    NAND	= 539,
    NAND8	= 540,
    NAND8o	= 541,
    NANDo	= 542,
    NEG	= 543,
    NEG8	= 544,
    NEG8o	= 545,
    NEGo	= 546,
    NOP	= 547,
    NOP_GT_PWR6	= 548,
    NOP_GT_PWR7	= 549,
    NOR	= 550,
    NOR8	= 551,
    NOR8o	= 552,
    NORo	= 553,
    OR	= 554,
    OR8	= 555,
    OR8o	= 556,
    ORC	= 557,
    ORC8	= 558,
    ORC8o	= 559,
    ORCo	= 560,
    ORI	= 561,
    ORI8	= 562,
    ORIS	= 563,
    ORIS8	= 564,
    ORo	= 565,
    POPCNTD	= 566,
    POPCNTW	= 567,
    PPC32GOT	= 568,
    RESTORE_CR	= 569,
    RESTORE_CRBIT	= 570,
    RESTORE_VRSAVE	= 571,
    RLDCL	= 572,
    RLDCLo	= 573,
    RLDCR	= 574,
    RLDCRo	= 575,
    RLDIC	= 576,
    RLDICL	= 577,
    RLDICL_32_64	= 578,
    RLDICLo	= 579,
    RLDICR	= 580,
    RLDICRo	= 581,
    RLDICo	= 582,
    RLDIMI	= 583,
    RLDIMIo	= 584,
    RLWIMI	= 585,
    RLWIMI8	= 586,
    RLWIMI8o	= 587,
    RLWIMIo	= 588,
    RLWINM	= 589,
    RLWINM8	= 590,
    RLWINM8o	= 591,
    RLWINMo	= 592,
    RLWNM	= 593,
    RLWNMo	= 594,
    ROTRDI	= 595,
    ROTRDIo	= 596,
    ROTRWI	= 597,
    ROTRWIo	= 598,
    SC	= 599,
    SELECT_CC_F4	= 600,
    SELECT_CC_F8	= 601,
    SELECT_CC_I4	= 602,
    SELECT_CC_I8	= 603,
    SELECT_CC_VRRC	= 604,
    SELECT_F4	= 605,
    SELECT_F8	= 606,
    SELECT_I4	= 607,
    SELECT_I8	= 608,
    SELECT_VRRC	= 609,
    SLBIA	= 610,
    SLBIE	= 611,
    SLBMFEE	= 612,
    SLBMTE	= 613,
    SLD	= 614,
    SLDI	= 615,
    SLDIo	= 616,
    SLDo	= 617,
    SLW	= 618,
    SLWI	= 619,
    SLWIo	= 620,
    SLWo	= 621,
    SPILL_CR	= 622,
    SPILL_CRBIT	= 623,
    SPILL_VRSAVE	= 624,
    SRAD	= 625,
    SRADI	= 626,
    SRADIo	= 627,
    SRADo	= 628,
    SRAW	= 629,
    SRAWI	= 630,
    SRAWIo	= 631,
    SRAWo	= 632,
    SRD	= 633,
    SRDI	= 634,
    SRDIo	= 635,
    SRDo	= 636,
    SRW	= 637,
    SRWI	= 638,
    SRWIo	= 639,
    SRWo	= 640,
    STB	= 641,
    STB8	= 642,
    STBU	= 643,
    STBU8	= 644,
    STBUX	= 645,
    STBUX8	= 646,
    STBX	= 647,
    STBX8	= 648,
    STD	= 649,
    STDBRX	= 650,
    STDCX	= 651,
    STDU	= 652,
    STDUX	= 653,
    STDX	= 654,
    STFD	= 655,
    STFDU	= 656,
    STFDUX	= 657,
    STFDX	= 658,
    STFIWX	= 659,
    STFS	= 660,
    STFSU	= 661,
    STFSUX	= 662,
    STFSX	= 663,
    STH	= 664,
    STH8	= 665,
    STHBRX	= 666,
    STHU	= 667,
    STHU8	= 668,
    STHUX	= 669,
    STHUX8	= 670,
    STHX	= 671,
    STHX8	= 672,
    STMW	= 673,
    STVEBX	= 674,
    STVEHX	= 675,
    STVEWX	= 676,
    STVX	= 677,
    STVXL	= 678,
    STW	= 679,
    STW8	= 680,
    STWBRX	= 681,
    STWCX	= 682,
    STWU	= 683,
    STWU8	= 684,
    STWUX	= 685,
    STWUX8	= 686,
    STWX	= 687,
    STWX8	= 688,
    STXSDX	= 689,
    STXVD2X	= 690,
    STXVW4X	= 691,
    SUBF	= 692,
    SUBF8	= 693,
    SUBF8o	= 694,
    SUBFC	= 695,
    SUBFC8	= 696,
    SUBFC8o	= 697,
    SUBFCo	= 698,
    SUBFE	= 699,
    SUBFE8	= 700,
    SUBFE8o	= 701,
    SUBFEo	= 702,
    SUBFIC	= 703,
    SUBFIC8	= 704,
    SUBFME	= 705,
    SUBFME8	= 706,
    SUBFME8o	= 707,
    SUBFMEo	= 708,
    SUBFZE	= 709,
    SUBFZE8	= 710,
    SUBFZE8o	= 711,
    SUBFZEo	= 712,
    SUBFo	= 713,
    SUBI	= 714,
    SUBIC	= 715,
    SUBICo	= 716,
    SUBIS	= 717,
    SYNC	= 718,
    TAILB	= 719,
    TAILB8	= 720,
    TAILBA	= 721,
    TAILBA8	= 722,
    TAILBCTR	= 723,
    TAILBCTR8	= 724,
    TCRETURNai	= 725,
    TCRETURNai8	= 726,
    TCRETURNdi	= 727,
    TCRETURNdi8	= 728,
    TCRETURNri	= 729,
    TCRETURNri8	= 730,
    TD	= 731,
    TDI	= 732,
    TLBIE	= 733,
    TLBIEL	= 734,
    TLBSYNC	= 735,
    TRAP	= 736,
    TW	= 737,
    TWI	= 738,
    UPDATE_VRSAVE	= 739,
    UpdateGBR	= 740,
    VADDCUW	= 741,
    VADDFP	= 742,
    VADDSBS	= 743,
    VADDSHS	= 744,
    VADDSWS	= 745,
    VADDUBM	= 746,
    VADDUBS	= 747,
    VADDUHM	= 748,
    VADDUHS	= 749,
    VADDUWM	= 750,
    VADDUWS	= 751,
    VAND	= 752,
    VANDC	= 753,
    VAVGSB	= 754,
    VAVGSH	= 755,
    VAVGSW	= 756,
    VAVGUB	= 757,
    VAVGUH	= 758,
    VAVGUW	= 759,
    VCFSX	= 760,
    VCFSX_0	= 761,
    VCFUX	= 762,
    VCFUX_0	= 763,
    VCMPBFP	= 764,
    VCMPBFPo	= 765,
    VCMPEQFP	= 766,
    VCMPEQFPo	= 767,
    VCMPEQUB	= 768,
    VCMPEQUBo	= 769,
    VCMPEQUH	= 770,
    VCMPEQUHo	= 771,
    VCMPEQUW	= 772,
    VCMPEQUWo	= 773,
    VCMPGEFP	= 774,
    VCMPGEFPo	= 775,
    VCMPGTFP	= 776,
    VCMPGTFPo	= 777,
    VCMPGTSB	= 778,
    VCMPGTSBo	= 779,
    VCMPGTSH	= 780,
    VCMPGTSHo	= 781,
    VCMPGTSW	= 782,
    VCMPGTSWo	= 783,
    VCMPGTUB	= 784,
    VCMPGTUBo	= 785,
    VCMPGTUH	= 786,
    VCMPGTUHo	= 787,
    VCMPGTUW	= 788,
    VCMPGTUWo	= 789,
    VCTSXS	= 790,
    VCTSXS_0	= 791,
    VCTUXS	= 792,
    VCTUXS_0	= 793,
    VEXPTEFP	= 794,
    VLOGEFP	= 795,
    VMADDFP	= 796,
    VMAXFP	= 797,
    VMAXSB	= 798,
    VMAXSH	= 799,
    VMAXSW	= 800,
    VMAXUB	= 801,
    VMAXUH	= 802,
    VMAXUW	= 803,
    VMHADDSHS	= 804,
    VMHRADDSHS	= 805,
    VMINFP	= 806,
    VMINSB	= 807,
    VMINSH	= 808,
    VMINSW	= 809,
    VMINUB	= 810,
    VMINUH	= 811,
    VMINUW	= 812,
    VMLADDUHM	= 813,
    VMRGHB	= 814,
    VMRGHH	= 815,
    VMRGHW	= 816,
    VMRGLB	= 817,
    VMRGLH	= 818,
    VMRGLW	= 819,
    VMSUMMBM	= 820,
    VMSUMSHM	= 821,
    VMSUMSHS	= 822,
    VMSUMUBM	= 823,
    VMSUMUHM	= 824,
    VMSUMUHS	= 825,
    VMULESB	= 826,
    VMULESH	= 827,
    VMULEUB	= 828,
    VMULEUH	= 829,
    VMULOSB	= 830,
    VMULOSH	= 831,
    VMULOUB	= 832,
    VMULOUH	= 833,
    VNMSUBFP	= 834,
    VNOR	= 835,
    VOR	= 836,
    VPERM	= 837,
    VPKPX	= 838,
    VPKSHSS	= 839,
    VPKSHUS	= 840,
    VPKSWSS	= 841,
    VPKSWUS	= 842,
    VPKUHUM	= 843,
    VPKUHUS	= 844,
    VPKUWUM	= 845,
    VPKUWUS	= 846,
    VREFP	= 847,
    VRFIM	= 848,
    VRFIN	= 849,
    VRFIP	= 850,
    VRFIZ	= 851,
    VRLB	= 852,
    VRLH	= 853,
    VRLW	= 854,
    VRSQRTEFP	= 855,
    VSEL	= 856,
    VSL	= 857,
    VSLB	= 858,
    VSLDOI	= 859,
    VSLH	= 860,
    VSLO	= 861,
    VSLW	= 862,
    VSPLTB	= 863,
    VSPLTH	= 864,
    VSPLTISB	= 865,
    VSPLTISH	= 866,
    VSPLTISW	= 867,
    VSPLTW	= 868,
    VSR	= 869,
    VSRAB	= 870,
    VSRAH	= 871,
    VSRAW	= 872,
    VSRB	= 873,
    VSRH	= 874,
    VSRO	= 875,
    VSRW	= 876,
    VSUBCUW	= 877,
    VSUBFP	= 878,
    VSUBSBS	= 879,
    VSUBSHS	= 880,
    VSUBSWS	= 881,
    VSUBUBM	= 882,
    VSUBUBS	= 883,
    VSUBUHM	= 884,
    VSUBUHS	= 885,
    VSUBUWM	= 886,
    VSUBUWS	= 887,
    VSUM2SWS	= 888,
    VSUM4SBS	= 889,
    VSUM4SHS	= 890,
    VSUM4UBS	= 891,
    VSUMSWS	= 892,
    VUPKHPX	= 893,
    VUPKHSB	= 894,
    VUPKHSH	= 895,
    VUPKLPX	= 896,
    VUPKLSB	= 897,
    VUPKLSH	= 898,
    VXOR	= 899,
    V_SET0	= 900,
    V_SET0B	= 901,
    V_SET0H	= 902,
    V_SETALLONES	= 903,
    V_SETALLONESB	= 904,
    V_SETALLONESH	= 905,
    WAIT	= 906,
    XOR	= 907,
    XOR8	= 908,
    XOR8o	= 909,
    XORI	= 910,
    XORI8	= 911,
    XORIS	= 912,
    XORIS8	= 913,
    XORo	= 914,
    XSABSDP	= 915,
    XSADDDP	= 916,
    XSCMPODP	= 917,
    XSCMPUDP	= 918,
    XSCPSGNDP	= 919,
    XSCVDPSP	= 920,
    XSCVDPSXDS	= 921,
    XSCVDPSXWS	= 922,
    XSCVDPUXDS	= 923,
    XSCVDPUXWS	= 924,
    XSCVSPDP	= 925,
    XSCVSXDDP	= 926,
    XSCVUXDDP	= 927,
    XSDIVDP	= 928,
    XSMADDADP	= 929,
    XSMADDMDP	= 930,
    XSMAXDP	= 931,
    XSMINDP	= 932,
    XSMSUBADP	= 933,
    XSMSUBMDP	= 934,
    XSMULDP	= 935,
    XSNABSDP	= 936,
    XSNEGDP	= 937,
    XSNMADDADP	= 938,
    XSNMADDMDP	= 939,
    XSNMSUBADP	= 940,
    XSNMSUBMDP	= 941,
    XSRDPI	= 942,
    XSRDPIC	= 943,
    XSRDPIM	= 944,
    XSRDPIP	= 945,
    XSRDPIZ	= 946,
    XSREDP	= 947,
    XSRSQRTEDP	= 948,
    XSSQRTDP	= 949,
    XSSUBDP	= 950,
    XSTDIVDP	= 951,
    XSTSQRTDP	= 952,
    XVABSDP	= 953,
    XVABSSP	= 954,
    XVADDDP	= 955,
    XVADDSP	= 956,
    XVCMPEQDP	= 957,
    XVCMPEQDPo	= 958,
    XVCMPEQSP	= 959,
    XVCMPEQSPo	= 960,
    XVCMPGEDP	= 961,
    XVCMPGEDPo	= 962,
    XVCMPGESP	= 963,
    XVCMPGESPo	= 964,
    XVCMPGTDP	= 965,
    XVCMPGTDPo	= 966,
    XVCMPGTSP	= 967,
    XVCMPGTSPo	= 968,
    XVCPSGNDP	= 969,
    XVCPSGNSP	= 970,
    XVCVDPSP	= 971,
    XVCVDPSXDS	= 972,
    XVCVDPSXWS	= 973,
    XVCVDPUXDS	= 974,
    XVCVDPUXWS	= 975,
    XVCVSPDP	= 976,
    XVCVSPSXDS	= 977,
    XVCVSPSXWS	= 978,
    XVCVSPUXDS	= 979,
    XVCVSPUXWS	= 980,
    XVCVSXDDP	= 981,
    XVCVSXDSP	= 982,
    XVCVSXWDP	= 983,
    XVCVSXWSP	= 984,
    XVCVUXDDP	= 985,
    XVCVUXDSP	= 986,
    XVCVUXWDP	= 987,
    XVCVUXWSP	= 988,
    XVDIVDP	= 989,
    XVDIVSP	= 990,
    XVMADDADP	= 991,
    XVMADDASP	= 992,
    XVMADDMDP	= 993,
    XVMADDMSP	= 994,
    XVMAXDP	= 995,
    XVMAXSP	= 996,
    XVMINDP	= 997,
    XVMINSP	= 998,
    XVMSUBADP	= 999,
    XVMSUBASP	= 1000,
    XVMSUBMDP	= 1001,
    XVMSUBMSP	= 1002,
    XVMULDP	= 1003,
    XVMULSP	= 1004,
    XVNABSDP	= 1005,
    XVNABSSP	= 1006,
    XVNEGDP	= 1007,
    XVNEGSP	= 1008,
    XVNMADDADP	= 1009,
    XVNMADDASP	= 1010,
    XVNMADDMDP	= 1011,
    XVNMADDMSP	= 1012,
    XVNMSUBADP	= 1013,
    XVNMSUBASP	= 1014,
    XVNMSUBMDP	= 1015,
    XVNMSUBMSP	= 1016,
    XVRDPI	= 1017,
    XVRDPIC	= 1018,
    XVRDPIM	= 1019,
    XVRDPIP	= 1020,
    XVRDPIZ	= 1021,
    XVREDP	= 1022,
    XVRESP	= 1023,
    XVRSPI	= 1024,
    XVRSPIC	= 1025,
    XVRSPIM	= 1026,
    XVRSPIP	= 1027,
    XVRSPIZ	= 1028,
    XVRSQRTEDP	= 1029,
    XVRSQRTESP	= 1030,
    XVSQRTDP	= 1031,
    XVSQRTSP	= 1032,
    XVSUBDP	= 1033,
    XVSUBSP	= 1034,
    XVTDIVDP	= 1035,
    XVTDIVSP	= 1036,
    XVTSQRTDP	= 1037,
    XVTSQRTSP	= 1038,
    XXLAND	= 1039,
    XXLANDC	= 1040,
    XXLNOR	= 1041,
    XXLOR	= 1042,
    XXLORf	= 1043,
    XXLXOR	= 1044,
    XXMRGHW	= 1045,
    XXMRGLW	= 1046,
    XXPERMDI	= 1047,
    XXSEL	= 1048,
    XXSLDWI	= 1049,
    XXSPLTW	= 1050,
    gBC	= 1051,
    gBCA	= 1052,
    gBCCTR	= 1053,
    gBCCTRL	= 1054,
    gBCL	= 1055,
    gBCLA	= 1056,
    gBCLR	= 1057,
    gBCLRL	= 1058,
    INSTRUCTION_LIST_END = 1059
  };
namespace Sched {
  enum {
    NoInstrModel	= 0,
    IIC_IntSimple	= 1,
    IIC_IntGeneral	= 2,
    IIC_BrB	= 3,
    IIC_IntCompare	= 4,
    IIC_BrCR	= 5,
    IIC_LdStDCBF	= 6,
    IIC_IntDivD	= 7,
    IIC_IntDivW	= 8,
    IIC_LdStLoad	= 9,
    IIC_FPGeneral	= 10,
    IIC_FPAddSub	= 11,
    IIC_FPCompare	= 12,
    IIC_FPDivD	= 13,
    IIC_FPDivS	= 14,
    IIC_FPFused	= 15,
    IIC_FPSqrtD	= 16,
    IIC_FPSqrtS	= 17,
    IIC_LdStICBI	= 18,
    IIC_SprISYNC	= 19,
    IIC_LdStLoadUpd	= 20,
    IIC_LdStLoadUpdX	= 21,
    IIC_LdStLD	= 22,
    IIC_LdStLDARX	= 23,
    IIC_LdStLDU	= 24,
    IIC_LdStLDUX	= 25,
    IIC_LdStLFD	= 26,
    IIC_LdStLFDU	= 27,
    IIC_LdStLFDUX	= 28,
    IIC_LdStLHA	= 29,
    IIC_LdStLHAU	= 30,
    IIC_LdStLHAUX	= 31,
    IIC_LdStLMW	= 32,
    IIC_LdStLWA	= 33,
    IIC_LdStLWARX	= 34,
    IIC_BrMCR	= 35,
    IIC_SprMFCR	= 36,
    IIC_SprMFSPR	= 37,
    IIC_IntMFFS	= 38,
    IIC_SprMFMSR	= 39,
    IIC_SprMFCRF	= 40,
    IIC_SprMFTB	= 41,
    IIC_LdStStore	= 42,
    IIC_LdStSync	= 43,
    IIC_BrMCRX	= 44,
    IIC_SprMTSPR	= 45,
    IIC_IntMTFSB0	= 46,
    IIC_SprMTMSR	= 47,
    IIC_SprMTMSRD	= 48,
    IIC_IntMulHW	= 49,
    IIC_IntMulHWU	= 50,
    IIC_IntMulHD	= 51,
    IIC_IntMulLI	= 52,
    IIC_IntRotateD	= 53,
    IIC_IntRotateDI	= 54,
    IIC_IntRotate	= 55,
    IIC_SprSLBIA	= 56,
    IIC_SprSLBIE	= 57,
    IIC_SprSLBMFEE	= 58,
    IIC_SprSLBMTE	= 59,
    IIC_IntShift	= 60,
    IIC_LdStStoreUpd	= 61,
    IIC_LdStSTD	= 62,
    IIC_LdStSTDCX	= 63,
    IIC_LdStSTDU	= 64,
    IIC_LdStSTDUX	= 65,
    IIC_LdStSTFD	= 66,
    IIC_LdStSTFDU	= 67,
    IIC_LdStSTWCX	= 68,
    IIC_IntTrapD	= 69,
    IIC_SprTLBIE	= 70,
    IIC_SprTLBIEL	= 71,
    IIC_SprTLBSYNC	= 72,
    IIC_IntTrapW	= 73,
    IIC_VecFP	= 74,
    IIC_VecGeneral	= 75,
    IIC_VecFPCompare	= 76,
    IIC_VecPerm	= 77,
    SCHED_LIST_END = 78
  };
}
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::R1, 0 };
static const uint16_t ImplicitList5[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList6[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList8[] = { PPC::LR, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList11[] = { PPC::RM, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList13[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList14[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList16[] = { PPC::X1, 0 };
static const uint16_t ImplicitList17[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList18[] = { PPC::X2, 0 };
static const uint16_t ImplicitList19[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList20[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo118[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo119[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo122[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo124[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo126[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4,0,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6,0,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8,0,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9,0,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #19 = ADD4
  { 20,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #20 = ADD4TLS
  { 21,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #21 = ADD4o
  { 22,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #22 = ADD8
  { 23,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #23 = ADD8TLS
  { 24,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #24 = ADD8TLS_
  { 25,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #25 = ADD8o
  { 26,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo10,0,nullptr },  // Inst #26 = ADDC
  { 27,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #27 = ADDC8
  { 28,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #28 = ADDC8o
  { 29,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo10,0,nullptr },  // Inst #29 = ADDCo
  { 30,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo10,0,nullptr },  // Inst #30 = ADDE
  { 31,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #31 = ADDE8
  { 32,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #32 = ADDE8o
  { 33,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo10,0,nullptr },  // Inst #33 = ADDEo
  { 34,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #34 = ADDI
  { 35,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #35 = ADDI8
  { 36,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #36 = ADDIC
  { 37,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #37 = ADDIC8
  { 38,	3,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #38 = ADDICo
  { 39,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #39 = ADDIS
  { 40,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #40 = ADDIS8
  { 41,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #41 = ADDISdtprelHA
  { 42,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #42 = ADDISgotTprelHA
  { 43,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #43 = ADDIStlsgdHA
  { 44,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #44 = ADDIStlsldHA
  { 45,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #45 = ADDIStocHA
  { 46,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #46 = ADDIdtprelL
  { 47,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #47 = ADDItlsgdL
  { 48,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #48 = ADDItlsldL
  { 49,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #49 = ADDItocL
  { 50,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,nullptr },  // Inst #50 = ADDME
  { 51,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #51 = ADDME8
  { 52,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #52 = ADDME8o
  { 53,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,nullptr },  // Inst #53 = ADDMEo
  { 54,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,nullptr },  // Inst #54 = ADDZE
  { 55,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #55 = ADDZE8
  { 56,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #56 = ADDZE8o
  { 57,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,nullptr },  // Inst #57 = ADDZEo
  { 58,	1,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo5,0,nullptr },  // Inst #58 = ADJCALLSTACKDOWN
  { 59,	2,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo7,0,nullptr },  // Inst #59 = ADJCALLSTACKUP
  { 60,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #60 = AND
  { 61,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #61 = AND8
  { 62,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #62 = AND8o
  { 63,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #63 = ANDC
  { 64,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #64 = ANDC8
  { 65,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #65 = ANDC8o
  { 66,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #66 = ANDCo
  { 67,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #67 = ANDISo
  { 68,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #68 = ANDISo8
  { 69,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #69 = ANDIo
  { 70,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #70 = ANDIo8
  { 71,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #71 = ANDIo_1_EQ_BIT
  { 72,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #72 = ANDIo_1_EQ_BIT8
  { 73,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #73 = ANDIo_1_GT_BIT
  { 74,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #74 = ANDIo_1_GT_BIT8
  { 75,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #75 = ANDo
  { 76,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #76 = ATOMIC_CMP_SWAP_I16
  { 77,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #77 = ATOMIC_CMP_SWAP_I32
  { 78,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #78 = ATOMIC_CMP_SWAP_I64
  { 79,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #79 = ATOMIC_CMP_SWAP_I8
  { 80,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #80 = ATOMIC_LOAD_ADD_I16
  { 81,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #81 = ATOMIC_LOAD_ADD_I32
  { 82,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #82 = ATOMIC_LOAD_ADD_I64
  { 83,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #83 = ATOMIC_LOAD_ADD_I8
  { 84,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #84 = ATOMIC_LOAD_AND_I16
  { 85,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #85 = ATOMIC_LOAD_AND_I32
  { 86,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #86 = ATOMIC_LOAD_AND_I64
  { 87,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #87 = ATOMIC_LOAD_AND_I8
  { 88,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #88 = ATOMIC_LOAD_NAND_I16
  { 89,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #89 = ATOMIC_LOAD_NAND_I32
  { 90,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #90 = ATOMIC_LOAD_NAND_I64
  { 91,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #91 = ATOMIC_LOAD_NAND_I8
  { 92,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #92 = ATOMIC_LOAD_OR_I16
  { 93,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #93 = ATOMIC_LOAD_OR_I32
  { 94,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #94 = ATOMIC_LOAD_OR_I64
  { 95,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #95 = ATOMIC_LOAD_OR_I8
  { 96,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #96 = ATOMIC_LOAD_SUB_I16
  { 97,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #97 = ATOMIC_LOAD_SUB_I32
  { 98,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #98 = ATOMIC_LOAD_SUB_I64
  { 99,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #99 = ATOMIC_LOAD_SUB_I8
  { 100,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #100 = ATOMIC_LOAD_XOR_I16
  { 101,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #101 = ATOMIC_LOAD_XOR_I32
  { 102,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #102 = ATOMIC_LOAD_XOR_I64
  { 103,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #103 = ATOMIC_LOAD_XOR_I8
  { 104,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #104 = ATOMIC_SWAP_I16
  { 105,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #105 = ATOMIC_SWAP_I32
  { 106,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #106 = ATOMIC_SWAP_I64
  { 107,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #107 = ATOMIC_SWAP_I8
  { 108,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #108 = B
  { 109,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #109 = BA
  { 110,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo24,0,nullptr },  // Inst #110 = BC
  { 111,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #111 = BCC
  { 112,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #112 = BCCA
  { 113,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo26,0,nullptr },  // Inst #113 = BCCCTR
  { 114,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo26,0,nullptr },  // Inst #114 = BCCCTR8
  { 115,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #115 = BCCCTRL
  { 116,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo26,0,nullptr },  // Inst #116 = BCCCTRL8
  { 117,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo25,0,nullptr },  // Inst #117 = BCCL
  { 118,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo25,0,nullptr },  // Inst #118 = BCCLA
  { 119,	2,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo26,0,nullptr },  // Inst #119 = BCCLR
  { 120,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #120 = BCCLRL
  { 121,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo27,0,nullptr },  // Inst #121 = BCCTR
  { 122,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo27,0,nullptr },  // Inst #122 = BCCTR8
  { 123,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo27,0,nullptr },  // Inst #123 = BCCTR8n
  { 124,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #124 = BCCTRL
  { 125,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo27,0,nullptr },  // Inst #125 = BCCTRL8
  { 126,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo27,0,nullptr },  // Inst #126 = BCCTRL8n
  { 127,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #127 = BCCTRLn
  { 128,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo27,0,nullptr },  // Inst #128 = BCCTRn
  { 129,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo24,0,nullptr },  // Inst #129 = BCL
  { 130,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo27,0,nullptr },  // Inst #130 = BCLR
  { 131,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #131 = BCLRL
  { 132,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #132 = BCLRLn
  { 133,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #133 = BCLRn
  { 134,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #134 = BCLalways
  { 135,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo24,0,nullptr },  // Inst #135 = BCLn
  { 136,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, nullptr,0,nullptr },  // Inst #136 = BCTR
  { 137,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, nullptr,0,nullptr },  // Inst #137 = BCTR8
  { 138,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList7, ImplicitList8, nullptr,0,nullptr },  // Inst #138 = BCTRL
  { 139,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList10, nullptr,0,nullptr },  // Inst #139 = BCTRL8
  { 140,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo24,0,nullptr },  // Inst #140 = BCn
  { 141,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #141 = BDNZ
  { 142,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #142 = BDNZ8
  { 143,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #143 = BDNZA
  { 144,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #144 = BDNZAm
  { 145,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #145 = BDNZAp
  { 146,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #146 = BDNZL
  { 147,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #147 = BDNZLA
  { 148,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #148 = BDNZLAm
  { 149,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #149 = BDNZLAp
  { 150,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #150 = BDNZLR
  { 151,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList6, nullptr,0,nullptr },  // Inst #151 = BDNZLR8
  { 152,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #152 = BDNZLRL
  { 153,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #153 = BDNZLRLm
  { 154,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #154 = BDNZLRLp
  { 155,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #155 = BDNZLRm
  { 156,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #156 = BDNZLRp
  { 157,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #157 = BDNZLm
  { 158,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #158 = BDNZLp
  { 159,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #159 = BDNZm
  { 160,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #160 = BDNZp
  { 161,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #161 = BDZ
  { 162,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #162 = BDZ8
  { 163,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #163 = BDZA
  { 164,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #164 = BDZAm
  { 165,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #165 = BDZAp
  { 166,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #166 = BDZL
  { 167,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #167 = BDZLA
  { 168,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #168 = BDZLAm
  { 169,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #169 = BDZLAp
  { 170,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #170 = BDZLR
  { 171,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList6, nullptr,0,nullptr },  // Inst #171 = BDZLR8
  { 172,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #172 = BDZLRL
  { 173,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #173 = BDZLRLm
  { 174,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #174 = BDZLRLp
  { 175,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #175 = BDZLRm
  { 176,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #176 = BDZLRp
  { 177,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #177 = BDZLm
  { 178,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #178 = BDZLp
  { 179,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #179 = BDZm
  { 180,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #180 = BDZp
  { 181,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #181 = BL
  { 182,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #182 = BL8
  { 183,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #183 = BL8_NOP
  { 184,	2,	0,	3,	8,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #184 = BL8_NOP_TLS
  { 185,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #185 = BL8_TLS
  { 186,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #186 = BL8_TLS_
  { 187,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #187 = BLA
  { 188,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #188 = BLA8
  { 189,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #189 = BLA8_NOP
  { 190,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList12, nullptr, nullptr,0,nullptr },  // Inst #190 = BLR
  { 191,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, nullptr,0,nullptr },  // Inst #191 = BLRL
  { 192,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #192 = CLRLSLDI
  { 193,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #193 = CLRLSLDIo
  { 194,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #194 = CLRLSLWI
  { 195,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #195 = CLRLSLWIo
  { 196,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #196 = CLRRDI
  { 197,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #197 = CLRRDIo
  { 198,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #198 = CLRRWI
  { 199,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #199 = CLRRWIo
  { 200,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #200 = CMPD
  { 201,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #201 = CMPDI
  { 202,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #202 = CMPLD
  { 203,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #203 = CMPLDI
  { 204,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #204 = CMPLW
  { 205,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #205 = CMPLWI
  { 206,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #206 = CMPW
  { 207,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #207 = CMPWI
  { 208,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #208 = CNTLZD
  { 209,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #209 = CNTLZDo
  { 210,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #210 = CNTLZW
  { 211,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #211 = CNTLZWo
  { 212,	0,	0,	5,	4,	0, 0x0ULL, nullptr, ImplicitList15, nullptr,0,nullptr },  // Inst #212 = CR6SET
  { 213,	0,	0,	5,	4,	0, 0x0ULL, nullptr, ImplicitList15, nullptr,0,nullptr },  // Inst #213 = CR6UNSET
  { 214,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #214 = CRAND
  { 215,	3,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #215 = CRANDC
  { 216,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #216 = CREQV
  { 217,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #217 = CRNAND
  { 218,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #218 = CRNOR
  { 219,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #219 = CROR
  { 220,	3,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #220 = CRORC
  { 221,	1,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #221 = CRSET
  { 222,	1,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #222 = CRUNSET
  { 223,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #223 = CRXOR
  { 224,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #224 = DCBA
  { 225,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #225 = DCBF
  { 226,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #226 = DCBI
  { 227,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #227 = DCBST
  { 228,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #228 = DCBT
  { 229,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #229 = DCBTST
  { 230,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #230 = DCBZ
  { 231,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #231 = DCBZL
  { 232,	3,	1,	7,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #232 = DIVD
  { 233,	3,	1,	7,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #233 = DIVDU
  { 234,	3,	1,	7,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #234 = DIVDUo
  { 235,	3,	1,	7,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #235 = DIVDo
  { 236,	3,	1,	8,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #236 = DIVW
  { 237,	3,	1,	8,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #237 = DIVWU
  { 238,	3,	1,	8,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #238 = DIVWUo
  { 239,	3,	1,	8,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #239 = DIVWo
  { 240,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36,PPC::DeprecatedDST,nullptr },  // Inst #240 = DSS
  { 241,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36,PPC::DeprecatedDST,nullptr },  // Inst #241 = DSSALL
  { 242,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #242 = DST
  { 243,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #243 = DST64
  { 244,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #244 = DSTST
  { 245,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #245 = DSTST64
  { 246,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #246 = DSTSTT
  { 247,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #247 = DSTSTT64
  { 248,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #248 = DSTT
  { 249,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #249 = DSTT64
  { 250,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo39,0,nullptr },  // Inst #250 = DYNALLOC
  { 251,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList16, ImplicitList16, OperandInfo40,0,nullptr },  // Inst #251 = DYNALLOC8
  { 252,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,0,nullptr },  // Inst #252 = EH_SjLj_LongJmp32
  { 253,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,0,nullptr },  // Inst #253 = EH_SjLj_LongJmp64
  { 254,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo42,0,nullptr },  // Inst #254 = EH_SjLj_SetJmp32
  { 255,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo42,0,nullptr },  // Inst #255 = EH_SjLj_SetJmp64
  { 256,	1,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #256 = EH_SjLj_Setup
  { 257,	0,	0,	9,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #257 = EIEIO
  { 258,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #258 = EQV
  { 259,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #259 = EQV8
  { 260,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #260 = EQV8o
  { 261,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #261 = EQVo
  { 262,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #262 = EXTLDI
  { 263,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #263 = EXTLDIo
  { 264,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #264 = EXTLWI
  { 265,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #265 = EXTLWIo
  { 266,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #266 = EXTRDI
  { 267,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #267 = EXTRDIo
  { 268,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #268 = EXTRWI
  { 269,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #269 = EXTRWIo
  { 270,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #270 = EXTSB
  { 271,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #271 = EXTSB8
  { 272,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #272 = EXTSB8_32_64
  { 273,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #273 = EXTSB8o
  { 274,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #274 = EXTSBo
  { 275,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #275 = EXTSH
  { 276,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #276 = EXTSH8
  { 277,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #277 = EXTSH8_32_64
  { 278,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #278 = EXTSH8o
  { 279,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #279 = EXTSHo
  { 280,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #280 = EXTSW
  { 281,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #281 = EXTSW_32_64
  { 282,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo43,0,nullptr },  // Inst #282 = EXTSW_32_64o
  { 283,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #283 = EXTSWo
  { 284,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #284 = FABSD
  { 285,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #285 = FABSDo
  { 286,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #286 = FABSS
  { 287,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #287 = FABSSo
  { 288,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #288 = FADD
  { 289,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #289 = FADDS
  { 290,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #290 = FADDSo
  { 291,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #291 = FADDo
  { 292,	3,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #292 = FADDrtz
  { 293,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #293 = FCFID
  { 294,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #294 = FCFIDS
  { 295,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #295 = FCFIDSo
  { 296,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #296 = FCFIDU
  { 297,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #297 = FCFIDUS
  { 298,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #298 = FCFIDUSo
  { 299,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #299 = FCFIDUo
  { 300,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #300 = FCFIDo
  { 301,	3,	1,	12,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #301 = FCMPUD
  { 302,	3,	1,	12,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #302 = FCMPUS
  { 303,	3,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #303 = FCPSGND
  { 304,	3,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #304 = FCPSGNDo
  { 305,	3,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #305 = FCPSGNS
  { 306,	3,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #306 = FCPSGNSo
  { 307,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #307 = FCTID
  { 308,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #308 = FCTIDUZ
  { 309,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #309 = FCTIDUZo
  { 310,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #310 = FCTIDZ
  { 311,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #311 = FCTIDZo
  { 312,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #312 = FCTIDo
  { 313,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #313 = FCTIW
  { 314,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #314 = FCTIWUZ
  { 315,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #315 = FCTIWUZo
  { 316,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #316 = FCTIWZ
  { 317,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #317 = FCTIWZo
  { 318,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #318 = FCTIWo
  { 319,	3,	1,	13,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #319 = FDIV
  { 320,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #320 = FDIVS
  { 321,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #321 = FDIVSo
  { 322,	3,	1,	13,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #322 = FDIVo
  { 323,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #323 = FMADD
  { 324,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #324 = FMADDS
  { 325,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #325 = FMADDSo
  { 326,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #326 = FMADDo
  { 327,	2,	1,	10,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #327 = FMR
  { 328,	2,	1,	10,	4,	0, 0x0ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #328 = FMRo
  { 329,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #329 = FMSUB
  { 330,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #330 = FMSUBS
  { 331,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #331 = FMSUBSo
  { 332,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #332 = FMSUBo
  { 333,	3,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #333 = FMUL
  { 334,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #334 = FMULS
  { 335,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #335 = FMULSo
  { 336,	3,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #336 = FMULo
  { 337,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #337 = FNABSD
  { 338,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #338 = FNABSDo
  { 339,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #339 = FNABSS
  { 340,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #340 = FNABSSo
  { 341,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #341 = FNEGD
  { 342,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #342 = FNEGDo
  { 343,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #343 = FNEGS
  { 344,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #344 = FNEGSo
  { 345,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #345 = FNMADD
  { 346,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #346 = FNMADDS
  { 347,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #347 = FNMADDSo
  { 348,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #348 = FNMADDo
  { 349,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #349 = FNMSUB
  { 350,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #350 = FNMSUBS
  { 351,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #351 = FNMSUBSo
  { 352,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #352 = FNMSUBo
  { 353,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #353 = FRE
  { 354,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #354 = FRES
  { 355,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #355 = FRESo
  { 356,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #356 = FREo
  { 357,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #357 = FRIMD
  { 358,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #358 = FRIMDo
  { 359,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #359 = FRIMS
  { 360,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #360 = FRIMSo
  { 361,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #361 = FRIND
  { 362,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #362 = FRINDo
  { 363,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #363 = FRINS
  { 364,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #364 = FRINSo
  { 365,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #365 = FRIPD
  { 366,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #366 = FRIPDo
  { 367,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #367 = FRIPS
  { 368,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #368 = FRIPSo
  { 369,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #369 = FRIZD
  { 370,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #370 = FRIZDo
  { 371,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #371 = FRIZS
  { 372,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #372 = FRIZSo
  { 373,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #373 = FRSP
  { 374,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #374 = FRSPo
  { 375,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #375 = FRSQRTE
  { 376,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #376 = FRSQRTES
  { 377,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #377 = FRSQRTESo
  { 378,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #378 = FRSQRTEo
  { 379,	4,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #379 = FSELD
  { 380,	4,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #380 = FSELDo
  { 381,	4,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo53,0,nullptr },  // Inst #381 = FSELS
  { 382,	4,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo53,0,nullptr },  // Inst #382 = FSELSo
  { 383,	2,	1,	16,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #383 = FSQRT
  { 384,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #384 = FSQRTS
  { 385,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #385 = FSQRTSo
  { 386,	2,	1,	16,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #386 = FSQRTo
  { 387,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #387 = FSUB
  { 388,	3,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #388 = FSUBS
  { 389,	3,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #389 = FSUBSo
  { 390,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #390 = FSUBo
  { 391,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #391 = GETtlsADDR
  { 392,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #392 = GETtlsldADDR
  { 393,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #393 = GetGBRO
  { 394,	2,	0,	18,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #394 = ICBI
  { 395,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #395 = INSLWI
  { 396,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #396 = INSLWIo
  { 397,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #397 = INSRDI
  { 398,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #398 = INSRDIo
  { 399,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #399 = INSRWI
  { 400,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #400 = INSRWIo
  { 401,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo54,0,nullptr },  // Inst #401 = ISEL
  { 402,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo55,0,nullptr },  // Inst #402 = ISEL8
  { 403,	0,	0,	19,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #403 = ISYNC
  { 404,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #404 = LA
  { 405,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #405 = LAx
  { 406,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #406 = LBZ
  { 407,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #407 = LBZ8
  { 408,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #408 = LBZU
  { 409,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #409 = LBZU8
  { 410,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #410 = LBZUX
  { 411,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #411 = LBZUX8
  { 412,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #412 = LBZX
  { 413,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #413 = LBZX8
  { 414,	3,	1,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #414 = LD
  { 415,	3,	1,	23,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #415 = LDARX
  { 416,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #416 = LDBRX
  { 417,	4,	2,	24,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #417 = LDU
  { 418,	4,	2,	25,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #418 = LDUX
  { 419,	3,	1,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #419 = LDX
  { 420,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #420 = LDgotTprelL
  { 421,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #421 = LDgotTprelL32
  { 422,	2,	0,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, nullptr, ImplicitList18, OperandInfo66,0,nullptr },  // Inst #422 = LDinto_toc
  { 423,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #423 = LDtoc
  { 424,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #424 = LDtocCPT
  { 425,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #425 = LDtocJTI
  { 426,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #426 = LDtocL
  { 427,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #427 = LFD
  { 428,	4,	2,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #428 = LFDU
  { 429,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #429 = LFDUX
  { 430,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #430 = LFDX
  { 431,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #431 = LFIWAX
  { 432,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #432 = LFIWZX
  { 433,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #433 = LFS
  { 434,	4,	2,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #434 = LFSU
  { 435,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #435 = LFSUX
  { 436,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #436 = LFSX
  { 437,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #437 = LHA
  { 438,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #438 = LHA8
  { 439,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #439 = LHAU
  { 440,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #440 = LHAU8
  { 441,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #441 = LHAUX
  { 442,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #442 = LHAUX8
  { 443,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #443 = LHAX
  { 444,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #444 = LHAX8
  { 445,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #445 = LHBRX
  { 446,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #446 = LHZ
  { 447,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #447 = LHZ8
  { 448,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #448 = LHZU
  { 449,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #449 = LHZU8
  { 450,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #450 = LHZUX
  { 451,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #451 = LHZUX8
  { 452,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #452 = LHZX
  { 453,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #453 = LHZX8
  { 454,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #454 = LI
  { 455,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #455 = LI8
  { 456,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #456 = LIS
  { 457,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #457 = LIS8
  { 458,	3,	1,	32,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #458 = LMW
  { 459,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #459 = LVEBX
  { 460,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #460 = LVEHX
  { 461,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #461 = LVEWX
  { 462,	3,	1,	9,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #462 = LVSL
  { 463,	3,	1,	9,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #463 = LVSR
  { 464,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #464 = LVX
  { 465,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #465 = LVXL
  { 466,	3,	1,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #466 = LWA
  { 467,	3,	1,	34,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #467 = LWARX
  { 468,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #468 = LWAUX
  { 469,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #469 = LWAX
  { 470,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #470 = LWAX_32
  { 471,	3,	1,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #471 = LWA_32
  { 472,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #472 = LWBRX
  { 473,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #473 = LWZ
  { 474,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #474 = LWZ8
  { 475,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #475 = LWZU
  { 476,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #476 = LWZU8
  { 477,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #477 = LWZUX
  { 478,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #478 = LWZUX8
  { 479,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #479 = LWZX
  { 480,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #480 = LWZX8
  { 481,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #481 = LWZtoc
  { 482,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo80,0,nullptr },  // Inst #482 = LXSDX
  { 483,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #483 = LXVD2X
  { 484,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #484 = LXVDSX
  { 485,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #485 = LXVW4X
  { 486,	2,	1,	35,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #486 = MCRF
  { 487,	1,	1,	36,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #487 = MFCR
  { 488,	1,	1,	36,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo84,0,nullptr },  // Inst #488 = MFCR8
  { 489,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList5, nullptr, OperandInfo83,0,nullptr },  // Inst #489 = MFCTR
  { 490,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList6, nullptr, OperandInfo84,0,nullptr },  // Inst #490 = MFCTR8
  { 491,	1,	1,	38,	4,	0, 0x1aULL, ImplicitList11, nullptr, OperandInfo85,0,nullptr },  // Inst #491 = MFFS
  { 492,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, nullptr, OperandInfo83,0,nullptr },  // Inst #492 = MFLR
  { 493,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList10, nullptr, OperandInfo84,0,nullptr },  // Inst #493 = MFLR8
  { 494,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #494 = MFMSR
  { 495,	2,	1,	40,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #495 = MFOCRF
  { 496,	2,	1,	40,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #496 = MFOCRF8
  { 497,	2,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #497 = MFSPR
  { 498,	2,	1,	41,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,PPC::DeprecatedMFTB,nullptr },  // Inst #498 = MFTB
  { 499,	1,	1,	41,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo84,0,nullptr },  // Inst #499 = MFTB8
  { 500,	1,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #500 = MFVRSAVE
  { 501,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #501 = MFVRSAVEv
  { 502,	1,	1,	42,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #502 = MFVSCR
  { 503,	0,	0,	43,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #503 = MSYNC
  { 504,	2,	0,	44,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #504 = MTCRF
  { 505,	2,	0,	44,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #505 = MTCRF8
  { 506,	1,	0,	45,	4,	0, 0x9ULL, nullptr, ImplicitList5, OperandInfo83,0,nullptr },  // Inst #506 = MTCTR
  { 507,	1,	0,	45,	4,	0, 0x9ULL, nullptr, ImplicitList6, OperandInfo84,0,nullptr },  // Inst #507 = MTCTR8
  { 508,	1,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList6, OperandInfo84,0,nullptr },  // Inst #508 = MTCTR8loop
  { 509,	1,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList5, OperandInfo83,0,nullptr },  // Inst #509 = MTCTRloop
  { 510,	1,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #510 = MTFSB0
  { 511,	1,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #511 = MTFSB1
  { 512,	2,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo91,0,nullptr },  // Inst #512 = MTFSF
  { 513,	1,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList8, OperandInfo83,0,nullptr },  // Inst #513 = MTLR
  { 514,	1,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList10, OperandInfo84,0,nullptr },  // Inst #514 = MTLR8
  { 515,	2,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #515 = MTMSR
  { 516,	2,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #516 = MTMSRD
  { 517,	2,	1,	44,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo92,0,nullptr },  // Inst #517 = MTOCRF
  { 518,	2,	1,	44,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo93,0,nullptr },  // Inst #518 = MTOCRF8
  { 519,	2,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #519 = MTSPR
  { 520,	1,	0,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #520 = MTVRSAVE
  { 521,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #521 = MTVRSAVEv
  { 522,	1,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #522 = MTVSCR
  { 523,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #523 = MULHD
  { 524,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #524 = MULHDU
  { 525,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #525 = MULHDUo
  { 526,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #526 = MULHDo
  { 527,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #527 = MULHW
  { 528,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #528 = MULHWU
  { 529,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #529 = MULHWUo
  { 530,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #530 = MULHWo
  { 531,	3,	1,	51,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #531 = MULLD
  { 532,	3,	1,	51,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #532 = MULLDo
  { 533,	3,	1,	52,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #533 = MULLI
  { 534,	3,	1,	52,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #534 = MULLI8
  { 535,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #535 = MULLW
  { 536,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #536 = MULLWo
  { 537,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList8, nullptr,0,nullptr },  // Inst #537 = MovePCtoLR
  { 538,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList10, nullptr,0,nullptr },  // Inst #538 = MovePCtoLR8
  { 539,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #539 = NAND
  { 540,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #540 = NAND8
  { 541,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #541 = NAND8o
  { 542,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #542 = NANDo
  { 543,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #543 = NEG
  { 544,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #544 = NEG8
  { 545,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #545 = NEG8o
  { 546,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #546 = NEGo
  { 547,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #547 = NOP
  { 548,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #548 = NOP_GT_PWR6
  { 549,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #549 = NOP_GT_PWR7
  { 550,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #550 = NOR
  { 551,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #551 = NOR8
  { 552,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #552 = NOR8o
  { 553,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #553 = NORo
  { 554,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #554 = OR
  { 555,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #555 = OR8
  { 556,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #556 = OR8o
  { 557,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #557 = ORC
  { 558,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #558 = ORC8
  { 559,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #559 = ORC8o
  { 560,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #560 = ORCo
  { 561,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #561 = ORI
  { 562,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #562 = ORI8
  { 563,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #563 = ORIS
  { 564,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #564 = ORIS8
  { 565,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #565 = ORo
  { 566,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #566 = POPCNTD
  { 567,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #567 = POPCNTW
  { 568,	1,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #568 = PPC32GOT
  { 569,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #569 = RESTORE_CR
  { 570,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #570 = RESTORE_CRBIT
  { 571,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #571 = RESTORE_VRSAVE
  { 572,	4,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #572 = RLDCL
  { 573,	4,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo98,0,nullptr },  // Inst #573 = RLDCLo
  { 574,	4,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #574 = RLDCR
  { 575,	4,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo98,0,nullptr },  // Inst #575 = RLDCRo
  { 576,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #576 = RLDIC
  { 577,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #577 = RLDICL
  { 578,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo99,0,nullptr },  // Inst #578 = RLDICL_32_64
  { 579,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo28,0,nullptr },  // Inst #579 = RLDICLo
  { 580,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #580 = RLDICR
  { 581,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo28,0,nullptr },  // Inst #581 = RLDICRo
  { 582,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo28,0,nullptr },  // Inst #582 = RLDICo
  { 583,	5,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo100,0,nullptr },  // Inst #583 = RLDIMI
  { 584,	5,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo100,0,nullptr },  // Inst #584 = RLDIMIo
  { 585,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo101,0,nullptr },  // Inst #585 = RLWIMI
  { 586,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo102,0,nullptr },  // Inst #586 = RLWIMI8
  { 587,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo102,0,nullptr },  // Inst #587 = RLWIMI8o
  { 588,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo101,0,nullptr },  // Inst #588 = RLWIMIo
  { 589,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo103,0,nullptr },  // Inst #589 = RLWINM
  { 590,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo104,0,nullptr },  // Inst #590 = RLWINM8
  { 591,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo104,0,nullptr },  // Inst #591 = RLWINM8o
  { 592,	5,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo103,0,nullptr },  // Inst #592 = RLWINMo
  { 593,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo105,0,nullptr },  // Inst #593 = RLWNM
  { 594,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo105,0,nullptr },  // Inst #594 = RLWNMo
  { 595,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #595 = ROTRDI
  { 596,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #596 = ROTRDIo
  { 597,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #597 = ROTRWI
  { 598,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #598 = ROTRWIo
  { 599,	1,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #599 = SC
  { 600,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo106,0,nullptr },  // Inst #600 = SELECT_CC_F4
  { 601,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo107,0,nullptr },  // Inst #601 = SELECT_CC_F8
  { 602,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo108,0,nullptr },  // Inst #602 = SELECT_CC_I4
  { 603,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo109,0,nullptr },  // Inst #603 = SELECT_CC_I8
  { 604,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo110,0,nullptr },  // Inst #604 = SELECT_CC_VRRC
  { 605,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo111,0,nullptr },  // Inst #605 = SELECT_F4
  { 606,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo112,0,nullptr },  // Inst #606 = SELECT_F8
  { 607,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo113,0,nullptr },  // Inst #607 = SELECT_I4
  { 608,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo114,0,nullptr },  // Inst #608 = SELECT_I8
  { 609,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo115,0,nullptr },  // Inst #609 = SELECT_VRRC
  { 610,	0,	0,	56,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #610 = SLBIA
  { 611,	1,	0,	57,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #611 = SLBIE
  { 612,	2,	1,	58,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #612 = SLBMFEE
  { 613,	2,	0,	59,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #613 = SLBMTE
  { 614,	3,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #614 = SLD
  { 615,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #615 = SLDI
  { 616,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #616 = SLDIo
  { 617,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo116,0,nullptr },  // Inst #617 = SLDo
  { 618,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #618 = SLW
  { 619,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #619 = SLWI
  { 620,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #620 = SLWIo
  { 621,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #621 = SLWo
  { 622,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #622 = SPILL_CR
  { 623,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #623 = SPILL_CRBIT
  { 624,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #624 = SPILL_VRSAVE
  { 625,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo116,0,nullptr },  // Inst #625 = SRAD
  { 626,	3,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #626 = SRADI
  { 627,	3,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #627 = SRADIo
  { 628,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo116,0,nullptr },  // Inst #628 = SRADo
  { 629,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo10,0,nullptr },  // Inst #629 = SRAW
  { 630,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #630 = SRAWI
  { 631,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #631 = SRAWIo
  { 632,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo10,0,nullptr },  // Inst #632 = SRAWo
  { 633,	3,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #633 = SRD
  { 634,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #634 = SRDI
  { 635,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #635 = SRDIo
  { 636,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo116,0,nullptr },  // Inst #636 = SRDo
  { 637,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #637 = SRW
  { 638,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #638 = SRWI
  { 639,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #639 = SRWIo
  { 640,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #640 = SRWo
  { 641,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #641 = STB
  { 642,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #642 = STB8
  { 643,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #643 = STBU
  { 644,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #644 = STBU8
  { 645,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #645 = STBUX
  { 646,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #646 = STBUX8
  { 647,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #647 = STBX
  { 648,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #648 = STBX8
  { 649,	3,	0,	62,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #649 = STD
  { 650,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #650 = STDBRX
  { 651,	3,	0,	63,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo63,0,nullptr },  // Inst #651 = STDCX
  { 652,	4,	1,	64,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #652 = STDU
  { 653,	4,	1,	65,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #653 = STDUX
  { 654,	3,	0,	62,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #654 = STDX
  { 655,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #655 = STFD
  { 656,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #656 = STFDU
  { 657,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #657 = STFDUX
  { 658,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #658 = STFDX
  { 659,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #659 = STFIWX
  { 660,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #660 = STFS
  { 661,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #661 = STFSU
  { 662,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #662 = STFSUX
  { 663,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #663 = STFSX
  { 664,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #664 = STH
  { 665,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #665 = STH8
  { 666,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #666 = STHBRX
  { 667,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #667 = STHU
  { 668,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #668 = STHU8
  { 669,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #669 = STHUX
  { 670,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #670 = STHUX8
  { 671,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #671 = STHX
  { 672,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #672 = STHX8
  { 673,	3,	0,	32,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #673 = STMW
  { 674,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #674 = STVEBX
  { 675,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #675 = STVEHX
  { 676,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #676 = STVEWX
  { 677,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #677 = STVX
  { 678,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #678 = STVXL
  { 679,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #679 = STW
  { 680,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #680 = STW8
  { 681,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #681 = STWBRX
  { 682,	3,	0,	68,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo62,0,nullptr },  // Inst #682 = STWCX
  { 683,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #683 = STWU
  { 684,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #684 = STWU8
  { 685,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #685 = STWUX
  { 686,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #686 = STWUX8
  { 687,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #687 = STWX
  { 688,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #688 = STWX8
  { 689,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo80,0,nullptr },  // Inst #689 = STXSDX
  { 690,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #690 = STXVD2X
  { 691,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #691 = STXVW4X
  { 692,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #692 = SUBF
  { 693,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #693 = SUBF8
  { 694,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #694 = SUBF8o
  { 695,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo10,0,nullptr },  // Inst #695 = SUBFC
  { 696,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #696 = SUBFC8
  { 697,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #697 = SUBFC8o
  { 698,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList3, OperandInfo10,0,nullptr },  // Inst #698 = SUBFCo
  { 699,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo10,0,nullptr },  // Inst #699 = SUBFE
  { 700,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #700 = SUBFE8
  { 701,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #701 = SUBFE8o
  { 702,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo10,0,nullptr },  // Inst #702 = SUBFEo
  { 703,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #703 = SUBFIC
  { 704,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #704 = SUBFIC8
  { 705,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,nullptr },  // Inst #705 = SUBFME
  { 706,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #706 = SUBFME8
  { 707,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #707 = SUBFME8o
  { 708,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,nullptr },  // Inst #708 = SUBFMEo
  { 709,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,nullptr },  // Inst #709 = SUBFZE
  { 710,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #710 = SUBFZE8
  { 711,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #711 = SUBFZE8o
  { 712,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,nullptr },  // Inst #712 = SUBFZEo
  { 713,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #713 = SUBFo
  { 714,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #714 = SUBI
  { 715,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #715 = SUBIC
  { 716,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #716 = SUBICo
  { 717,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #717 = SUBIS
  { 718,	1,	0,	43,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #718 = SYNC
  { 719,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #719 = TAILB
  { 720,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #720 = TAILB8
  { 721,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #721 = TAILBA
  { 722,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #722 = TAILBA8
  { 723,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, nullptr,0,nullptr },  // Inst #723 = TAILBCTR
  { 724,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, nullptr, nullptr,0,nullptr },  // Inst #724 = TAILBCTR8
  { 725,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #725 = TCRETURNai
  { 726,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #726 = TCRETURNai8
  { 727,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #727 = TCRETURNdi
  { 728,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #728 = TCRETURNdi8
  { 729,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo126,0,nullptr },  // Inst #729 = TCRETURNri
  { 730,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo127,0,nullptr },  // Inst #730 = TCRETURNri8
  { 731,	3,	0,	69,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #731 = TD
  { 732,	3,	0,	69,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo129,0,nullptr },  // Inst #732 = TDI
  { 733,	2,	0,	70,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #733 = TLBIE
  { 734,	1,	0,	71,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #734 = TLBIEL
  { 735,	0,	0,	72,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #735 = TLBSYNC
  { 736,	0,	0,	9,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #736 = TRAP
  { 737,	3,	0,	73,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo130,0,nullptr },  // Inst #737 = TW
  { 738,	3,	0,	73,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo131,0,nullptr },  // Inst #738 = TWI
  { 739,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #739 = UPDATE_VRSAVE
  { 740,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #740 = UpdateGBR
  { 741,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #741 = VADDCUW
  { 742,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #742 = VADDFP
  { 743,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #743 = VADDSBS
  { 744,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #744 = VADDSHS
  { 745,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #745 = VADDSWS
  { 746,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #746 = VADDUBM
  { 747,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #747 = VADDUBS
  { 748,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #748 = VADDUHM
  { 749,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #749 = VADDUHS
  { 750,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #750 = VADDUWM
  { 751,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #751 = VADDUWS
  { 752,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #752 = VAND
  { 753,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #753 = VANDC
  { 754,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #754 = VAVGSB
  { 755,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #755 = VAVGSH
  { 756,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #756 = VAVGSW
  { 757,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #757 = VAVGUB
  { 758,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #758 = VAVGUH
  { 759,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #759 = VAVGUW
  { 760,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #760 = VCFSX
  { 761,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #761 = VCFSX_0
  { 762,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #762 = VCFUX
  { 763,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #763 = VCFUX_0
  { 764,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #764 = VCMPBFP
  { 765,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #765 = VCMPBFPo
  { 766,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #766 = VCMPEQFP
  { 767,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #767 = VCMPEQFPo
  { 768,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #768 = VCMPEQUB
  { 769,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #769 = VCMPEQUBo
  { 770,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #770 = VCMPEQUH
  { 771,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #771 = VCMPEQUHo
  { 772,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #772 = VCMPEQUW
  { 773,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #773 = VCMPEQUWo
  { 774,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #774 = VCMPGEFP
  { 775,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #775 = VCMPGEFPo
  { 776,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #776 = VCMPGTFP
  { 777,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #777 = VCMPGTFPo
  { 778,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #778 = VCMPGTSB
  { 779,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #779 = VCMPGTSBo
  { 780,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #780 = VCMPGTSH
  { 781,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #781 = VCMPGTSHo
  { 782,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #782 = VCMPGTSW
  { 783,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #783 = VCMPGTSWo
  { 784,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #784 = VCMPGTUB
  { 785,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #785 = VCMPGTUBo
  { 786,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #786 = VCMPGTUH
  { 787,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #787 = VCMPGTUHo
  { 788,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #788 = VCMPGTUW
  { 789,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList19, OperandInfo132,0,nullptr },  // Inst #789 = VCMPGTUWo
  { 790,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #790 = VCTSXS
  { 791,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #791 = VCTSXS_0
  { 792,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #792 = VCTUXS
  { 793,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #793 = VCTUXS_0
  { 794,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #794 = VEXPTEFP
  { 795,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #795 = VLOGEFP
  { 796,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #796 = VMADDFP
  { 797,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #797 = VMAXFP
  { 798,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #798 = VMAXSB
  { 799,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #799 = VMAXSH
  { 800,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #800 = VMAXSW
  { 801,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #801 = VMAXUB
  { 802,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #802 = VMAXUH
  { 803,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #803 = VMAXUW
  { 804,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #804 = VMHADDSHS
  { 805,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #805 = VMHRADDSHS
  { 806,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #806 = VMINFP
  { 807,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #807 = VMINSB
  { 808,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #808 = VMINSH
  { 809,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #809 = VMINSW
  { 810,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #810 = VMINUB
  { 811,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #811 = VMINUH
  { 812,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #812 = VMINUW
  { 813,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #813 = VMLADDUHM
  { 814,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #814 = VMRGHB
  { 815,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #815 = VMRGHH
  { 816,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #816 = VMRGHW
  { 817,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #817 = VMRGLB
  { 818,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #818 = VMRGLH
  { 819,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #819 = VMRGLW
  { 820,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #820 = VMSUMMBM
  { 821,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #821 = VMSUMSHM
  { 822,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #822 = VMSUMSHS
  { 823,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #823 = VMSUMUBM
  { 824,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #824 = VMSUMUHM
  { 825,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #825 = VMSUMUHS
  { 826,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #826 = VMULESB
  { 827,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #827 = VMULESH
  { 828,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #828 = VMULEUB
  { 829,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #829 = VMULEUH
  { 830,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #830 = VMULOSB
  { 831,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #831 = VMULOSH
  { 832,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #832 = VMULOUB
  { 833,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #833 = VMULOUH
  { 834,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #834 = VNMSUBFP
  { 835,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #835 = VNOR
  { 836,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #836 = VOR
  { 837,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #837 = VPERM
  { 838,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #838 = VPKPX
  { 839,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #839 = VPKSHSS
  { 840,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #840 = VPKSHUS
  { 841,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #841 = VPKSWSS
  { 842,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #842 = VPKSWUS
  { 843,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #843 = VPKUHUM
  { 844,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #844 = VPKUHUS
  { 845,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #845 = VPKUWUM
  { 846,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #846 = VPKUWUS
  { 847,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #847 = VREFP
  { 848,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #848 = VRFIM
  { 849,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #849 = VRFIN
  { 850,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #850 = VRFIP
  { 851,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #851 = VRFIZ
  { 852,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #852 = VRLB
  { 853,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #853 = VRLH
  { 854,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #854 = VRLW
  { 855,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #855 = VRSQRTEFP
  { 856,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #856 = VSEL
  { 857,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #857 = VSL
  { 858,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #858 = VSLB
  { 859,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #859 = VSLDOI
  { 860,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #860 = VSLH
  { 861,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #861 = VSLO
  { 862,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #862 = VSLW
  { 863,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #863 = VSPLTB
  { 864,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #864 = VSPLTH
  { 865,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #865 = VSPLTISB
  { 866,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #866 = VSPLTISH
  { 867,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #867 = VSPLTISW
  { 868,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #868 = VSPLTW
  { 869,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #869 = VSR
  { 870,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #870 = VSRAB
  { 871,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #871 = VSRAH
  { 872,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #872 = VSRAW
  { 873,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #873 = VSRB
  { 874,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #874 = VSRH
  { 875,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #875 = VSRO
  { 876,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #876 = VSRW
  { 877,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #877 = VSUBCUW
  { 878,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #878 = VSUBFP
  { 879,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #879 = VSUBSBS
  { 880,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #880 = VSUBSHS
  { 881,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #881 = VSUBSWS
  { 882,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #882 = VSUBUBM
  { 883,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #883 = VSUBUBS
  { 884,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #884 = VSUBUHM
  { 885,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #885 = VSUBUHS
  { 886,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #886 = VSUBUWM
  { 887,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #887 = VSUBUWS
  { 888,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #888 = VSUM2SWS
  { 889,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #889 = VSUM4SBS
  { 890,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #890 = VSUM4SHS
  { 891,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #891 = VSUM4UBS
  { 892,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #892 = VSUMSWS
  { 893,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #893 = VUPKHPX
  { 894,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #894 = VUPKHSB
  { 895,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #895 = VUPKHSH
  { 896,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #896 = VUPKLPX
  { 897,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #897 = VUPKLSB
  { 898,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #898 = VUPKLSH
  { 899,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #899 = VXOR
  { 900,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #900 = V_SET0
  { 901,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #901 = V_SET0B
  { 902,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #902 = V_SET0H
  { 903,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #903 = V_SETALLONES
  { 904,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #904 = V_SETALLONESB
  { 905,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #905 = V_SETALLONESH
  { 906,	1,	0,	9,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #906 = WAIT
  { 907,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #907 = XOR
  { 908,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #908 = XOR8
  { 909,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #909 = XOR8o
  { 910,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #910 = XORI
  { 911,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #911 = XORI8
  { 912,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #912 = XORIS
  { 913,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #913 = XORIS8
  { 914,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo10,0,nullptr },  // Inst #914 = XORo
  { 915,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #915 = XSABSDP
  { 916,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #916 = XSADDDP
  { 917,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #917 = XSCMPODP
  { 918,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #918 = XSCMPUDP
  { 919,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #919 = XSCPSGNDP
  { 920,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #920 = XSCVDPSP
  { 921,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #921 = XSCVDPSXDS
  { 922,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #922 = XSCVDPSXWS
  { 923,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #923 = XSCVDPUXDS
  { 924,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #924 = XSCVDPUXWS
  { 925,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #925 = XSCVSPDP
  { 926,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #926 = XSCVSXDDP
  { 927,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #927 = XSCVUXDDP
  { 928,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #928 = XSDIVDP
  { 929,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #929 = XSMADDADP
  { 930,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #930 = XSMADDMDP
  { 931,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #931 = XSMAXDP
  { 932,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #932 = XSMINDP
  { 933,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #933 = XSMSUBADP
  { 934,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #934 = XSMSUBMDP
  { 935,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #935 = XSMULDP
  { 936,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #936 = XSNABSDP
  { 937,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #937 = XSNEGDP
  { 938,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #938 = XSNMADDADP
  { 939,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #939 = XSNMADDMDP
  { 940,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #940 = XSNMSUBADP
  { 941,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #941 = XSNMSUBMDP
  { 942,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #942 = XSRDPI
  { 943,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #943 = XSRDPIC
  { 944,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #944 = XSRDPIM
  { 945,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #945 = XSRDPIP
  { 946,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #946 = XSRDPIZ
  { 947,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #947 = XSREDP
  { 948,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #948 = XSRSQRTEDP
  { 949,	2,	1,	16,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #949 = XSSQRTDP
  { 950,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #950 = XSSUBDP
  { 951,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #951 = XSTDIVDP
  { 952,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #952 = XSTSQRTDP
  { 953,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #953 = XVABSDP
  { 954,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #954 = XVABSSP
  { 955,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #955 = XVADDDP
  { 956,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #956 = XVADDSP
  { 957,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #957 = XVCMPEQDP
  { 958,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #958 = XVCMPEQDPo
  { 959,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #959 = XVCMPEQSP
  { 960,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #960 = XVCMPEQSPo
  { 961,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #961 = XVCMPGEDP
  { 962,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #962 = XVCMPGEDPo
  { 963,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #963 = XVCMPGESP
  { 964,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #964 = XVCMPGESPo
  { 965,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #965 = XVCMPGTDP
  { 966,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #966 = XVCMPGTDPo
  { 967,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #967 = XVCMPGTSP
  { 968,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList19, OperandInfo144,0,nullptr },  // Inst #968 = XVCMPGTSPo
  { 969,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #969 = XVCPSGNDP
  { 970,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #970 = XVCPSGNSP
  { 971,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #971 = XVCVDPSP
  { 972,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #972 = XVCVDPSXDS
  { 973,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #973 = XVCVDPSXWS
  { 974,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #974 = XVCVDPUXDS
  { 975,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #975 = XVCVDPUXWS
  { 976,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #976 = XVCVSPDP
  { 977,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #977 = XVCVSPSXDS
  { 978,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #978 = XVCVSPSXWS
  { 979,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #979 = XVCVSPUXDS
  { 980,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #980 = XVCVSPUXWS
  { 981,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #981 = XVCVSXDDP
  { 982,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #982 = XVCVSXDSP
  { 983,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #983 = XVCVSXWDP
  { 984,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #984 = XVCVSXWSP
  { 985,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #985 = XVCVUXDDP
  { 986,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #986 = XVCVUXDSP
  { 987,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #987 = XVCVUXWDP
  { 988,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #988 = XVCVUXWSP
  { 989,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #989 = XVDIVDP
  { 990,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #990 = XVDIVSP
  { 991,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #991 = XVMADDADP
  { 992,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #992 = XVMADDASP
  { 993,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #993 = XVMADDMDP
  { 994,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #994 = XVMADDMSP
  { 995,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #995 = XVMAXDP
  { 996,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #996 = XVMAXSP
  { 997,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #997 = XVMINDP
  { 998,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #998 = XVMINSP
  { 999,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #999 = XVMSUBADP
  { 1000,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1000 = XVMSUBASP
  { 1001,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1001 = XVMSUBMDP
  { 1002,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1002 = XVMSUBMSP
  { 1003,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1003 = XVMULDP
  { 1004,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1004 = XVMULSP
  { 1005,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1005 = XVNABSDP
  { 1006,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1006 = XVNABSSP
  { 1007,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1007 = XVNEGDP
  { 1008,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1008 = XVNEGSP
  { 1009,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1009 = XVNMADDADP
  { 1010,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1010 = XVNMADDASP
  { 1011,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1011 = XVNMADDMDP
  { 1012,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1012 = XVNMADDMSP
  { 1013,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1013 = XVNMSUBADP
  { 1014,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1014 = XVNMSUBASP
  { 1015,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1015 = XVNMSUBMDP
  { 1016,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1016 = XVNMSUBMSP
  { 1017,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1017 = XVRDPI
  { 1018,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1018 = XVRDPIC
  { 1019,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1019 = XVRDPIM
  { 1020,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1020 = XVRDPIP
  { 1021,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1021 = XVRDPIZ
  { 1022,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1022 = XVREDP
  { 1023,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1023 = XVRESP
  { 1024,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1024 = XVRSPI
  { 1025,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1025 = XVRSPIC
  { 1026,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1026 = XVRSPIM
  { 1027,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1027 = XVRSPIP
  { 1028,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1028 = XVRSPIZ
  { 1029,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1029 = XVRSQRTEDP
  { 1030,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1030 = XVRSQRTESP
  { 1031,	2,	1,	16,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1031 = XVSQRTDP
  { 1032,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1032 = XVSQRTSP
  { 1033,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1033 = XVSUBDP
  { 1034,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1034 = XVSUBSP
  { 1035,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo146,0,nullptr },  // Inst #1035 = XVTDIVDP
  { 1036,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo146,0,nullptr },  // Inst #1036 = XVTDIVSP
  { 1037,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1037 = XVTSQRTDP
  { 1038,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1038 = XVTSQRTSP
  { 1039,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1039 = XXLAND
  { 1040,	3,	1,	75,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1040 = XXLANDC
  { 1041,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1041 = XXLNOR
  { 1042,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1042 = XXLOR
  { 1043,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1043 = XXLORf
  { 1044,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1044 = XXLXOR
  { 1045,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1045 = XXMRGHW
  { 1046,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1046 = XXMRGLW
  { 1047,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1047 = XXPERMDI
  { 1048,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo149,0,nullptr },  // Inst #1048 = XXSEL
  { 1049,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1049 = XXSLDWI
  { 1050,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo150,0,nullptr },  // Inst #1050 = XXSPLTW
  { 1051,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo151,0,nullptr },  // Inst #1051 = gBC
  { 1052,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo151,0,nullptr },  // Inst #1052 = gBCA
  { 1053,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, OperandInfo152,0,nullptr },  // Inst #1053 = gBCCTR
  { 1054,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList20, OperandInfo152,0,nullptr },  // Inst #1054 = gBCCTRL
  { 1055,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList20, OperandInfo151,0,nullptr },  // Inst #1055 = gBCL
  { 1056,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList20, OperandInfo151,0,nullptr },  // Inst #1056 = gBCLA
  { 1057,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, OperandInfo152,0,nullptr },  // Inst #1057 = gBCLR
  { 1058,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList20, OperandInfo152,0,nullptr },  // Inst #1058 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 75 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 95 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 116 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 136 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 172 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 192 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 211 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 225 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 232 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 240 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 258 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 275 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 295 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 315 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 336 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 356 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 372 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 392 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 412 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 431 */ 'D', 'S', 'T', '6', '4', 0,
  /* 437 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 445 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 452 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 461 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 474 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 487 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 500 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 512 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 530 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 547 */ 'A', 'D', 'D', '4', 0,
  /* 552 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 565 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 575 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 588 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 598 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 618 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 638 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 659 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 679 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 695 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 715 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 735 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 754 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '6', 0,
  /* 766 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '7', 0,
  /* 778 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 786 */ 'L', 'H', 'A', '8', 0,
  /* 791 */ 'B', 'L', 'A', '8', 0,
  /* 796 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 803 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 810 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 816 */ 'S', 'T', 'B', '8', 0,
  /* 821 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 827 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 833 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 840 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 847 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 855 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 865 */ 'O', 'R', 'C', '8', 0,
  /* 870 */ 'A', 'D', 'D', '8', 0,
  /* 875 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 881 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 887 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 894 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 901 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 909 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 916 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 924 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 930 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 938 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 946 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 953 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 966 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 976 */ 'N', 'E', 'G', '8', 0,
  /* 981 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 988 */ 'S', 'T', 'H', '8', 0,
  /* 993 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 999 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 1006 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 0,
  /* 1014 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 1020 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 1039 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 1052 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 1071 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1091 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1110 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1125 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1144 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1163 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1181 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 1191 */ 'B', 'L', '8', 0,
  /* 1195 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1201 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1208 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1216 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1225 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1233 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1239 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1245 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1251 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1258 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1266 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1278 */ 'N', 'O', 'R', '8', 0,
  /* 1283 */ 'X', 'O', 'R', '8', 0,
  /* 1288 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1298 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1305 */ 'B', 'C', 'C', 'C', 'T', 'R', '8', 0,
  /* 1313 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1320 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1327 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1334 */ 'L', 'I', 'S', '8', 0,
  /* 1339 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1346 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 1362 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 1378 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1384 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1390 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1396 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1402 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1408 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1414 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1420 */ 'E', 'Q', 'V', '8', 0,
  /* 1425 */ 'S', 'T', 'W', '8', 0,
  /* 1430 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1436 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1442 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1448 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1455 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1462 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1469 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1476 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1483 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1490 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1497 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1503 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1509 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1515 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1521 */ 'L', 'B', 'Z', '8', 0,
  /* 1526 */ 'B', 'D', 'Z', '8', 0,
  /* 1531 */ 'L', 'H', 'Z', '8', 0,
  /* 1536 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1542 */ 'L', 'W', 'Z', '8', 0,
  /* 1547 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1559 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1571 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1583 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1590 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1598 */ 'D', 'C', 'B', 'A', 0,
  /* 1603 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1610 */ 'g', 'B', 'C', 'A', 0,
  /* 1615 */ 'B', 'C', 'C', 'A', 0,
  /* 1620 */ 'L', 'H', 'A', 0,
  /* 1624 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 1635 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 1648 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 1661 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1677 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1691 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 1697 */ 'B', 'L', 'A', 0,
  /* 1701 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 1707 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 1713 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 1719 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 1726 */ 'L', 'W', 'A', 0,
  /* 1730 */ 'B', 'D', 'Z', 'A', 0,
  /* 1735 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 1741 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 1749 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 1755 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 1762 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 1769 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 1775 */ 'V', 'R', 'L', 'B', 0,
  /* 1780 */ 'V', 'S', 'L', 'B', 0,
  /* 1785 */ 'V', 'S', 'R', 'B', 0,
  /* 1790 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 1798 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 1812 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 1819 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 1827 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 1836 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 1844 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 1851 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 1859 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 1868 */ 'E', 'X', 'T', 'S', 'B', 0,
  /* 1874 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 1881 */ 'M', 'F', 'T', 'B', 0,
  /* 1886 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 1893 */ 'S', 'T', 'B', 0,
  /* 1897 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 1905 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 1912 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 1919 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 1927 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 1936 */ 'F', 'S', 'U', 'B', 0,
  /* 1941 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 1947 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 1954 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 1963 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 1970 */ 'g', 'B', 'C', 0,
  /* 1974 */ 'B', 'C', 'C', 0,
  /* 1978 */ 'A', 'D', 'D', 'C', 0,
  /* 1983 */ 'X', 'X', 'L', 'A', 'N', 'D', 'C', 0,
  /* 1991 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 1998 */ 'V', 'A', 'N', 'D', 'C', 0,
  /* 2004 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 2010 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 2016 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 2022 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 2028 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 2035 */ 'X', 'S', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2043 */ 'X', 'V', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2051 */ 'X', 'V', 'R', 'S', 'P', 'I', 'C', 0,
  /* 2059 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 2067 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 2073 */ 'M', 'S', 'Y', 'N', 'C', 0,
  /* 2079 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2088 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 2094 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 2109 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 2121 */ 'S', 'C', 0,
  /* 2124 */ 'S', 'R', 'A', 'D', 0,
  /* 2129 */ 'F', 'A', 'D', 'D', 0,
  /* 2134 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 2140 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 2147 */ 'L', 'F', 'D', 0,
  /* 2151 */ 'S', 'T', 'F', 'D', 0,
  /* 2156 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 2162 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 2168 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 2174 */ 'F', 'C', 'T', 'I', 'D', 0,
  /* 2180 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 2186 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 2192 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 2198 */ 'S', 'L', 'D', 0,
  /* 2202 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2208 */ 'X', 'X', 'L', 'A', 'N', 'D', 0,
  /* 2215 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2222 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2228 */ 'V', 'A', 'N', 'D', 0,
  /* 2233 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2246 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2254 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2260 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2266 */ 'C', 'M', 'P', 'D', 0,
  /* 2271 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 2278 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2284 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2291 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2299 */ 'S', 'T', 'D', 0,
  /* 2303 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2310 */ 'D', 'I', 'V', 'D', 0,
  /* 2315 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2321 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2328 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 2341 */ 'A', 'D', 'D', 'E', 0,
  /* 2346 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 2354 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 2360 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 2366 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 2372 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2379 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 2385 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 2392 */ 'F', 'R', 'E', 0,
  /* 2396 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 2403 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 2411 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2421 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2430 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2439 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2454 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2468 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2481 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 2487 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 2494 */ 'D', 'C', 'B', 'F', 0,
  /* 2499 */ 'S', 'U', 'B', 'F', 0,
  /* 2504 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 2517 */ 'M', 'C', 'R', 'F', 0,
  /* 2522 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 2529 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 2536 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 2542 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 2548 */ 'N', 'E', 'G', 0,
  /* 2552 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2567 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2581 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 2595 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 2603 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 2609 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 2616 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 2623 */ 'V', 'R', 'L', 'H', 0,
  /* 2628 */ 'V', 'S', 'L', 'H', 0,
  /* 2633 */ 'V', 'S', 'R', 'H', 0,
  /* 2638 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 2646 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 2660 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 2667 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 2675 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 2684 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 2692 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 2699 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 2707 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 2716 */ 'E', 'X', 'T', 'S', 'H', 0,
  /* 2722 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 2729 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 2736 */ 'S', 'T', 'H', 0,
  /* 2740 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 2748 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 2755 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 2762 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 2770 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 2779 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 2788 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 2795 */ 'D', 'C', 'B', 'I', 0,
  /* 2800 */ 'I', 'C', 'B', 'I', 0,
  /* 2805 */ 'S', 'U', 'B', 'I', 0,
  /* 2810 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 2816 */ 'A', 'D', 'D', 'I', 0,
  /* 2821 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 2828 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 2837 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 2844 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 0,
  /* 2853 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 2859 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 2866 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 2873 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 2880 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 2887 */ 'T', 'D', 'I', 0,
  /* 2891 */ 'P', 'H', 'I', 0,
  /* 2895 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 2901 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 2908 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 2915 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 2922 */ 'X', 'S', 'R', 'D', 'P', 'I', 0,
  /* 2929 */ 'X', 'V', 'R', 'D', 'P', 'I', 0,
  /* 2936 */ 'X', 'V', 'R', 'S', 'P', 'I', 0,
  /* 2943 */ 'X', 'O', 'R', 'I', 0,
  /* 2948 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 2957 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 2963 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 0,
  /* 2971 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 2978 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 2987 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 2994 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 3001 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 3007 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 3014 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 3021 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 3028 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 3035 */ 'T', 'W', 'I', 0,
  /* 3039 */ 'B', 'L', 0,
  /* 3042 */ 'g', 'B', 'C', 'L', 0,
  /* 3047 */ 'B', 'C', 'C', 'L', 0,
  /* 3052 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 3058 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 3065 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3074 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3083 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 3090 */ 'I', 'S', 'E', 'L', 0,
  /* 3095 */ 'V', 'S', 'E', 'L', 0,
  /* 3100 */ 'X', 'X', 'S', 'E', 'L', 0,
  /* 3106 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 3113 */ 'K', 'I', 'L', 'L', 0,
  /* 3118 */ 'B', 'L', 'R', 'L', 0,
  /* 3123 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 3130 */ 'B', 'C', 'C', 'L', 'R', 'L', 0,
  /* 3137 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 3144 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 3152 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 3158 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 3166 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', 0,
  /* 3174 */ 'L', 'V', 'S', 'L', 0,
  /* 3179 */ 'F', 'M', 'U', 'L', 0,
  /* 3184 */ 'L', 'V', 'X', 'L', 0,
  /* 3189 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 3195 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 3201 */ 'B', 'D', 'Z', 'L', 0,
  /* 3206 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 3212 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 3219 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 3228 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 3239 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 3250 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3262 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3274 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 3283 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 3291 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 3299 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 3308 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 3317 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 3325 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3335 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3343 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 3352 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 3358 */ 'X', 'S', 'R', 'D', 'P', 'I', 'M', 0,
  /* 3366 */ 'X', 'V', 'R', 'D', 'P', 'I', 'M', 0,
  /* 3374 */ 'X', 'V', 'R', 'S', 'P', 'I', 'M', 0,
  /* 3382 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 3389 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 3395 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 3401 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 3411 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 3419 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 3427 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 3435 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 3443 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 3449 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 3465 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3482 */ 'E', 'I', 'E', 'I', 'O', 0,
  /* 3488 */ 'V', 'S', 'L', 'O', 0,
  /* 3493 */ 'G', 'e', 't', 'G', 'B', 'R', 'O', 0,
  /* 3501 */ 'V', 'S', 'R', 'O', 0,
  /* 3506 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 3515 */ 'T', 'R', 'A', 'P', 0,
  /* 3520 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3531 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3542 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3552 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3562 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3573 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3584 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3594 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3604 */ 'X', 'S', 'S', 'U', 'B', 'D', 'P', 0,
  /* 3612 */ 'X', 'V', 'S', 'U', 'B', 'D', 'P', 0,
  /* 3620 */ 'X', 'S', 'A', 'D', 'D', 'D', 'P', 0,
  /* 3628 */ 'X', 'V', 'A', 'D', 'D', 'D', 'P', 0,
  /* 3636 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 3646 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 3656 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 3666 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 3676 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 3686 */ 'X', 'S', 'R', 'E', 'D', 'P', 0,
  /* 3693 */ 'X', 'V', 'R', 'E', 'D', 'P', 0,
  /* 3700 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 3711 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 3722 */ 'X', 'S', 'N', 'E', 'G', 'D', 'P', 0,
  /* 3730 */ 'X', 'V', 'N', 'E', 'G', 'D', 'P', 0,
  /* 3738 */ 'X', 'S', 'M', 'U', 'L', 'D', 'P', 0,
  /* 3746 */ 'X', 'V', 'M', 'U', 'L', 'D', 'P', 0,
  /* 3754 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3765 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3776 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3786 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3796 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3807 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3818 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3828 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3838 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 3848 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 3858 */ 'X', 'S', 'M', 'I', 'N', 'D', 'P', 0,
  /* 3866 */ 'X', 'V', 'M', 'I', 'N', 'D', 'P', 0,
  /* 3874 */ 'X', 'S', 'C', 'M', 'P', 'O', 'D', 'P', 0,
  /* 3883 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 3892 */ 'X', 'V', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 3901 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 3911 */ 'X', 'S', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 3920 */ 'X', 'V', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 3929 */ 'X', 'S', 'A', 'B', 'S', 'D', 'P', 0,
  /* 3937 */ 'X', 'V', 'A', 'B', 'S', 'D', 'P', 0,
  /* 3945 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 3955 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 3964 */ 'X', 'S', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 3974 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 3984 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 3993 */ 'X', 'S', 'C', 'M', 'P', 'U', 'D', 'P', 0,
  /* 4002 */ 'X', 'S', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4010 */ 'X', 'S', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4019 */ 'X', 'V', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4028 */ 'X', 'V', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4036 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'D', 'P', 0,
  /* 4046 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'D', 'P', 0,
  /* 4056 */ 'X', 'S', 'M', 'A', 'X', 'D', 'P', 0,
  /* 4064 */ 'X', 'V', 'M', 'A', 'X', 'D', 'P', 0,
  /* 4072 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 4080 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 4089 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 4096 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 4104 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 4111 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 4119 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 4128 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 4134 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 4143 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 4153 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 4160 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 4169 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 4178 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 4185 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 4191 */ 'X', 'S', 'R', 'D', 'P', 'I', 'P', 0,
  /* 4199 */ 'X', 'V', 'R', 'D', 'P', 'I', 'P', 0,
  /* 4207 */ 'X', 'V', 'R', 'S', 'P', 'I', 'P', 0,
  /* 4215 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 4224 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 4232 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 4243 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 4253 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 4264 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 4274 */ 'X', 'V', 'S', 'U', 'B', 'S', 'P', 0,
  /* 4282 */ 'X', 'V', 'A', 'D', 'D', 'S', 'P', 0,
  /* 4290 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 4300 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 4310 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 0,
  /* 4320 */ 'X', 'V', 'R', 'E', 'S', 'P', 0,
  /* 4327 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 4338 */ 'X', 'V', 'N', 'E', 'G', 'S', 'P', 0,
  /* 4346 */ 'X', 'V', 'M', 'U', 'L', 'S', 'P', 0,
  /* 4354 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 4365 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 4375 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 4386 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 4396 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'S', 'P', 0,
  /* 4406 */ 'X', 'V', 'M', 'I', 'N', 'S', 'P', 0,
  /* 4414 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 4423 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 4432 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 0,
  /* 4442 */ 'F', 'R', 'S', 'P', 0,
  /* 4447 */ 'X', 'V', 'N', 'A', 'B', 'S', 'S', 'P', 0,
  /* 4456 */ 'X', 'V', 'A', 'B', 'S', 'S', 'P', 0,
  /* 4464 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 0,
  /* 4474 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 4484 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 4493 */ 'X', 'V', 'T', 'D', 'I', 'V', 'S', 'P', 0,
  /* 4502 */ 'X', 'V', 'D', 'I', 'V', 'S', 'P', 0,
  /* 4510 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'S', 'P', 0,
  /* 4520 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'S', 'P', 0,
  /* 4530 */ 'X', 'V', 'M', 'A', 'X', 'S', 'P', 0,
  /* 4538 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 4553 */ 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 4563 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 4569 */ 'M', 'F', 'C', 'R', 0,
  /* 4574 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 4581 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 4588 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 4595 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 4606 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 4615 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 4628 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 4639 */ 'B', 'L', 'R', 0,
  /* 4643 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 4649 */ 'B', 'C', 'C', 'L', 'R', 0,
  /* 4655 */ 'M', 'F', 'L', 'R', 0,
  /* 4660 */ 'M', 'T', 'L', 'R', 0,
  /* 4665 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 4671 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 4678 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 4689 */ 'F', 'M', 'R', 0,
  /* 4693 */ 'X', 'X', 'L', 'O', 'R', 0,
  /* 4699 */ 'X', 'X', 'L', 'N', 'O', 'R', 0,
  /* 4706 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 4712 */ 'V', 'N', 'O', 'R', 0,
  /* 4717 */ 'C', 'R', 'O', 'R', 0,
  /* 4722 */ 'V', 'O', 'R', 0,
  /* 4726 */ 'X', 'X', 'L', 'X', 'O', 'R', 0,
  /* 4733 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 4739 */ 'V', 'X', 'O', 'R', 0,
  /* 4744 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 4750 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 4756 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 4762 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 4768 */ 'L', 'V', 'S', 'R', 0,
  /* 4773 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 4782 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 4789 */ 'B', 'C', 'C', 'C', 'T', 'R', 0,
  /* 4796 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 4802 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 4808 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 4817 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 4825 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 4833 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 4842 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 4850 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 4858 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 4864 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 4871 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 4879 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 4885 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 4892 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 4900 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 4907 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 4918 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 4929 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'D', 'S', 0,
  /* 4940 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 4951 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 4962 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'D', 'S', 0,
  /* 4973 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 4986 */ 'F', 'R', 'E', 'S', 0,
  /* 4991 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 5000 */ 'M', 'F', 'F', 'S', 0,
  /* 5005 */ 'L', 'F', 'S', 0,
  /* 5009 */ 'S', 'T', 'F', 'S', 0,
  /* 5014 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 5020 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 5029 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 5037 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5047 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5058 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5066 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 5075 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 5083 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 5091 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 5100 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 5106 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 5112 */ 'L', 'I', 'S', 0,
  /* 5116 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 5122 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 5128 */ 'A', 'D', 'D', '4', 'T', 'L', 'S', 0,
  /* 5136 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 5144 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 5152 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 5164 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 5170 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 5176 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 5184 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 5190 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 5196 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 5213 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 5219 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 5226 */ 'D', 'S', 'S', 0,
  /* 5230 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 5238 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 5246 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 5253 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 5261 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 5269 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 5277 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 5284 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 5292 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 5300 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 5306 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 5315 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 5323 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 5331 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 5339 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 5347 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 5355 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5366 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5377 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5388 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5399 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5410 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5421 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 5428 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 5435 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 5441 */ 'D', 'C', 'B', 'T', 0,
  /* 5446 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 5453 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 5462 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 5470 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 5476 */ 'W', 'A', 'I', 'T', 0,
  /* 5481 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 5495 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 5507 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 5522 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 5537 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 5548 */ 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 5557 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 5566 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 5581 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 5587 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 5593 */ 'D', 'S', 'T', 0,
  /* 5597 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 5604 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 5610 */ 'D', 'S', 'T', 'T', 0,
  /* 5615 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 5622 */ 'L', 'H', 'A', 'U', 0,
  /* 5627 */ 'S', 'T', 'B', 'U', 0,
  /* 5632 */ 'L', 'F', 'D', 'U', 0,
  /* 5637 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 5643 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 5650 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 5657 */ 'L', 'D', 'U', 0,
  /* 5661 */ 'S', 'T', 'D', 'U', 0,
  /* 5666 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 5672 */ 'S', 'T', 'H', 'U', 0,
  /* 5677 */ 'L', 'F', 'S', 'U', 0,
  /* 5682 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 5688 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 5695 */ 'S', 'T', 'W', 'U', 0,
  /* 5700 */ 'D', 'I', 'V', 'W', 'U', 0,
  /* 5706 */ 'L', 'B', 'Z', 'U', 0,
  /* 5711 */ 'L', 'H', 'Z', 'U', 0,
  /* 5716 */ 'L', 'W', 'Z', 'U', 0,
  /* 5721 */ 'F', 'D', 'I', 'V', 0,
  /* 5726 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 5732 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 5738 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 5745 */ 'X', 'X', 'M', 'R', 'G', 'H', 'W', 0,
  /* 5753 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 5759 */ 'F', 'C', 'T', 'I', 'W', 0,
  /* 5765 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 5772 */ 'X', 'X', 'M', 'R', 'G', 'L', 'W', 0,
  /* 5780 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 5786 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 5792 */ 'V', 'R', 'L', 'W', 0,
  /* 5797 */ 'V', 'S', 'L', 'W', 0,
  /* 5802 */ 'L', 'M', 'W', 0,
  /* 5806 */ 'S', 'T', 'M', 'W', 0,
  /* 5811 */ 'C', 'M', 'P', 'W', 0,
  /* 5816 */ 'V', 'S', 'R', 'W', 0,
  /* 5821 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 5828 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 5837 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 5844 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 5853 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 5859 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 5866 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 5873 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 0,
  /* 5881 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 5889 */ 'S', 'T', 'W', 0,
  /* 5893 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 5901 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 5909 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 5916 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 5923 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 5932 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 5941 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 5948 */ 'D', 'I', 'V', 'W', 0,
  /* 5953 */ 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 5960 */ 'L', 'X', 'V', 'D', '2', 'X', 0,
  /* 5967 */ 'S', 'T', 'X', 'V', 'D', '2', 'X', 0,
  /* 5975 */ 'L', 'X', 'V', 'W', '4', 'X', 0,
  /* 5982 */ 'S', 'T', 'X', 'V', 'W', '4', 'X', 0,
  /* 5990 */ 'L', 'H', 'A', 'X', 0,
  /* 5995 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 6002 */ 'L', 'W', 'A', 'X', 0,
  /* 6007 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 6013 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 6020 */ 'S', 'T', 'B', 'X', 0,
  /* 6025 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 6031 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 6037 */ 'L', 'F', 'D', 'X', 0,
  /* 6042 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 6048 */ 'L', 'D', 'X', 0,
  /* 6052 */ 'L', 'X', 'S', 'D', 'X', 0,
  /* 6058 */ 'S', 'T', 'X', 'S', 'D', 'X', 0,
  /* 6065 */ 'S', 'T', 'D', 'X', 0,
  /* 6070 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 6076 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 6083 */ 'S', 'T', 'H', 'X', 0,
  /* 6088 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 6096 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 6102 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 6110 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 6116 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 6122 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 6128 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 6135 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 6141 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 6148 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 6154 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 6161 */ 'L', 'X', 'V', 'D', 'S', 'X', 0,
  /* 6168 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 6174 */ 'L', 'F', 'S', 'X', 0,
  /* 6179 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 6185 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 6191 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 6197 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 6203 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 6209 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 6216 */ 'L', 'D', 'U', 'X', 0,
  /* 6221 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 6227 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 6233 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 6239 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 6245 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 6252 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 6258 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 6264 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 6270 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 6276 */ 'L', 'V', 'X', 0,
  /* 6280 */ 'S', 'T', 'V', 'X', 0,
  /* 6285 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 6291 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 6298 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 6305 */ 'S', 'T', 'W', 'X', 0,
  /* 6310 */ 'L', 'B', 'Z', 'X', 0,
  /* 6315 */ 'L', 'H', 'Z', 'X', 0,
  /* 6320 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 6327 */ 'L', 'W', 'Z', 'X', 0,
  /* 6332 */ 'C', 'O', 'P', 'Y', 0,
  /* 6337 */ 'D', 'C', 'B', 'Z', 0,
  /* 6342 */ 'L', 'B', 'Z', 0,
  /* 6346 */ 'B', 'D', 'Z', 0,
  /* 6350 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 6357 */ 'L', 'H', 'Z', 0,
  /* 6361 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 6367 */ 'X', 'S', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 6375 */ 'X', 'V', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 6383 */ 'X', 'V', 'R', 'S', 'P', 'I', 'Z', 0,
  /* 6391 */ 'B', 'D', 'N', 'Z', 0,
  /* 6396 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 6404 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 6412 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 6419 */ 'L', 'W', 'Z', 0,
  /* 6423 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', '_', 0,
  /* 6432 */ 'B', 'L', '8', '_', 'T', 'L', 'S', '_', 0,
  /* 6441 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 6447 */ 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 6454 */ 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 6465 */ 'X', 'X', 'L', 'O', 'R', 'f', 0,
  /* 6472 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 6483 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 6494 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 6505 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 6512 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 6520 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 6526 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 6533 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 6541 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 6550 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 6556 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 6563 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 6570 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 6578 */ 'B', 'D', 'Z', 'm', 0,
  /* 6583 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 6589 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 'n', 0,
  /* 6598 */ 'B', 'C', 'C', 'T', 'R', '8', 'n', 0,
  /* 6606 */ 'B', 'C', 'n', 0,
  /* 6610 */ 'B', 'C', 'L', 'n', 0,
  /* 6615 */ 'B', 'C', 'L', 'R', 'L', 'n', 0,
  /* 6622 */ 'B', 'C', 'C', 'T', 'R', 'L', 'n', 0,
  /* 6630 */ 'B', 'C', 'L', 'R', 'n', 0,
  /* 6636 */ 'B', 'C', 'C', 'T', 'R', 'n', 0,
  /* 6643 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 6656 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 6662 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 6670 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 6677 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 6684 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 6692 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 6698 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 6704 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 6711 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 6718 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 6726 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 6734 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 6743 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 6751 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 6760 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 6767 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 6773 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 6781 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 'o', 0,
  /* 6790 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 6799 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 6805 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 6811 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 6817 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 6827 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 6834 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 6844 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 6850 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 6857 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 6865 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 6875 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 6881 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 6887 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 6894 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 6901 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 6908 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 6915 */ 'O', 'R', 'C', 'o', 0,
  /* 6920 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 6926 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 6932 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 6939 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 6947 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 6954 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 6961 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 6968 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 6975 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 6982 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 6989 */ 'S', 'L', 'D', 'o', 0,
  /* 6994 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 7001 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 7007 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 7016 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 7023 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 7030 */ 'S', 'R', 'D', 'o', 0,
  /* 7035 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 7042 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 7050 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 7056 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 7063 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 7071 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 7077 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 7084 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 7091 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 7099 */ 'F', 'R', 'E', 'o', 0,
  /* 7104 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 7113 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 7120 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 7128 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 7134 */ 'N', 'E', 'G', 'o', 0,
  /* 7139 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 7149 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 7156 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 7166 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 7176 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 7183 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 7193 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 7201 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 7207 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 7215 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 7223 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 7231 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 7239 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 7247 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 7255 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 7262 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 7272 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 7280 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 7288 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 7296 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 7304 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 7312 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 7320 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 7327 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 7335 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 7341 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 7349 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 7356 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 'o', 0,
  /* 7367 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 'o', 0,
  /* 7378 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 'o', 0,
  /* 7389 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 7398 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 7408 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 7418 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 7428 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 'o', 0,
  /* 7439 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 'o', 0,
  /* 7450 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 7456 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 'o', 0,
  /* 7467 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 7474 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 7482 */ 'F', 'M', 'R', 'o', 0,
  /* 7487 */ 'N', 'O', 'R', 'o', 0,
  /* 7492 */ 'X', 'O', 'R', 'o', 0,
  /* 7497 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7504 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7512 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7521 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7528 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7536 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7545 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 7553 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 7559 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 7569 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 7576 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 7583 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 7590 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 7597 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 7604 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 7613 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 7620 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 7627 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 7634 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 7642 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 7650 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 7659 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 7666 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 7673 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 7680 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 7688 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 7696 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 7703 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 7711 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 7718 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 7724 */ 'E', 'Q', 'V', 'o', 0,
  /* 7729 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 7735 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 7742 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 7749 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 7756 */ 'S', 'L', 'W', 'o', 0,
  /* 7761 */ 'S', 'R', 'W', 'o', 0,
  /* 7766 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 7776 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 7783 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 7793 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 7803 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 7809 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 7817 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 7825 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 7834 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 7843 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 7851 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 7858 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 7866 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 7872 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 7879 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 7887 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 7896 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 7902 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 7909 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 7916 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 7924 */ 'B', 'D', 'Z', 'p', 0,
  /* 7929 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 7935 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 7946 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 7956 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 7970 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 7980 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 7990 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 8000 */ 'L', 'A', 'x', 0,
  /* 8004 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    2891U, 3401U, 3449U, 3074U, 3065U, 3113U, 2552U, 2567U, 
    2504U, 2581U, 5196U, 2411U, 2328U, 6332U, 2372U, 5566U, 
    2233U, 3506U, 5537U, 547U, 5128U, 6656U, 870U, 5136U, 
    6423U, 6698U, 1978U, 821U, 6670U, 6875U, 2341U, 881U, 
    6711U, 7071U, 2816U, 993U, 2016U, 840U, 6901U, 5106U, 
    1327U, 1677U, 1661U, 1635U, 1648U, 1624U, 3262U, 3228U, 
    3239U, 3219U, 2379U, 894U, 6726U, 7084U, 2481U, 909U, 
    6743U, 7113U, 3465U, 4538U, 2211U, 876U, 6705U, 1986U, 
    827U, 6677U, 6881U, 7576U, 1590U, 7201U, 1583U, 5507U, 
    1346U, 5522U, 1362U, 7002U, 695U, 152U, 372U, 1125U, 
    618U, 75U, 295U, 1052U, 659U, 116U, 336U, 1091U, 
    638U, 95U, 315U, 1071U, 735U, 192U, 412U, 1163U, 
    598U, 55U, 275U, 1020U, 715U, 172U, 392U, 1144U, 
    679U, 136U, 356U, 1110U, 1747U, 1600U, 1971U, 1974U, 
    1615U, 4789U, 1305U, 3166U, 1216U, 3047U, 1707U, 4649U, 
    3130U, 4783U, 1298U, 6598U, 3159U, 1208U, 6589U, 6622U, 
    6636U, 3043U, 4644U, 3124U, 6615U, 6630U, 7970U, 6610U, 
    4777U, 1292U, 3152U, 1201U, 6606U, 6391U, 1536U, 1735U, 
    6526U, 7872U, 3206U, 1719U, 6512U, 7858U, 4671U, 1258U, 
    3144U, 6541U, 7887U, 6570U, 7916U, 6556U, 7902U, 6583U, 
    7929U, 6346U, 1526U, 1730U, 6520U, 7866U, 3201U, 1713U, 
    6505U, 7851U, 4665U, 1251U, 3137U, 6533U, 7879U, 6563U, 
    7909U, 6550U, 7896U, 6578U, 7924U, 3039U, 1191U, 4224U, 
    5152U, 5144U, 6432U, 1697U, 791U, 4215U, 4639U, 3118U, 
    2828U, 7183U, 2978U, 7262U, 2859U, 7207U, 3007U, 7288U, 
    2266U, 2853U, 2192U, 2821U, 5786U, 2971U, 5811U, 3001U, 
    2321U, 7063U, 5953U, 7809U, 5446U, 5453U, 2222U, 1991U, 
    5726U, 2215U, 4706U, 4717U, 2088U, 5470U, 5462U, 4733U, 
    1598U, 2494U, 2795U, 5587U, 5441U, 5597U, 6337U, 3195U, 
    2310U, 5666U, 7696U, 7050U, 5948U, 5700U, 7711U, 7803U, 
    5226U, 3106U, 5593U, 431U, 5604U, 437U, 5615U, 452U, 
    5610U, 445U, 2079U, 855U, 240U, 512U, 258U, 530U, 
    7956U, 3482U, 5728U, 1420U, 6811U, 7724U, 2837U, 7193U, 
    2994U, 7280U, 2880U, 7231U, 3028U, 7312U, 1868U, 803U, 
    461U, 6662U, 6827U, 2716U, 981U, 474U, 6773U, 7149U, 
    5853U, 500U, 6643U, 7776U, 2278U, 7035U, 5213U, 7627U, 
    2129U, 4879U, 7521U, 6926U, 8004U, 2168U, 4900U, 7545U, 
    5650U, 5253U, 7650U, 7688U, 6961U, 2303U, 5277U, 2246U, 
    7007U, 5176U, 7604U, 2174U, 6396U, 7825U, 6350U, 7817U, 
    6968U, 5759U, 6404U, 7834U, 6412U, 7843U, 7742U, 5721U, 
    5300U, 7659U, 7718U, 2134U, 4885U, 7528U, 6932U, 4689U, 
    7482U, 1941U, 4864U, 7504U, 6850U, 3179U, 5164U, 7590U, 
    7335U, 2284U, 7042U, 5219U, 7634U, 2156U, 6947U, 5014U, 
    7569U, 2140U, 4892U, 7536U, 6939U, 1947U, 4871U, 7512U, 
    6857U, 2392U, 4986U, 7553U, 7099U, 2202U, 6994U, 5170U, 
    7597U, 2254U, 7016U, 5184U, 7613U, 2260U, 7023U, 5190U, 
    7620U, 2315U, 7056U, 5435U, 7666U, 4442U, 7450U, 2403U, 
    4991U, 7559U, 7104U, 2180U, 6975U, 5122U, 7583U, 5581U, 
    5246U, 7642U, 7673U, 1936U, 4858U, 7497U, 6844U, 4628U, 
    4615U, 3493U, 2800U, 2987U, 7272U, 2866U, 7215U, 3014U, 
    7296U, 3090U, 1195U, 2067U, 1698U, 8000U, 6342U, 1521U, 
    5706U, 1402U, 6258U, 1476U, 6310U, 1503U, 2183U, 6110U, 
    6122U, 5657U, 6216U, 6048U, 3250U, 211U, 6454U, 6441U, 
    5557U, 2948U, 3212U, 2147U, 5632U, 6203U, 6037U, 5995U, 
    6320U, 5005U, 5677U, 6239U, 6174U, 1620U, 786U, 5622U, 
    1378U, 6185U, 1448U, 5990U, 1430U, 6135U, 6357U, 1531U, 
    5711U, 1408U, 6264U, 1483U, 6315U, 1509U, 2898U, 1002U, 
    5112U, 1334U, 5802U, 6007U, 6070U, 6285U, 3174U, 4768U, 
    6276U, 3184U, 1726U, 6116U, 6191U, 6002U, 232U, 225U, 
    6148U, 6419U, 1542U, 5716U, 1414U, 6270U, 1490U, 6327U, 
    1515U, 6447U, 6052U, 5960U, 6161U, 5975U, 2517U, 4569U, 
    1233U, 4796U, 1313U, 5000U, 4655U, 1239U, 4756U, 2522U, 
    930U, 4744U, 1881U, 810U, 2421U, 7980U, 4581U, 2073U, 
    2536U, 946U, 4802U, 1320U, 7935U, 7946U, 0U, 48U, 
    2542U, 4660U, 1245U, 4762U, 2271U, 2529U, 938U, 4750U, 
    2430U, 7990U, 4588U, 2162U, 5643U, 7680U, 6954U, 5753U, 
    5688U, 7703U, 7735U, 2186U, 6982U, 2895U, 999U, 5780U, 
    7749U, 4678U, 1266U, 2217U, 875U, 6704U, 7001U, 2548U, 
    976U, 6767U, 7134U, 4220U, 754U, 766U, 4702U, 1278U, 
    6799U, 7487U, 4696U, 1279U, 6800U, 2090U, 865U, 6692U, 
    6915U, 2944U, 1015U, 5117U, 1340U, 7488U, 2291U, 5881U, 
    5548U, 4595U, 5481U, 2439U, 3052U, 7320U, 4563U, 7467U, 
    2022U, 3058U, 487U, 7327U, 4574U, 7474U, 6908U, 2901U, 
    7239U, 2908U, 1006U, 6781U, 7247U, 3382U, 1225U, 6790U, 
    7341U, 3389U, 7349U, 2873U, 7223U, 3021U, 7304U, 2121U, 
    552U, 953U, 575U, 1039U, 2094U, 565U, 966U, 588U, 
    1181U, 2109U, 1691U, 2360U, 2346U, 2396U, 2198U, 2832U, 
    7187U, 6989U, 5798U, 2982U, 7266U, 7756U, 4606U, 5495U, 
    2468U, 2124U, 2810U, 7176U, 6920U, 5733U, 2957U, 7255U, 
    7729U, 2274U, 2868U, 7217U, 7030U, 5817U, 3016U, 7298U, 
    7761U, 1893U, 816U, 5627U, 1384U, 6197U, 1455U, 6020U, 
    1436U, 2299U, 6128U, 6025U, 5661U, 6221U, 6065U, 2151U, 
    5637U, 6209U, 6042U, 6298U, 5009U, 5682U, 6245U, 6179U, 
    2736U, 988U, 6141U, 5672U, 1390U, 6233U, 1462U, 6083U, 
    1442U, 5806U, 6013U, 6076U, 6291U, 6280U, 3189U, 5889U, 
    1425U, 6154U, 6031U, 5695U, 1396U, 6252U, 1469U, 6305U, 
    1497U, 6058U, 5967U, 5982U, 2499U, 924U, 6760U, 2004U, 
    833U, 6684U, 6887U, 2354U, 887U, 6718U, 7077U, 2028U, 
    847U, 2385U, 901U, 6734U, 7091U, 2487U, 916U, 6751U, 
    7120U, 7128U, 2805U, 2010U, 6894U, 5100U, 2062U, 1769U, 
    796U, 1603U, 778U, 4773U, 1288U, 6472U, 1547U, 6483U, 
    1559U, 6494U, 1571U, 2296U, 2887U, 2366U, 3083U, 2059U, 
    3515U, 5870U, 3035U, 2454U, 4553U, 5901U, 4104U, 4825U, 
    5058U, 5323U, 3291U, 4850U, 3335U, 5083U, 3435U, 5347U, 
    2228U, 1998U, 1812U, 2660U, 5821U, 1905U, 2748U, 5909U, 
    6168U, 32U, 6227U, 40U, 4072U, 7389U, 4160U, 7408U, 
    1927U, 6834U, 2770U, 7156U, 5923U, 7783U, 4119U, 7398U, 
    4169U, 7418U, 1859U, 6817U, 2707U, 7139U, 5844U, 7766U, 
    1954U, 6865U, 2779U, 7166U, 5932U, 7793U, 5421U, 14U, 
    5428U, 23U, 4134U, 4111U, 4096U, 4178U, 1874U, 2722U, 
    5859U, 1963U, 2788U, 5941U, 5037U, 5047U, 4153U, 1844U, 
    2692U, 5837U, 1912U, 2755U, 5916U, 3325U, 1755U, 2609U, 
    5738U, 1762U, 2616U, 5765U, 3274U, 3308U, 5066U, 3299U, 
    3343U, 5091U, 1790U, 2638U, 1897U, 2740U, 1851U, 2699U, 
    1919U, 2762U, 4080U, 4712U, 4722U, 3395U, 6096U, 5230U, 
    5261U, 5238U, 5284U, 3411U, 5269U, 3419U, 5292U, 4128U, 
    3352U, 3443U, 4185U, 6361U, 1775U, 2623U, 5792U, 4143U, 
    3095U, 3175U, 1780U, 2915U, 2628U, 3488U, 5797U, 1886U, 
    2729U, 1827U, 2675U, 5828U, 5866U, 4769U, 1749U, 2603U, 
    5732U, 1785U, 2633U, 3501U, 5816U, 5893U, 4089U, 4817U, 
    5029U, 5315U, 3283U, 4842U, 3317U, 5075U, 3427U, 5339U, 
    5306U, 4808U, 5020U, 4833U, 5331U, 6088U, 1819U, 2667U, 
    6102U, 1836U, 2684U, 4739U, 7U, 1741U, 2595U, 4973U, 
    1798U, 2646U, 5476U, 4729U, 1283U, 6805U, 2943U, 1014U, 
    5116U, 1339U, 7492U, 3929U, 3620U, 3874U, 3993U, 3838U, 
    4414U, 4907U, 5355U, 4940U, 5388U, 3883U, 3636U, 3656U, 
    4002U, 3584U, 3818U, 4056U, 3858U, 3542U, 3776U, 3738U, 
    3911U, 3722U, 3562U, 3796U, 3520U, 3754U, 2922U, 2035U, 
    3358U, 4191U, 6367U, 3686U, 3700U, 3955U, 3604U, 4010U, 
    3964U, 3937U, 4456U, 3628U, 4282U, 3901U, 7367U, 4432U, 
    7439U, 3676U, 7356U, 4310U, 7428U, 3945U, 7378U, 4464U, 
    7456U, 3848U, 4396U, 4423U, 4918U, 5366U, 4951U, 5399U, 
    3892U, 4929U, 5377U, 4962U, 5410U, 3646U, 4290U, 4036U, 
    4510U, 3666U, 4300U, 4046U, 4520U, 4028U, 4502U, 3594U, 
    4264U, 3828U, 4386U, 4064U, 4530U, 3866U, 4406U, 3552U, 
    4243U, 3786U, 4365U, 3746U, 4346U, 3920U, 4447U, 3730U, 
    4338U, 3573U, 4253U, 3807U, 4375U, 3531U, 4232U, 3765U, 
    4354U, 2929U, 2043U, 3366U, 4199U, 6375U, 3693U, 4320U, 
    2936U, 2051U, 3374U, 4207U, 6383U, 3711U, 4327U, 3984U, 
    4484U, 3612U, 4274U, 4019U, 4493U, 3974U, 4474U, 2208U, 
    1983U, 4699U, 4693U, 6465U, 4726U, 5745U, 5772U, 2844U, 
    3100U, 2963U, 5873U, 1970U, 1610U, 4782U, 3158U, 3042U, 
    1701U, 4643U, 3123U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1059);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~PPCGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1059);
}
PPCGenInstrInfo::~PPCGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace PPC {
namespace OpTypes { 
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  calltarget = 3,
  condbrtarget = 4,
  crbitm = 5,
  directbrtarget = 6,
  dispRI = 7,
  dispRIX = 8,
  f32imm = 9,
  f64imm = 10,
  i16imm = 11,
  i1imm = 12,
  i32imm = 13,
  i64imm = 14,
  i8imm = 15,
  imm32SExt16 = 16,
  imm64SExt16 = 17,
  imm64ZExt32 = 18,
  memr = 19,
  memri = 20,
  memrix = 21,
  memrr = 22,
  pred = 23,
  ptr_rc_idx = 24,
  ptr_rc_nor0 = 25,
  s16imm = 26,
  s16imm64 = 27,
  s17imm = 28,
  s17imm64 = 29,
  s5imm = 30,
  tlscall = 31,
  tlsgd = 32,
  tlsreg = 33,
  tlsreg32 = 34,
  tocentry = 35,
  tocentry32 = 36,
  u16imm = 37,
  u16imm64 = 38,
  u2imm = 39,
  u5imm = 40,
  u6imm = 41,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace PPC
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum IsVSXFMAAlt {
	IsVSXFMAAlt_1
};

enum RC {
	RC_0,
	RC_1
};

// getAltVSXFMAOpcode
int getAltVSXFMAOpcode(uint16_t Opcode) {
static const uint16_t getAltVSXFMAOpcodeTable[][2] = {
  { PPC::XSMADDADP, PPC::XSMADDMDP },
  { PPC::XSMSUBADP, PPC::XSMSUBMDP },
  { PPC::XSNMADDADP, PPC::XSNMADDMDP },
  { PPC::XSNMSUBADP, PPC::XSNMSUBMDP },
  { PPC::XVMADDADP, PPC::XVMADDMDP },
  { PPC::XVMADDASP, PPC::XVMADDMSP },
  { PPC::XVMSUBADP, PPC::XVMSUBMDP },
  { PPC::XVMSUBASP, PPC::XVMSUBMSP },
  { PPC::XVNMADDADP, PPC::XVNMADDMDP },
  { PPC::XVNMADDASP, PPC::XVNMADDMSP },
  { PPC::XVNMSUBADP, PPC::XVNMSUBMDP },
  { PPC::XVNMSUBASP, PPC::XVNMSUBMSP },
}; // End of getAltVSXFMAOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getAltVSXFMAOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getAltVSXFMAOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getAltVSXFMAOpcodeTable[mid][1];
}

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMI8o, PPC::RLWIMI8 },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 128;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWIMI8, PPC::RLWIMI8o },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 128;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

